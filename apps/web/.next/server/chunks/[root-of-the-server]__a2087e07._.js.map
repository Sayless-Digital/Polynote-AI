{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///home/slk/Documents/Projects/polynote/apps/web/src/lib/ai.ts"],"sourcesContent":["import { google } from '@ai-sdk/google';\nimport { generateText, generateObject } from 'ai';\nimport { z } from 'zod';\n\n// Initialize Gemini Flash model with explicit API key\nexport const geminiFlash = google('models/gemini-1.5-flash-latest', {\n  apiKey: process.env.GOOGLE_GENERATIVE_AI_API_KEY,\n});\n\n// Schema for note analysis\nconst NoteAnalysisSchema = z.object({\n  title: z.string(),\n  summary: z.string(),\n  tags: z.array(z.string()),\n  categories: z.array(z.string()),\n  sentiment: z.string(),\n  keyPoints: z.array(z.string()),\n});\n\n// Schema for search queries\nconst SearchQuerySchema = z.object({\n  intent: z.string(),\n  keywords: z.array(z.string()),\n  filters: z.object({\n    categories: z.array(z.string()).optional(),\n    tags: z.array(z.string()).optional(),\n    dateRange: z.string().optional(),\n  }),\n});\n\n/**\n * Analyze a note transcript and extract metadata\n */\nexport async function analyzeNote(transcript: string) {\n  const prompt = `\nAnalyze this note transcript and provide structured information:\n\nTranscript: \"${transcript}\"\n\nPlease provide:\n- A concise title for the note\n- A brief summary\n- Relevant tags (3-5 keywords)\n- Categories this note belongs to\n- Overall sentiment\n- Key points mentioned\n\nBe specific and relevant to the content.\n`;\n\n  try {\n    const result = await generateObject({\n      model: geminiFlash,\n      schema: NoteAnalysisSchema,\n      prompt,\n    });\n\n    return result.object;\n  } catch (error) {\n    console.error('Error analyzing note:', error);\n    // Fallback analysis\n    return {\n      title: transcript.split(' ').slice(0, 5).join(' ') + '...',\n      summary: transcript.length > 100 ? transcript.substring(0, 100) + '...' : transcript,\n      tags: ['note'],\n      categories: ['general'],\n      sentiment: 'neutral',\n      keyPoints: [transcript],\n    };\n  }\n}\n\n/**\n * Generate search suggestions based on user query\n */\nexport async function generateSearchQuery(query: string) {\n  const prompt = `\nAnalyze this search query and provide structured search parameters:\n\nQuery: \"${query}\"\n\nPlease identify:\n- The user's intent\n- Key search keywords\n- Any category or tag filters mentioned\n- Date range preferences if any\n\nMake the search parameters specific and helpful.\n`;\n\n  try {\n    const result = await generateObject({\n      model: geminiFlash,\n      schema: SearchQuerySchema,\n      prompt,\n    });\n\n    return result.object;\n  } catch (error) {\n    console.error('Error generating search query:', error);\n    return {\n      intent: 'general_search',\n      keywords: query.split(' '),\n      filters: {},\n    };\n  }\n}\n\n/**\n * Generate a response to user questions about their notes\n */\nexport async function generateNoteResponse(question: string, context: string) {\n  const prompt = `\nBased on the following note content, answer the user's question:\n\nNote Content: \"${context}\"\n\nUser Question: \"${question}\"\n\nProvide a helpful, concise answer based on the note content.\n`;\n\n  try {\n    const result = await generateText({\n      model: geminiFlash,\n      prompt,\n    });\n\n    return result.text;\n  } catch (error) {\n    console.error('Error generating response:', error);\n    return 'I apologize, but I encountered an error processing your question.';\n  }\n}\n\n/**\n * Test AI connection and API key\n */\nexport async function testAIConnection(): Promise<boolean> {\n  try {\n    const result = await generateText({\n      model: geminiFlash,\n      prompt: 'Say \"Hello\" if you can read this message.',\n    });\n\n    return result.text.includes('Hello') || result.text.length > 0;\n  } catch (error) {\n    console.error('AI connection test failed:', error);\n    return false;\n  }\n}\n\n/**\n * Transcribe audio to text (placeholder for voice transcription)\n */\nexport async function transcribeAudio(): Promise<string> {\n  // This is a placeholder - in a real implementation, you'd use:\n  // - Web Speech API for browser-based transcription\n  // - Google Speech-to-Text API\n  // - OpenAI Whisper API\n  // For now, return a mock transcript\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"This is a mock transcript from the audio. In a real implementation, this would be the actual transcribed text from the user's voice recording.\");\n    }, 1000);\n  });\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///home/slk/Documents/Projects/polynote/apps/web/src/app/api/test-ai/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { testAIConnection } from '@/lib/ai';\n\nexport async function GET() {\n  try {\n    console.log('Testing AI connection from API endpoint...');\n    console.log('Environment check:', {\n      hasApiKey: !!process.env.GOOGLE_GENERATIVE_AI_API_KEY,\n      apiKeyLength: process.env.GOOGLE_GENERATIVE_AI_API_KEY?.length,\n      apiKeyPrefix: process.env.GOOGLE_GENERATIVE_AI_API_KEY?.substring(0, 10)\n    });\n\n    const result = await testAIConnection();\n\n    return NextResponse.json({\n      success: true,\n      aiConnection: result,\n      environment: {\n        hasApiKey: !!process.env.GOOGLE_GENERATIVE_AI_API_KEY,\n        apiKeyLength: process.env.GOOGLE_GENERATIVE_AI_API_KEY?.length\n      }\n    });\n  } catch (error) {\n    console.error('AI test endpoint error:', error);\n    return NextResponse.json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      environment: {\n        hasApiKey: !!process.env.GOOGLE_GENERATIVE_AI_API_KEY,\n        apiKeyLength: process.env.GOOGLE_GENERATIVE_AI_API_KEY?.length\n      }\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,sBAAsB;YAChC,WAAW,CAAC,CAAC,QAAQ,GAAG,CAAC,4BAA4B;YACrD,cAAc,QAAQ,GAAG,CAAC,4BAA4B,EAAE;YACxD,cAAc,QAAQ,GAAG,CAAC,4BAA4B,EAAE,UAAU,GAAG;QACvE;QAEA,MAAM,SAAS,MAAM,IAAA,qJAAgB;QAErC,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,cAAc;YACd,aAAa;gBACX,WAAW,CAAC,CAAC,QAAQ,GAAG,CAAC,4BAA4B;gBACrD,cAAc,QAAQ,GAAG,CAAC,4BAA4B,EAAE;YAC1D;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAChD,aAAa;gBACX,WAAW,CAAC,CAAC,QAAQ,GAAG,CAAC,4BAA4B;gBACrD,cAAc,QAAQ,GAAG,CAAC,4BAA4B,EAAE;YAC1D;QACF,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}