{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///home/slk/Documents/Projects/polynote/apps/web/src/lib/file-extraction.ts"],"sourcesContent":["import pdf from 'pdf-parse';\nimport mammoth from 'mammoth';\n\nexport interface ExtractedContent {\n  text: string;\n  type: 'text' | 'pdf' | 'docx' | 'unsupported';\n  success: boolean;\n  error?: string;\n}\n\n/**\n * Extract text content from various file types\n */\nexport async function extractTextFromFile(file: File): Promise<ExtractedContent> {\n  const fileName = file.name.toLowerCase();\n  const fileType = file.type;\n\n  try {\n    // Handle text files\n    if (fileType.startsWith('text/') || fileName.endsWith('.txt') || fileName.endsWith('.md')) {\n      try {\n        const text = await file.text();\n        return {\n          text: text.trim(),\n          type: 'text',\n          success: true\n        };\n      } catch (textError) {\n        console.warn(`Failed to read text file ${fileName}:`, textError);\n        // Try reading as array buffer and convert to string\n        try {\n          const arrayBuffer = await file.arrayBuffer();\n          const decoder = new TextDecoder('utf-8', { fatal: false });\n          const text = decoder.decode(arrayBuffer);\n          return {\n            text: text.trim(),\n            type: 'text',\n            success: true\n          };\n        } catch (bufferError) {\n          console.error(`Failed to read text file ${fileName} as buffer:`, bufferError);\n          return {\n            text: `[Text file: ${file.name}] - Could not read file content. The file may be corrupted or use an unsupported encoding.`,\n            type: 'text',\n            success: false,\n            error: 'Text file reading failed'\n          };\n        }\n      }\n    }\n\n    // Handle PDF files\n    if (fileType === 'application/pdf' || fileName.endsWith('.pdf')) {\n      try {\n        const arrayBuffer = await file.arrayBuffer();\n        const buffer = Buffer.from(arrayBuffer);\n        const data = await pdf(buffer);\n        return {\n          text: data.text.trim(),\n          type: 'pdf',\n          success: true\n        };\n      } catch (pdfError) {\n        console.error(`Failed to parse PDF ${fileName}:`, pdfError);\n        return {\n          text: `[PDF file: ${file.name}] - Could not extract text from PDF. The file may be corrupted, password-protected, or contain only images.`,\n          type: 'pdf',\n          success: false,\n          error: 'PDF parsing failed'\n        };\n      }\n    }\n\n    // Handle DOCX files\n    if (fileType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' || \n        fileName.endsWith('.docx')) {\n      try {\n        const arrayBuffer = await file.arrayBuffer();\n        const buffer = Buffer.from(arrayBuffer);\n        const result = await mammoth.extractRawText({ buffer });\n        return {\n          text: result.value.trim(),\n          type: 'docx',\n          success: true\n        };\n      } catch (docxError) {\n        console.error(`Failed to parse DOCX ${fileName}:`, docxError);\n        return {\n          text: `[DOCX file: ${file.name}] - Could not extract text from DOCX. The file may be corrupted or use an unsupported format.`,\n          type: 'docx',\n          success: false,\n          error: 'DOCX parsing failed'\n        };\n      }\n    }\n\n    // Handle DOC files (basic support)\n    if (fileName.endsWith('.doc')) {\n      return {\n        text: `[DOC file: ${file.name}] - Content extraction not supported for .doc files. Please convert to .docx for full text extraction.`,\n        type: 'unsupported',\n        success: false,\n        error: 'DOC files not supported'\n      };\n    }\n\n    // Handle images (placeholder for future implementation)\n    if (fileType.startsWith('image/')) {\n      return {\n        text: `[Image file: ${file.name}] - Image content analysis not yet implemented.`,\n        type: 'unsupported',\n        success: false,\n        error: 'Image analysis not implemented'\n      };\n    }\n\n    // Handle audio/video (placeholder for future implementation)\n    if (fileType.startsWith('audio/') || fileType.startsWith('video/')) {\n      return {\n        text: `[Media file: ${file.name}] - Audio/video transcription not yet implemented.`,\n        type: 'unsupported',\n        success: false,\n        error: 'Media transcription not implemented'\n      };\n    }\n\n    // Unsupported file type\n    return {\n      text: `[File: ${file.name}] - File type not supported for content extraction.`,\n      type: 'unsupported',\n      success: false,\n      error: 'Unsupported file type'\n    };\n\n  } catch (error) {\n    console.error('Error extracting text from file:', error);\n    return {\n      text: `[Error processing ${file.name}] - Could not extract content from this file.`,\n      type: 'unsupported',\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n/**\n * Extract text from multiple files\n */\nexport async function extractTextFromFiles(files: File[]): Promise<{\n  extractedTexts: ExtractedContent[];\n  combinedText: string;\n  supportedFiles: number;\n  totalFiles: number;\n}> {\n  const extractedTexts: ExtractedContent[] = [];\n  let combinedText = '';\n  let supportedFiles = 0;\n\n  for (const file of files) {\n    const extracted = await extractTextFromFile(file);\n    extractedTexts.push(extracted);\n    \n    if (extracted.success) {\n      supportedFiles++;\n      combinedText += `\\n\\n--- Content from ${file.name} ---\\n${extracted.text}`;\n    } else {\n      combinedText += `\\n\\n--- ${file.name} (${extracted.error}) ---\\n${extracted.text}`;\n    }\n  }\n\n  return {\n    extractedTexts,\n    combinedText: combinedText.trim(),\n    supportedFiles,\n    totalFiles: files.length\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":["file:///home/slk/Documents/Projects/polynote/apps/web/src/app/api/extract-content/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { extractTextFromFile } from '@/lib/file-extraction';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const formData = await request.formData();\n    const file = formData.get('file') as File;\n    \n    if (!file) {\n      return NextResponse.json(\n        { error: 'No file provided' },\n        { status: 400 }\n      );\n    }\n\n    console.log(`Extracting content from file: ${file.name} (${file.size} bytes, ${file.type})`);\n\n    // Extract text content from the file\n    const extracted = await extractTextFromFile(file);\n\n    console.log(`Extraction result for ${file.name}:`, {\n      success: extracted.success,\n      type: extracted.type,\n      textLength: extracted.text.length,\n      error: extracted.error\n    });\n\n    return NextResponse.json({\n      success: extracted.success,\n      content: extracted.text,\n      type: extracted.type,\n      error: extracted.error,\n      fileName: file.name,\n      fileSize: file.size,\n      fileType: file.type\n    });\n\n  } catch (error) {\n    console.error('Error extracting file content:', {\n      error: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined,\n      fileName: (formData?.get('file') as File)?.name || 'unknown'\n    });\n    return NextResponse.json(\n      { \n        error: 'Failed to extract file content',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,YAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,OAAO,UAAS,GAAG,CAAC;QAE1B,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmB,GAC5B;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC,CAAC,8BAA8B,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;QAE3F,qCAAqC;QACrC,MAAM,YAAY,MAAM,IAAA,wKAAmB,EAAC;QAE5C,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE;YACjD,SAAS,UAAU,OAAO;YAC1B,MAAM,UAAU,IAAI;YACpB,YAAY,UAAU,IAAI,CAAC,MAAM;YACjC,OAAO,UAAU,KAAK;QACxB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS,UAAU,OAAO;YAC1B,SAAS,UAAU,IAAI;YACvB,MAAM,UAAU,IAAI;YACpB,OAAO,UAAU,KAAK;YACtB,UAAU,KAAK,IAAI;YACnB,UAAU,KAAK,IAAI;YACnB,UAAU,KAAK,IAAI;QACrB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;YAC9C,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAChD,OAAO,iBAAiB,QAAQ,MAAM,KAAK,GAAG;YAC9C,UAAU,AAAC,UAAU,IAAI,SAAkB,QAAQ;QACrD;QACA,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}