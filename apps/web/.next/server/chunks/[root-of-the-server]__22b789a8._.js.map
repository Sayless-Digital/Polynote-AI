{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/packages/db/src/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, uuid, jsonb, index, boolean, varchar, integer } from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\n\n// Users table for authentication\nexport const users = pgTable('users', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  email: varchar('email', { length: 255 }).notNull().unique(),\n  name: text('name').notNull(),\n  passwordHash: text('password_hash').notNull(),\n  emailVerified: boolean('email_verified').default(false).notNull(),\n  avatar: text('avatar'), // URL to user avatar\n  preferences: jsonb('preferences').$type<Record<string, unknown>>(), // User preferences\n  resetToken: text('reset_token'), // Password reset token\n  resetTokenExpiry: timestamp('reset_token_expiry'), // Password reset token expiry\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  emailIdx: index('users_email_idx').on(table.email),\n  createdAtIdx: index('users_created_at_idx').on(table.createdAt),\n  resetTokenIdx: index('users_reset_token_idx').on(table.resetToken),\n}));\n\n// User sessions table for authentication\nexport const sessions = pgTable('sessions', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  token: text('token').notNull().unique(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('sessions_user_id_idx').on(table.userId),\n  tokenIdx: index('sessions_token_idx').on(table.token),\n  expiresAtIdx: index('sessions_expires_at_idx').on(table.expiresAt),\n}));\n\n// Email verification tokens table\nexport const emailVerificationTokens = pgTable('email_verification_tokens', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  token: text('token').notNull().unique(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('email_verification_tokens_user_id_idx').on(table.userId),\n  tokenIdx: index('email_verification_tokens_token_idx').on(table.token),\n  expiresAtIdx: index('email_verification_tokens_expires_at_idx').on(table.expiresAt),\n}));\n\n// Notes table - updated with user ownership\nexport const notes = pgTable('notes', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  title: text('title').notNull(),\n  content: text('content').notNull(),\n  transcript: text('transcript'), // Original voice transcript\n  summary: text('summary'), // AI-generated summary\n  tags: jsonb('tags').$type<string[]>(), // AI-generated tags\n  categories: jsonb('categories').$type<string[]>(), // AI-generated categories\n  metadata: jsonb('metadata').$type<Record<string, unknown>>(), // Additional AI metadata\n  isPublic: boolean('is_public').default(false).notNull(), // Allow sharing notes\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('notes_user_id_idx').on(table.userId),\n  titleIdx: index('notes_title_idx').on(table.title),\n  createdAtIdx: index('notes_created_at_idx').on(table.createdAt),\n  tagsIdx: index('notes_tags_idx').on(table.tags),\n  categoriesIdx: index('notes_categories_idx').on(table.categories),\n  isPublicIdx: index('notes_is_public_idx').on(table.isPublic),\n}));\n\n// Note searches table for full-text search\nexport const noteSearches = pgTable('note_searches', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  noteId: uuid('note_id').references(() => notes.id, { onDelete: 'cascade' }),\n  searchVector: text('search_vector'), // For full-text search\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// File attachments table\nexport const attachments = pgTable('attachments', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  noteId: uuid('note_id').references(() => notes.id, { onDelete: 'cascade' }).notNull(),\n  filename: text('filename').notNull(),\n  originalName: text('original_name').notNull(),\n  size: text('size').notNull(), // File size in bytes\n  type: text('type').notNull(), // MIME type\n  url: text('url').notNull(), // Vercel Blob URL\n  content: text('content'), // Extracted text content for search\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  noteIdIdx: index('attachments_note_id_idx').on(table.noteId),\n  createdAtIdx: index('attachments_created_at_idx').on(table.createdAt),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  notes: many(notes),\n  sessions: many(sessions),\n  emailVerificationTokens: many(emailVerificationTokens),\n}));\n\nexport const sessionsRelations = relations(sessions, ({ one }) => ({\n  user: one(users, {\n    fields: [sessions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const emailVerificationTokensRelations = relations(emailVerificationTokens, ({ one }) => ({\n  user: one(users, {\n    fields: [emailVerificationTokens.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const notesRelations = relations(notes, ({ one, many }) => ({\n  user: one(users, {\n    fields: [notes.userId],\n    references: [users.id],\n  }),\n  searches: many(noteSearches),\n  attachments: many(attachments),\n}));\n\nexport const noteSearchesRelations = relations(noteSearches, ({ one }) => ({\n  note: one(notes, {\n    fields: [noteSearches.noteId],\n    references: [notes.id],\n  }),\n}));\n\nexport const attachmentsRelations = relations(attachments, ({ one }) => ({\n  note: one(notes, {\n    fields: [attachments.noteId],\n    references: [notes.id],\n  }),\n}));\n\n// User AI Settings table\nexport const userAISettings = pgTable('user_ai_settings', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  \n  // API Configuration\n  provider: varchar('provider', { length: 50 }).notNull().default('google'), // 'google', 'openai', 'anthropic'\n  apiKey: text('api_key'), // Encrypted API key\n  model: varchar('model', { length: 100 }).notNull().default('gemini-1.5-flash-latest'),\n  \n  // Usage Tracking\n  totalTokensUsed: integer('total_tokens_used').default(0).notNull(),\n  totalRequests: integer('total_requests').default(0).notNull(),\n  lastUsedAt: timestamp('last_used_at'),\n  \n  // Settings\n  enabledAnalyses: jsonb('enabled_analyses').$type<string[]>().default(['title', 'summary', 'key_points', 'categories', 'tags']),\n  analysisTimeout: integer('analysis_timeout').default(30000), // 30 seconds\n  cacheEnabled: boolean('cache_enabled').default(true),\n  cacheTTL: integer('cache_ttl').default(86400), // 24 hours in seconds\n  \n  // Metadata\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('user_ai_settings_user_id_idx').on(table.userId),\n  providerIdx: index('user_ai_settings_provider_idx').on(table.provider),\n  lastUsedIdx: index('user_ai_settings_last_used_idx').on(table.lastUsedAt),\n}));\n\n// Token Usage Log table for detailed tracking\nexport const tokenUsageLogs = pgTable('token_usage_logs', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  noteId: uuid('note_id'), // Optional reference to note\n  \n  // Request details\n  provider: varchar('provider', { length: 50 }).notNull(),\n  model: varchar('model', { length: 100 }).notNull(),\n  analysisType: varchar('analysis_type', { length: 50 }).notNull(),\n  \n  // Token usage\n  inputTokens: integer('input_tokens').default(0).notNull(),\n  outputTokens: integer('output_tokens').default(0).notNull(),\n  totalTokens: integer('total_tokens').default(0).notNull(),\n  \n  // Request metadata\n  requestDuration: integer('request_duration'), // milliseconds\n  success: boolean('success').default(true).notNull(),\n  errorMessage: text('error_message'),\n  \n  // Cost tracking (for future billing)\n  estimatedCost: integer('estimated_cost'), // in cents\n  \n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('token_usage_logs_user_id_idx').on(table.userId),\n  noteIdIdx: index('token_usage_logs_note_id_idx').on(table.noteId),\n  createdAtIdx: index('token_usage_logs_created_at_idx').on(table.createdAt),\n  providerIdx: index('token_usage_logs_provider_idx').on(table.provider),\n}));\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type Session = typeof sessions.$inferSelect;\nexport type NewSession = typeof sessions.$inferInsert;\nexport type EmailVerificationToken = typeof emailVerificationTokens.$inferSelect;\nexport type NewEmailVerificationToken = typeof emailVerificationTokens.$inferInsert;\nexport type Note = typeof notes.$inferSelect;\nexport type NewNote = typeof notes.$inferInsert;\nexport type NoteSearch = typeof noteSearches.$inferSelect;\nexport type NewNoteSearch = typeof noteSearches.$inferInsert;\nexport type Attachment = typeof attachments.$inferSelect;\nexport type NewAttachment = typeof attachments.$inferInsert;\nexport type UserAISettings = typeof userAISettings.$inferSelect;\nexport type NewUserAISettings = typeof userAISettings.$inferInsert;\nexport type TokenUsageLog = typeof tokenUsageLogs.$inferSelect;\nexport type NewTokenUsageLog = typeof tokenUsageLogs.$inferInsert;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 337, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/packages/db/src/index.ts"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { config } from 'dotenv';\nimport { resolve } from 'path';\nimport * as schema from './schema';\n\n// Load environment variables from the root .env.local file\nconfig({ path: resolve(__dirname, '../../../.env.local') });\n\nconst sql = neon(process.env.DATABASE_URL!);\nexport const db = drizzle(sql, { schema });\n\nexport * from './schema';\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,2DAA2D;AAC3D,IAAA,+GAAM,EAAC;IAAE,MAAM,IAAA,4GAAO,6DAAY;AAAuB;AAEzD,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;AAClC,MAAM,KAAK,IAAA,qKAAO,EAAC,KAAK;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/auth.ts"],"sourcesContent":["import { cookies } from 'next/headers';\nimport { db, users, sessions, emailVerificationTokens } from '@polynote/db';\nimport { eq, and, gt } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\nimport { randomBytes } from 'crypto';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  emailVerified: boolean;\n  avatar?: string;\n  preferences?: Record<string, unknown>;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Session {\n  id: string;\n  userId: string;\n  token: string;\n  expiresAt: Date;\n  createdAt: Date;\n}\n\n// Password hashing\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\n// Session management\nexport async function createSession(userId: string): Promise<Session> {\n  const token = randomBytes(32).toString('hex');\n  const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days\n\n  const [session] = await db.insert(sessions).values({\n    userId,\n    token,\n    expiresAt,\n  }).returning();\n\n  return session;\n}\n\nexport async function getSession(token: string): Promise<Session | null> {\n  const [session] = await db\n    .select()\n    .from(sessions)\n    .where(and(\n      eq(sessions.token, token),\n      gt(sessions.expiresAt, new Date())\n    ))\n    .limit(1);\n\n  return session || null;\n}\n\nexport async function deleteSession(token: string): Promise<void> {\n  await db.delete(sessions).where(eq(sessions.token, token));\n}\n\n// Email verification\nexport async function createEmailVerificationToken(userId: string): Promise<string> {\n  const token = randomBytes(32).toString('hex');\n  const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n\n  await db.insert(emailVerificationTokens).values({\n    userId,\n    token,\n    expiresAt,\n  });\n\n  return token;\n}\n\nexport async function verifyEmailToken(token: string): Promise<string | null> {\n  const [verificationToken] = await db\n    .select()\n    .from(emailVerificationTokens)\n    .where(and(\n      eq(emailVerificationTokens.token, token),\n      gt(emailVerificationTokens.expiresAt, new Date())\n    ))\n    .limit(1);\n\n  if (!verificationToken) {\n    return null;\n  }\n\n  // Mark user as verified\n  await db.update(users)\n    .set({ emailVerified: true })\n    .where(eq(users.id, verificationToken.userId));\n\n  // Delete the verification token\n  await db.delete(emailVerificationTokens)\n    .where(eq(emailVerificationTokens.token, token));\n\n  return verificationToken.userId;\n}\n\n// User management\nexport async function getUserByEmail(email: string): Promise<User | null> {\n  const [user] = await db\n    .select()\n    .from(users)\n    .where(eq(users.email, email))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function getUserByEmailWithPassword(email: string): Promise<(User & { passwordHash: string }) | null> {\n  const [user] = await db\n    .select({\n      id: users.id,\n      email: users.email,\n      name: users.name,\n      emailVerified: users.emailVerified,\n      avatar: users.avatar,\n      preferences: users.preferences,\n      createdAt: users.createdAt,\n      updatedAt: users.updatedAt,\n      passwordHash: users.passwordHash,\n    })\n    .from(users)\n    .where(eq(users.email, email))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function getUserById(id: string): Promise<User | null> {\n  const [user] = await db\n    .select()\n    .from(users)\n    .where(eq(users.id, id))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function createUser(email: string, name: string, password: string): Promise<User> {\n  const passwordHash = await hashPassword(password);\n  \n  const [user] = await db.insert(users).values({\n    email,\n    name,\n    passwordHash,\n  }).returning();\n\n  return user;\n}\n\n// Authentication helpers\nexport async function getCurrentUser(): Promise<User | null> {\n  const cookieStore = await cookies();\n  const sessionToken = cookieStore.get('session')?.value;\n  \n  if (!sessionToken) {\n    return null;\n  }\n\n  const session = await getSession(sessionToken);\n  if (!session) {\n    return null;\n  }\n\n  return getUserById(session.userId);\n}\n\nexport async function requireAuth(): Promise<User> {\n  const user = await getCurrentUser();\n  if (!user) {\n    throw new Error('Authentication required');\n  }\n  return user;\n}\n\n// Cookie helpers\nexport async function setSessionCookie(token: string) {\n  const cookieStore = await cookies();\n  cookieStore.set('session', token, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'lax',\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n    path: '/',\n  });\n}\n\nexport async function clearSessionCookie() {\n  const cookieStore = await cookies();\n  cookieStore.delete('session');\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 553, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/app/api/auth/me/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/auth';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Not authenticated' },\n        { status: 401 }\n      );\n    }\n\n    return NextResponse.json({\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        emailVerified: user.emailVerified,\n        avatar: user.avatar,\n        preferences: user.preferences,\n      },\n    });\n  } catch (error) {\n    console.error('Get current user error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,OAAO,MAAM,IAAA,qJAAc;QAEjC,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoB,GAC7B;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,MAAM;gBACJ,IAAI,KAAK,EAAE;gBACX,OAAO,KAAK,KAAK;gBACjB,MAAM,KAAK,IAAI;gBACf,eAAe,KAAK,aAAa;gBACjC,QAAQ,KAAK,MAAM;gBACnB,aAAa,KAAK,WAAW;YAC/B;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}