{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/ai.ts"],"sourcesContent":["import { google } from '@ai-sdk/google';\nimport { generateText, generateObject } from 'ai';\nimport { z } from 'zod';\n\n// Initialize Gemini Flash model with explicit API key\nexport const geminiFlash = google('models/gemini-1.5-flash-latest', {\n  apiKey: process.env.GOOGLE_GENERATIVE_AI_API_KEY,\n});\n\n// Schema for note analysis\nconst NoteAnalysisSchema = z.object({\n  title: z.string(),\n  summary: z.string(),\n  tags: z.array(z.string()),\n  categories: z.array(z.string()),\n  sentiment: z.string(),\n  keyPoints: z.array(z.string()),\n});\n\n// Schema for search queries\nconst SearchQuerySchema = z.object({\n  intent: z.string(),\n  keywords: z.array(z.string()),\n  filters: z.object({\n    categories: z.array(z.string()).optional(),\n    tags: z.array(z.string()).optional(),\n    dateRange: z.string().optional(),\n  }),\n});\n\n/**\n * Analyze a note transcript and extract metadata\n */\nexport async function analyzeNote(transcript: string) {\n  const prompt = `You are an AI assistant that analyzes notes and extracts structured information.\n\nNote content: \"${transcript}\"\n\nPlease analyze this content and provide:\n1. A concise, descriptive title (not just the first few words)\n2. A brief summary that captures the main ideas\n3. 3-5 relevant tags/keywords\n4. Appropriate categories\n5. The overall sentiment\n6. Key points mentioned\n\nMake sure to actually analyze and summarize the content, not just repeat it.`;\n\n  try {\n    console.log('Calling AI analysis with prompt:', prompt.substring(0, 200) + '...');\n    const result = await generateObject({\n      model: geminiFlash,\n      schema: NoteAnalysisSchema,\n      prompt,\n    });\n\n    console.log('AI analysis successful:', result.object);\n    return result.object;\n  } catch (error) {\n    console.error('AI analysis failed, using fallback:', error);\n    \n    // Check if it's a quota exceeded error\n    const isQuotaExceeded = error instanceof Error && \n      (error.message.includes('quota') || \n       error.message.includes('RESOURCE_EXHAUSTED') ||\n       error.message.includes('429'));\n    \n    if (isQuotaExceeded) {\n      console.warn('AI API quota exceeded, using enhanced fallback analysis');\n    }\n    \n    // Enhanced fallback analysis\n    const words = transcript.split(' ').filter(word => word.length > 0);\n    const firstSentence = transcript.split(/[.!?]/)[0] || transcript;\n    \n    return {\n      title: words.slice(0, 6).join(' ') + (words.length > 6 ? '...' : ''),\n      summary: firstSentence.length > 150 ? firstSentence.substring(0, 150) + '...' : firstSentence,\n      tags: ['note', 'analysis'],\n      categories: ['general'],\n      sentiment: 'neutral',\n      keyPoints: words.length > 10 ? [words.slice(0, 10).join(' '), words.slice(10, 20).join(' ')].filter(Boolean) : [transcript],\n    };\n  }\n}\n\n/**\n * Generate search suggestions based on user query\n */\nexport async function generateSearchQuery(query: string) {\n  const prompt = `\nAnalyze this search query and provide structured search parameters:\n\nQuery: \"${query}\"\n\nPlease identify:\n- The user's intent\n- Key search keywords\n- Any category or tag filters mentioned\n- Date range preferences if any\n\nMake the search parameters specific and helpful.\n`;\n\n  try {\n    const result = await generateObject({\n      model: geminiFlash,\n      schema: SearchQuerySchema,\n      prompt,\n    });\n\n    return result.object;\n  } catch (error) {\n    console.error('Error generating search query:', error);\n    return {\n      intent: 'general_search',\n      keywords: query.split(' '),\n      filters: {},\n    };\n  }\n}\n\n/**\n * Generate a response to user questions about their notes\n */\nexport async function generateNoteResponse(question: string, context: string) {\n  const prompt = `\nBased on the following note content, answer the user's question:\n\nNote Content: \"${context}\"\n\nUser Question: \"${question}\"\n\nProvide a helpful, concise answer based on the note content.\n`;\n\n  try {\n    const result = await generateText({\n      model: geminiFlash,\n      prompt,\n    });\n\n    return result.text;\n  } catch (error) {\n    console.error('Error generating response:', error);\n    return 'I apologize, but I encountered an error processing your question.';\n  }\n}\n\n/**\n * Test AI connection and API key\n */\nexport async function testAIConnection(): Promise<boolean> {\n  try {\n    console.log('Testing AI connection with model:', geminiFlash);\n    console.log('API Key present:', !!process.env.GOOGLE_GENERATIVE_AI_API_KEY);\n    console.log('API Key length:', process.env.GOOGLE_GENERATIVE_AI_API_KEY?.length);\n    \n    const result = await generateText({\n      model: geminiFlash,\n      prompt: 'Say \"Hello\" if you can read this message.',\n    });\n\n    console.log('AI test result:', result.text);\n    return result.text.includes('Hello') || result.text.length > 0;\n  } catch (error) {\n    console.error('AI connection test failed:', error);\n    console.error('Error details:', {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined,\n    });\n    return false;\n  }\n}\n\n/**\n * Transcribe audio to text (placeholder for voice transcription)\n */\nexport async function transcribeAudio(): Promise<string> {\n  // This is a placeholder - in a real implementation, you'd use:\n  // - Web Speech API for browser-based transcription\n  // - Google Speech-to-Text API\n  // - OpenAI Whisper API\n  // For now, return a mock transcript\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"This is a mock transcript from the audio. In a real implementation, this would be the actual transcribed text from the user's voice recording.\");\n    }, 1000);\n  });\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/analysis/types.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Base analysis result interface\nexport interface AnalysisResult {\n  id: string;\n  noteId: string;\n  type: AnalysisType;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  result?: Record<string, unknown>;\n  error?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  processingTime?: number;\n}\n\n// Analysis types\nexport enum AnalysisType {\n  SUMMARY = 'summary',\n  KEY_POINTS = 'key_points',\n  CATEGORIES = 'categories',\n  TAGS = 'tags',\n  SENTIMENT = 'sentiment',\n  TITLE = 'title',\n  ENTITIES = 'entities',\n  TOPICS = 'topics',\n  RELATIONSHIPS = 'relationships',\n  CONFIDENCE_SCORE = 'confidence_score'\n}\n\n// Individual analysis schemas\nexport const SummaryAnalysisSchema = z.object({\n  summary: z.string().min(10).max(1000),\n  confidence: z.number().min(0).max(1),\n  wordCount: z.number().min(1),\n  keyThemes: z.array(z.string()).max(5),\n  language: z.string().optional(),\n});\n\nexport const KeyPointsAnalysisSchema = z.object({\n  keyPoints: z.array(z.object({\n    point: z.string().min(10).max(200),\n    importance: z.number().min(0).max(1),\n    category: z.string().optional(),\n    evidence: z.string().optional(),\n  })).min(1).max(10),\n  totalPoints: z.number().min(1),\n  averageImportance: z.number().min(0).max(1),\n});\n\nexport const CategoriesAnalysisSchema = z.object({\n  categories: z.array(z.object({\n    name: z.string().min(2).max(50),\n    confidence: z.number().min(0).max(1),\n    reasoning: z.string().optional(),\n    subcategories: z.array(z.string()).optional(),\n  })).min(1).max(5),\n  primaryCategory: z.string().min(2).max(50),\n  categoryHierarchy: z.array(z.string()).optional(),\n});\n\nexport const TagsAnalysisSchema = z.object({\n  tags: z.array(z.object({\n    tag: z.string().min(2).max(30),\n    relevance: z.number().min(0).max(1),\n    type: z.enum(['topic', 'entity', 'concept', 'action', 'emotion']),\n    frequency: z.number().min(1).optional(),\n  })).min(1).max(15),\n  tagCloud: z.record(z.number()).optional(),\n});\n\nexport const SentimentAnalysisSchema = z.object({\n  sentiment: z.enum(['positive', 'negative', 'neutral', 'mixed']),\n  confidence: z.number().min(0).max(1),\n  emotions: z.array(z.object({\n    emotion: z.string(),\n    intensity: z.number().min(0).max(1),\n  })).optional(),\n  polarity: z.number().min(-1).max(1),\n});\n\nexport const TitleAnalysisSchema = z.object({\n  title: z.string().min(5).max(100),\n  alternatives: z.array(z.string()).max(3).optional(),\n  confidence: z.number().min(0).max(1),\n  style: z.enum(['descriptive', 'question', 'statement', 'creative']).optional(),\n});\n\nexport const EntitiesAnalysisSchema = z.object({\n  entities: z.array(z.object({\n    name: z.string(),\n    type: z.enum(['person', 'organization', 'location', 'date', 'product', 'concept']),\n    confidence: z.number().min(0).max(1),\n    mentions: z.number().min(1),\n    context: z.string().optional(),\n  })).min(0).max(20),\n  entityRelationships: z.array(z.object({\n    entity1: z.string(),\n    entity2: z.string(),\n    relationship: z.string(),\n    confidence: z.number().min(0).max(1),\n  })).optional(),\n});\n\nexport const TopicsAnalysisSchema = z.object({\n  topics: z.array(z.object({\n    topic: z.string().min(3).max(50),\n    relevance: z.number().min(0).max(1),\n    subtopics: z.array(z.string()).optional(),\n    keywords: z.array(z.string()).optional(),\n  })).min(1).max(8),\n  topicDistribution: z.record(z.number()).optional(),\n});\n\nexport const RelationshipsAnalysisSchema = z.object({\n  relationships: z.array(z.object({\n    source: z.string(),\n    target: z.string(),\n    relationship: z.string(),\n    strength: z.number().min(0).max(1),\n    type: z.enum(['causal', 'temporal', 'hierarchical', 'associative', 'contrastive']),\n  })).min(0).max(15),\n  relationshipGraph: z.record(z.array(z.string())).optional(),\n});\n\nexport const ConfidenceScoreSchema = z.object({\n  overallConfidence: z.number().min(0).max(1),\n  analysisBreakdown: z.record(z.number()),\n  qualityIndicators: z.object({\n    contentLength: z.boolean(),\n    clarity: z.boolean(),\n    coherence: z.boolean(),\n    completeness: z.boolean(),\n  }),\n  recommendations: z.array(z.string()).optional(),\n});\n\n// Combined analysis result\nexport interface ComprehensiveAnalysis {\n  noteId: string;\n  analyses: Record<AnalysisType, AnalysisResult>;\n  overallConfidence: number;\n  processingTime: number;\n  version: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Analysis configuration\nexport interface AnalysisConfig {\n  enabledAnalyses: AnalysisType[];\n  priority: AnalysisType[];\n  timeout: number;\n  retryAttempts: number;\n  cacheEnabled: boolean;\n  cacheTTL: number;\n}\n\n// Analysis request\nexport interface AnalysisRequest {\n  noteId: string;\n  content: string;\n  config?: Partial<AnalysisConfig>;\n  forceRefresh?: boolean;\n}\n\n// Analysis response\nexport interface AnalysisResponse {\n  success: boolean;\n  data?: ComprehensiveAnalysis;\n  error?: string;\n  partialResults?: Record<AnalysisType, AnalysisResult>;\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 449, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/packages/db/src/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, uuid, jsonb, index, boolean, varchar, integer } from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\n\n// Users table for authentication\nexport const users = pgTable('users', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  email: varchar('email', { length: 255 }).notNull().unique(),\n  name: text('name').notNull(),\n  passwordHash: text('password_hash').notNull(),\n  emailVerified: boolean('email_verified').default(false).notNull(),\n  avatar: text('avatar'), // URL to user avatar\n  preferences: jsonb('preferences').$type<Record<string, unknown>>(), // User preferences\n  resetToken: text('reset_token'), // Password reset token\n  resetTokenExpiry: timestamp('reset_token_expiry'), // Password reset token expiry\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  emailIdx: index('users_email_idx').on(table.email),\n  createdAtIdx: index('users_created_at_idx').on(table.createdAt),\n  resetTokenIdx: index('users_reset_token_idx').on(table.resetToken),\n}));\n\n// User sessions table for authentication\nexport const sessions = pgTable('sessions', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  token: text('token').notNull().unique(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('sessions_user_id_idx').on(table.userId),\n  tokenIdx: index('sessions_token_idx').on(table.token),\n  expiresAtIdx: index('sessions_expires_at_idx').on(table.expiresAt),\n}));\n\n// Email verification tokens table\nexport const emailVerificationTokens = pgTable('email_verification_tokens', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  token: text('token').notNull().unique(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('email_verification_tokens_user_id_idx').on(table.userId),\n  tokenIdx: index('email_verification_tokens_token_idx').on(table.token),\n  expiresAtIdx: index('email_verification_tokens_expires_at_idx').on(table.expiresAt),\n}));\n\n// Notes table - updated with user ownership\nexport const notes = pgTable('notes', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  title: text('title').notNull(),\n  content: text('content').notNull(),\n  transcript: text('transcript'), // Original voice transcript\n  summary: text('summary'), // AI-generated summary\n  tags: jsonb('tags').$type<string[]>(), // AI-generated tags\n  categories: jsonb('categories').$type<string[]>(), // AI-generated categories\n  metadata: jsonb('metadata').$type<Record<string, unknown>>(), // Additional AI metadata\n  isPublic: boolean('is_public').default(false).notNull(), // Allow sharing notes\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('notes_user_id_idx').on(table.userId),\n  titleIdx: index('notes_title_idx').on(table.title),\n  createdAtIdx: index('notes_created_at_idx').on(table.createdAt),\n  tagsIdx: index('notes_tags_idx').on(table.tags),\n  categoriesIdx: index('notes_categories_idx').on(table.categories),\n  isPublicIdx: index('notes_is_public_idx').on(table.isPublic),\n}));\n\n// Note searches table for full-text search\nexport const noteSearches = pgTable('note_searches', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  noteId: uuid('note_id').references(() => notes.id, { onDelete: 'cascade' }),\n  searchVector: text('search_vector'), // For full-text search\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// File attachments table\nexport const attachments = pgTable('attachments', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  noteId: uuid('note_id').references(() => notes.id, { onDelete: 'cascade' }).notNull(),\n  filename: text('filename').notNull(),\n  originalName: text('original_name').notNull(),\n  size: text('size').notNull(), // File size in bytes\n  type: text('type').notNull(), // MIME type\n  url: text('url').notNull(), // Vercel Blob URL\n  content: text('content'), // Extracted text content for search\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  noteIdIdx: index('attachments_note_id_idx').on(table.noteId),\n  createdAtIdx: index('attachments_created_at_idx').on(table.createdAt),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  notes: many(notes),\n  sessions: many(sessions),\n  emailVerificationTokens: many(emailVerificationTokens),\n}));\n\nexport const sessionsRelations = relations(sessions, ({ one }) => ({\n  user: one(users, {\n    fields: [sessions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const emailVerificationTokensRelations = relations(emailVerificationTokens, ({ one }) => ({\n  user: one(users, {\n    fields: [emailVerificationTokens.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const notesRelations = relations(notes, ({ one, many }) => ({\n  user: one(users, {\n    fields: [notes.userId],\n    references: [users.id],\n  }),\n  searches: many(noteSearches),\n  attachments: many(attachments),\n}));\n\nexport const noteSearchesRelations = relations(noteSearches, ({ one }) => ({\n  note: one(notes, {\n    fields: [noteSearches.noteId],\n    references: [notes.id],\n  }),\n}));\n\nexport const attachmentsRelations = relations(attachments, ({ one }) => ({\n  note: one(notes, {\n    fields: [attachments.noteId],\n    references: [notes.id],\n  }),\n}));\n\n// User AI Settings table\nexport const userAISettings = pgTable('user_ai_settings', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  \n  // API Configuration\n  provider: varchar('provider', { length: 50 }).notNull().default('google'), // 'google', 'openai', 'anthropic'\n  apiKey: text('api_key'), // Encrypted API key\n  model: varchar('model', { length: 100 }).notNull().default('gemini-1.5-flash-latest'),\n  \n  // Usage Tracking\n  totalTokensUsed: integer('total_tokens_used').default(0).notNull(),\n  totalRequests: integer('total_requests').default(0).notNull(),\n  lastUsedAt: timestamp('last_used_at'),\n  \n  // Settings\n  enabledAnalyses: jsonb('enabled_analyses').$type<string[]>().default(['title', 'summary', 'key_points', 'categories', 'tags']),\n  analysisTimeout: integer('analysis_timeout').default(30000), // 30 seconds\n  cacheEnabled: boolean('cache_enabled').default(true),\n  cacheTTL: integer('cache_ttl').default(86400), // 24 hours in seconds\n  \n  // Metadata\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('user_ai_settings_user_id_idx').on(table.userId),\n  providerIdx: index('user_ai_settings_provider_idx').on(table.provider),\n  lastUsedIdx: index('user_ai_settings_last_used_idx').on(table.lastUsedAt),\n}));\n\n// Token Usage Log table for detailed tracking\nexport const tokenUsageLogs = pgTable('token_usage_logs', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  noteId: uuid('note_id'), // Optional reference to note\n  \n  // Request details\n  provider: varchar('provider', { length: 50 }).notNull(),\n  model: varchar('model', { length: 100 }).notNull(),\n  analysisType: varchar('analysis_type', { length: 50 }).notNull(),\n  \n  // Token usage\n  inputTokens: integer('input_tokens').default(0).notNull(),\n  outputTokens: integer('output_tokens').default(0).notNull(),\n  totalTokens: integer('total_tokens').default(0).notNull(),\n  \n  // Request metadata\n  requestDuration: integer('request_duration'), // milliseconds\n  success: boolean('success').default(true).notNull(),\n  errorMessage: text('error_message'),\n  \n  // Cost tracking (for future billing)\n  estimatedCost: integer('estimated_cost'), // in cents\n  \n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('token_usage_logs_user_id_idx').on(table.userId),\n  noteIdIdx: index('token_usage_logs_note_id_idx').on(table.noteId),\n  createdAtIdx: index('token_usage_logs_created_at_idx').on(table.createdAt),\n  providerIdx: index('token_usage_logs_provider_idx').on(table.provider),\n}));\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type Session = typeof sessions.$inferSelect;\nexport type NewSession = typeof sessions.$inferInsert;\nexport type EmailVerificationToken = typeof emailVerificationTokens.$inferSelect;\nexport type NewEmailVerificationToken = typeof emailVerificationTokens.$inferInsert;\nexport type Note = typeof notes.$inferSelect;\nexport type NewNote = typeof notes.$inferInsert;\nexport type NoteSearch = typeof noteSearches.$inferSelect;\nexport type NewNoteSearch = typeof noteSearches.$inferInsert;\nexport type Attachment = typeof attachments.$inferSelect;\nexport type NewAttachment = typeof attachments.$inferInsert;\nexport type UserAISettings = typeof userAISettings.$inferSelect;\nexport type NewUserAISettings = typeof userAISettings.$inferInsert;\nexport type TokenUsageLog = typeof tokenUsageLogs.$inferSelect;\nexport type NewTokenUsageLog = typeof tokenUsageLogs.$inferInsert;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 715, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/packages/db/src/index.ts"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { config } from 'dotenv';\nimport { resolve } from 'path';\nimport * as schema from './schema';\n\n// Load environment variables from the root .env.local file\nconfig({ path: resolve(__dirname, '../../../.env.local') });\n\nconst sql = neon(process.env.DATABASE_URL!);\nexport const db = drizzle(sql, { schema });\n\nexport * from './schema';\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,2DAA2D;AAC3D,IAAA,+GAAM,EAAC;IAAE,MAAM,IAAA,4GAAO,6DAAY;AAAuB;AAEzD,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;AAClC,MAAM,KAAK,IAAA,qKAAO,EAAC,KAAK;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 754, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/ai-providers.ts"],"sourcesContent":["// Client-safe AI providers configuration\n// This file contains no server-side dependencies and can be safely imported in client components\n\nexport const AI_PROVIDERS = {\n  google: {\n    name: 'Google Gemini',\n    models: [\n      { id: 'gemini-1.5-flash-latest', name: 'Gemini 1.5 Flash (Latest)', costPer1kTokens: 0.075 },\n      { id: 'gemini-1.5-pro-latest', name: 'Gemini 1.5 Pro (Latest)', costPer1kTokens: 1.25 },\n      { id: 'gemini-1.0-pro', name: 'Gemini 1.0 Pro', costPer1kTokens: 0.5 },\n    ],\n    apiKeyUrl: 'https://makersuite.google.com/app/apikey',\n    documentation: 'https://ai.google.dev/gemini-api/docs',\n  },\n  openai: {\n    name: 'OpenAI',\n    models: [\n      { id: 'gpt-4o', name: 'GPT-4o', costPer1kTokens: 5.0 },\n      { id: 'gpt-4o-mini', name: 'GPT-4o Mini', costPer1kTokens: 0.15 },\n      { id: 'gpt-4-turbo', name: 'GPT-4 Turbo', costPer1kTokens: 10.0 },\n      { id: 'gpt-3.5-turbo', name: 'GPT-3.5 Turbo', costPer1kTokens: 0.5 },\n    ],\n    apiKeyUrl: 'https://platform.openai.com/api-keys',\n    documentation: 'https://platform.openai.com/docs',\n  },\n  anthropic: {\n    name: 'Anthropic Claude',\n    models: [\n      { id: 'claude-3-5-sonnet-20241022', name: 'Claude 3.5 Sonnet', costPer1kTokens: 3.0 },\n      { id: 'claude-3-5-haiku-20241022', name: 'Claude 3.5 Haiku', costPer1kTokens: 0.8 },\n      { id: 'claude-3-opus-20240229', name: 'Claude 3 Opus', costPer1kTokens: 15.0 },\n    ],\n    apiKeyUrl: 'https://console.anthropic.com/',\n    documentation: 'https://docs.anthropic.com/',\n  },\n  'ai-gateway': {\n    name: 'Vercel AI Gateway',\n    models: [\n      { id: 'google/gemini-1.5-flash-latest', name: 'Google Gemini 1.5 Flash', costPer1kTokens: 0.075 },\n      { id: 'openai/gpt-4o', name: 'OpenAI GPT-4o', costPer1kTokens: 5.0 },\n      { id: 'openai/gpt-4o-mini', name: 'OpenAI GPT-4o Mini', costPer1kTokens: 0.15 },\n      { id: 'anthropic/claude-3-5-sonnet-20241022', name: 'Anthropic Claude 3.5 Sonnet', costPer1kTokens: 3.0 },\n      { id: 'anthropic/claude-sonnet-4', name: 'Anthropic Claude Sonnet 4', costPer1kTokens: 3.0 },\n      { id: 'xai/grok-beta', name: 'xAI Grok Beta', costPer1kTokens: 0.5 },\n      { id: 'xai/grok-4', name: 'xAI Grok 4', costPer1kTokens: 0.5 },\n      { id: 'cohere/command', name: 'Cohere Command', costPer1kTokens: 1.0 },\n    ],\n    apiKeyUrl: 'https://vercel.com/ai-gateway',\n    documentation: 'https://vercel.com/docs/ai-gateway',\n    isGateway: true,\n  },\n} as const;\n\nexport type AIProvider = keyof typeof AI_PROVIDERS;\nexport type AIModel = typeof AI_PROVIDERS[AIProvider]['models'][number];\n"],"names":[],"mappings":"AAAA,yCAAyC;AACzC,iGAAiG;;;;;AAE1F,MAAM,eAAe;IAC1B,QAAQ;QACN,MAAM;QACN,QAAQ;YACN;gBAAE,IAAI;gBAA2B,MAAM;gBAA6B,iBAAiB;YAAM;YAC3F;gBAAE,IAAI;gBAAyB,MAAM;gBAA2B,iBAAiB;YAAK;YACtF;gBAAE,IAAI;gBAAkB,MAAM;gBAAkB,iBAAiB;YAAI;SACtE;QACD,WAAW;QACX,eAAe;IACjB;IACA,QAAQ;QACN,MAAM;QACN,QAAQ;YACN;gBAAE,IAAI;gBAAU,MAAM;gBAAU,iBAAiB;YAAI;YACrD;gBAAE,IAAI;gBAAe,MAAM;gBAAe,iBAAiB;YAAK;YAChE;gBAAE,IAAI;gBAAe,MAAM;gBAAe,iBAAiB;YAAK;YAChE;gBAAE,IAAI;gBAAiB,MAAM;gBAAiB,iBAAiB;YAAI;SACpE;QACD,WAAW;QACX,eAAe;IACjB;IACA,WAAW;QACT,MAAM;QACN,QAAQ;YACN;gBAAE,IAAI;gBAA8B,MAAM;gBAAqB,iBAAiB;YAAI;YACpF;gBAAE,IAAI;gBAA6B,MAAM;gBAAoB,iBAAiB;YAAI;YAClF;gBAAE,IAAI;gBAA0B,MAAM;gBAAiB,iBAAiB;YAAK;SAC9E;QACD,WAAW;QACX,eAAe;IACjB;IACA,cAAc;QACZ,MAAM;QACN,QAAQ;YACN;gBAAE,IAAI;gBAAkC,MAAM;gBAA2B,iBAAiB;YAAM;YAChG;gBAAE,IAAI;gBAAiB,MAAM;gBAAiB,iBAAiB;YAAI;YACnE;gBAAE,IAAI;gBAAsB,MAAM;gBAAsB,iBAAiB;YAAK;YAC9E;gBAAE,IAAI;gBAAwC,MAAM;gBAA+B,iBAAiB;YAAI;YACxG;gBAAE,IAAI;gBAA6B,MAAM;gBAA6B,iBAAiB;YAAI;YAC3F;gBAAE,IAAI;gBAAiB,MAAM;gBAAiB,iBAAiB;YAAI;YACnE;gBAAE,IAAI;gBAAc,MAAM;gBAAc,iBAAiB;YAAI;YAC7D;gBAAE,IAAI;gBAAkB,MAAM;gBAAkB,iBAAiB;YAAI;SACtE;QACD,WAAW;QACX,eAAe;QACf,WAAW;IACb;AACF","debugId":null}},
    {"offset": {"line": 887, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/ai-config.ts"],"sourcesContent":["import { db } from '@polynote/db';\nimport { userAISettings, tokenUsageLogs, UserAISettings, NewTokenUsageLog } from '@polynote/db';\nimport { eq, and, gte } from 'drizzle-orm';\nimport crypto from 'crypto';\nimport { AI_PROVIDERS } from './ai-providers';\n\n// Type for decrypted user settings\nexport interface DecryptedUserAISettings extends Omit<UserAISettings, 'apiKey'> {\n  apiKey: string;\n}\n\n// Encryption key for API keys (in production, use a proper key management system)\nconst ENCRYPTION_KEY = process.env.API_KEY_ENCRYPTION_KEY || 'default-encryption-key-change-in-production';\nconst ALGORITHM = 'aes-256-gcm';\n\n// Derive key from password for AES-256-GCM\nfunction getKey(): Buffer {\n  return crypto.scryptSync(ENCRYPTION_KEY, 'salt', 32);\n}\n\n/**\n * Encrypt API key for storage\n */\nfunction encryptApiKey(apiKey: string): string {\n  const iv = crypto.randomBytes(16);\n  const key = getKey();\n  const cipher = crypto.createCipheriv(ALGORITHM, key, iv);\n\n  let encrypted = cipher.update(apiKey, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n\n  const authTag = cipher.getAuthTag();\n  return iv.toString('hex') + ':' + encrypted + ':' + authTag.toString('hex');\n}\n\n/**\n * Decrypt API key for use (supports both old and new formats)\n */\nfunction decryptApiKey(encryptedApiKey: string): string {\n  const parts = encryptedApiKey.split(':');\n\n  // Handle new format (3 parts: iv:encrypted:authTag)\n  if (parts.length === 3) {\n    const iv = Buffer.from(parts[0], 'hex');\n    const encrypted = parts[1];\n    const authTag = Buffer.from(parts[2], 'hex');\n    const key = getKey();\n\n    const decipher = crypto.createDecipheriv(ALGORITHM, key, iv);\n    decipher.setAuthTag(authTag);\n\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    return decrypted;\n  }\n\n  // Handle old format (2 parts: iv:encrypted) for backward compatibility\n  if (parts.length === 2) {\n    const iv = Buffer.from(parts[0], 'hex');\n    const encrypted = parts[1];\n    const decipher = crypto.createDecipher(ALGORITHM, Buffer.from(ENCRYPTION_KEY));\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    return decrypted;\n  }\n\n  throw new Error('Invalid encrypted API key format');\n}\n\n/**\n * Get user's AI settings\n */\nexport async function getUserAISettings(userId: string): Promise<DecryptedUserAISettings | null> {\n  try {\n    const [settings] = await db\n      .select()\n      .from(userAISettings)\n      .where(eq(userAISettings.userId, userId))\n      .limit(1);\n\n    if (settings && settings.apiKey) {\n      // Decrypt the API key\n      settings.apiKey = decryptApiKey(settings.apiKey);\n    }\n\n    return settings || null;\n  } catch (error) {\n    console.error('Error getting user AI settings:', error);\n    return null;\n  }\n}\n\n/**\n * Create or update user's AI settings\n */\nexport async function upsertUserAISettings(\n  userId: string,\n  settings: {\n    provider?: string;\n    apiKey?: string;\n    model?: string;\n    enabledAnalyses?: string[];\n    analysisTimeout?: number;\n    cacheEnabled?: boolean;\n    cacheTTL?: number;\n  }\n): Promise<DecryptedUserAISettings | null> {\n  try {\n    const existingSettings = await getUserAISettings(userId);\n    \n    const settingsData = {\n      userId,\n      provider: settings.provider || 'google',\n      apiKey: settings.apiKey ? encryptApiKey(settings.apiKey) : existingSettings?.apiKey,\n      model: settings.model || 'gemini-1.5-flash-latest',\n      enabledAnalyses: settings.enabledAnalyses || ['title', 'summary', 'key_points', 'categories', 'tags'],\n      analysisTimeout: settings.analysisTimeout || 30000,\n      cacheEnabled: settings.cacheEnabled !== undefined ? settings.cacheEnabled : true,\n      cacheTTL: settings.cacheTTL || 86400,\n      updatedAt: new Date(),\n    };\n\n    if (existingSettings) {\n      const [updated] = await db\n        .update(userAISettings)\n        .set(settingsData)\n        .where(eq(userAISettings.userId, userId))\n        .returning();\n      \n      if (updated && updated.apiKey) {\n        updated.apiKey = decryptApiKey(updated.apiKey);\n      }\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(userAISettings)\n        .values(settingsData)\n        .returning();\n      \n      if (created && created.apiKey) {\n        created.apiKey = decryptApiKey(created.apiKey);\n      }\n      return created;\n    }\n  } catch (error) {\n    console.error('Error upserting user AI settings:', error);\n    return null;\n  }\n}\n\n/**\n * Log token usage\n */\nexport async function logTokenUsage(\n  userId: string,\n  usage: {\n    noteId?: string;\n    provider: string;\n    model: string;\n    analysisType: string;\n    inputTokens: number;\n    outputTokens: number;\n    totalTokens: number;\n    requestDuration?: number;\n    success: boolean;\n    errorMessage?: string;\n    estimatedCost?: number;\n  }\n): Promise<void> {\n  try {\n    const logData: NewTokenUsageLog = {\n      userId,\n      noteId: usage.noteId,\n      provider: usage.provider,\n      model: usage.model,\n      analysisType: usage.analysisType,\n      inputTokens: usage.inputTokens,\n      outputTokens: usage.outputTokens,\n      totalTokens: usage.totalTokens,\n      requestDuration: usage.requestDuration,\n      success: usage.success,\n      errorMessage: usage.errorMessage,\n      estimatedCost: usage.estimatedCost,\n    };\n\n    await db.insert(tokenUsageLogs).values(logData);\n\n    // Update user's total usage\n    if (usage.success) {\n      await db\n        .update(userAISettings)\n        .set({\n          totalTokensUsed: db.sql`${userAISettings.totalTokensUsed} + ${usage.totalTokens}`,\n          totalRequests: db.sql`${userAISettings.totalRequests} + 1`,\n          lastUsedAt: new Date(),\n        })\n        .where(eq(userAISettings.userId, userId));\n    }\n  } catch (error) {\n    console.error('Error logging token usage:', error);\n  }\n}\n\n/**\n * Get user's token usage statistics\n */\nexport async function getUserTokenUsage(userId: string, days: number = 30) {\n  try {\n    const since = new Date();\n    since.setDate(since.getDate() - days);\n\n    const usage = await db\n      .select()\n      .from(tokenUsageLogs)\n      .where(\n        and(\n          eq(tokenUsageLogs.userId, userId),\n          gte(tokenUsageLogs.createdAt, since)\n        )\n      );\n\n    const stats = {\n      totalRequests: usage.length,\n      totalTokens: usage.reduce((sum, log) => sum + log.totalTokens, 0),\n      totalInputTokens: usage.reduce((sum, log) => sum + log.inputTokens, 0),\n      totalOutputTokens: usage.reduce((sum, log) => sum + log.outputTokens, 0),\n      successfulRequests: usage.filter(log => log.success).length,\n      failedRequests: usage.filter(log => !log.success).length,\n      averageRequestDuration: usage.length > 0 ? usage.reduce((sum, log) => sum + (log.requestDuration || 0), 0) / usage.length : 0,\n      estimatedTotalCost: usage.reduce((sum, log) => sum + (log.estimatedCost || 0), 0) / 100, // Convert from cents to dollars\n      byProvider: {} as Record<string, any>,\n      byModel: {} as Record<string, any>,\n      byAnalysisType: {} as Record<string, any>,\n    };\n\n    // Group by provider\n    usage.forEach(log => {\n      if (!stats.byProvider[log.provider]) {\n        stats.byProvider[log.provider] = { requests: 0, tokens: 0, cost: 0 };\n      }\n      stats.byProvider[log.provider].requests++;\n      stats.byProvider[log.provider].tokens += log.totalTokens;\n      stats.byProvider[log.provider].cost += (log.estimatedCost || 0) / 100; // Convert from cents to dollars\n    });\n\n    // Group by model\n    usage.forEach(log => {\n      if (!stats.byModel[log.model]) {\n        stats.byModel[log.model] = { requests: 0, tokens: 0, cost: 0 };\n      }\n      stats.byModel[log.model].requests++;\n      stats.byModel[log.model].tokens += log.totalTokens;\n      stats.byModel[log.model].cost += (log.estimatedCost || 0) / 100; // Convert from cents to dollars\n    });\n\n    // Group by analysis type\n    usage.forEach(log => {\n      if (!stats.byAnalysisType[log.analysisType]) {\n        stats.byAnalysisType[log.analysisType] = { requests: 0, tokens: 0, cost: 0 };\n      }\n      stats.byAnalysisType[log.analysisType].requests++;\n      stats.byAnalysisType[log.analysisType].tokens += log.totalTokens;\n      stats.byAnalysisType[log.analysisType].cost += (log.estimatedCost || 0) / 100; // Convert from cents to dollars\n    });\n\n    return stats;\n  } catch (error) {\n    console.error('Error getting user token usage:', error);\n    return null;\n  }\n}\n\n\n/**\n * Estimate cost for token usage\n */\nexport function estimateCost(provider: string, model: string, tokens: number): number {\n  const providerInfo = AI_PROVIDERS[provider as keyof typeof AI_PROVIDERS];\n  if (!providerInfo) return 0;\n\n  const modelInfo = providerInfo.models.find(m => m.id === model);\n  if (!modelInfo) return 0;\n\n  // Return cost in cents for storage\n  return Math.round((tokens / 1000) * modelInfo.costPer1kTokens * 100);\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1116, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/analysis/services/BaseAnalysisService.ts"],"sourcesContent":["import { google } from '@ai-sdk/google';\nimport { AnalysisResult, AnalysisType } from '../types';\nimport { getUserAISettings, logTokenUsage, DecryptedUserAISettings } from '@/lib/ai-config';\n\nexport abstract class BaseAnalysisService {\n  protected model: any;\n  protected userSettings: DecryptedUserAISettings | null = null;\n\n  abstract readonly type: AnalysisType;\n\n  async initialize(userId: string) {\n    console.log(`[${this.type.toUpperCase()}] Initializing service for user:`, userId);\n    \n    // Only try to get user settings if userId is not 'default'\n    if (userId !== 'default') {\n      this.userSettings = await getUserAISettings(userId);\n      console.log(`[${this.type.toUpperCase()}] User settings:`, {\n        hasSettings: !!this.userSettings,\n        provider: this.userSettings?.provider,\n        model: this.userSettings?.model,\n        hasApiKey: !!this.userSettings?.apiKey\n      });\n    }\n    \n    if (this.userSettings?.provider === 'google' && this.userSettings?.apiKey) {\n      console.log(`[${this.type.toUpperCase()}] Using user's Google API key with model:`, this.userSettings.model);\n      this.model = google(this.userSettings.model, {\n        apiKey: this.userSettings.apiKey,\n      });\n    } else {\n      // Fallback to environment variable\n      console.log(`[${this.type.toUpperCase()}] Using environment variable for Google API key`);\n      console.log(`[${this.type.toUpperCase()}] Environment API key present:`, !!process.env.GOOGLE_GENERATIVE_AI_API_KEY);\n      this.model = google('models/gemini-1.5-flash-latest', {\n        apiKey: process.env.GOOGLE_GENERATIVE_AI_API_KEY,\n      });\n    }\n  }\n  abstract readonly priority: number;\n  abstract readonly timeout: number;\n\n  /**\n   * Perform the analysis\n   */\n  abstract analyze(content: string, context?: Record<string, unknown>, userId?: string): Promise<AnalysisResult>;\n\n  /**\n   * Validate the content before analysis\n   */\n  protected validateContent(content: string): boolean {\n    if (!content || content.trim().length < 10) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Create a base analysis result\n   */\n  protected createBaseResult(\n    noteId: string,\n    status: AnalysisResult['status'],\n    result?: Record<string, unknown>,\n    error?: string,\n    processingTime?: number\n  ): AnalysisResult {\n    return {\n      id: `${noteId}_${this.type}_${Date.now()}`,\n      noteId,\n      type: this.type,\n      status,\n      result,\n      error,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      processingTime,\n    };\n  }\n\n  /**\n   * Execute analysis with timeout and error handling\n   */\n  protected async executeWithTimeout<T>(\n    operation: () => Promise<T>,\n    timeoutMs: number = this.timeout\n  ): Promise<T> {\n    return Promise.race([\n      operation(),\n      new Promise<never>((_, reject) =>\n        setTimeout(() => reject(new Error(`Analysis timeout after ${timeoutMs}ms`)), timeoutMs)\n      ),\n    ]);\n  }\n\n  /**\n   * Execute analysis with retry logic and quota detection\n   */\n  protected async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = 1\n  ): Promise<T> {\n    let lastError: Error | null = null;\n    \n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error('Unknown error');\n        \n        // Check if it's a quota exceeded error - don't retry\n        const isQuotaExceeded = lastError.message.includes('quota') || \n          lastError.message.includes('RESOURCE_EXHAUSTED') ||\n          lastError.message.includes('429') ||\n          lastError.message.includes('exceeded');\n        \n        if (isQuotaExceeded) {\n          console.log(`[${this.type.toUpperCase()}] Quota exceeded detected, not retrying`);\n          throw lastError;\n        }\n        \n        // If this is the last attempt, throw the error\n        if (attempt === maxRetries) {\n          throw lastError;\n        }\n        \n        console.log(`[${this.type.toUpperCase()}] Attempt ${attempt + 1} failed, retrying...`);\n        // Small delay before retry\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n    \n    throw lastError || new Error('Max retries exceeded');\n  }\n\n  /**\n   * Log analysis metrics\n   */\n  protected async logMetrics(\n    noteId: string,\n    processingTime: number,\n    success: boolean,\n    error?: string,\n    userId?: string,\n    inputTokens?: number,\n    outputTokens?: number\n  ): Promise<void> {\n    console.log(`[${this.type.toUpperCase()}] Analysis completed:`, {\n      noteId,\n      processingTime: `${processingTime}ms`,\n      success,\n      error,\n      timestamp: new Date().toISOString(),\n    });\n\n    // Log token usage if we have user settings and userId\n    if (this.userSettings && userId && inputTokens !== undefined && outputTokens !== undefined) {\n      await logTokenUsage(userId, {\n        noteId,\n        provider: this.userSettings.provider,\n        model: this.userSettings.model,\n        analysisType: this.type,\n        inputTokens,\n        outputTokens,\n        totalTokens: inputTokens + outputTokens,\n        requestDuration: processingTime,\n        success,\n        errorMessage: error,\n      });\n    }\n  }\n\n  /**\n   * Estimate input tokens (rough approximation)\n   */\n  protected estimateInputTokens(text: string): number {\n    return Math.ceil(text.length / 4); // Rough estimate: 4 characters per token\n  }\n\n  /**\n   * Estimate output tokens (rough approximation)\n   */\n  protected estimateOutputTokens(result: Record<string, unknown>): number {\n    const resultText = JSON.stringify(result);\n    return Math.ceil(resultText.length / 4);\n  }\n\n  /**\n   * Get analysis priority (lower number = higher priority)\n   */\n  getPriority(): number {\n    return this.priority;\n  }\n\n  /**\n   * Check if this analysis type is enabled\n   */\n  isEnabled(enabledTypes: AnalysisType[]): boolean {\n    return enabledTypes.includes(this.type);\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1270, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/analysis/services/SummaryAnalysisService.ts"],"sourcesContent":["import { BaseAnalysisService } from './BaseAnalysisService';\nimport { AnalysisResult, AnalysisType, SummaryAnalysisSchema } from '../types';\nimport { generateObject } from 'ai';\n\nexport class SummaryAnalysisService extends BaseAnalysisService {\n  readonly type = AnalysisType.SUMMARY;\n  readonly priority = 1; // High priority\n  readonly timeout = 5000; // 5 seconds - fail faster\n\n  async analyze(content: string, context?: any): Promise<AnalysisResult> {\n    const startTime = Date.now();\n    \n    if (!this.validateContent(content)) {\n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'failed',\n        null,\n        'Content too short for analysis'\n      );\n      this.logMetrics(context?.noteId || 'unknown', Date.now() - startTime, false, 'Content too short');\n      return result;\n    }\n\n    try {\n      const result = await this.executeWithRetry(async () => {\n        return await this.executeWithTimeout(async () => {\n          const prompt = this.buildPrompt(content);\n          \n          const analysis = await generateObject({\n            model: this.model,\n            schema: SummaryAnalysisSchema,\n            prompt,\n          });\n\n          return analysis.object;\n        });\n      }, 1); // Only 1 retry attempt\n\n      const processingTime = Date.now() - startTime;\n      const analysisResult = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'completed',\n        result,\n        undefined,\n        processingTime\n      );\n\n      this.logMetrics(context?.noteId || 'unknown', processingTime, true);\n      return analysisResult;\n\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      \n      // Check if it's a quota exceeded error\n      const isQuotaExceeded = error instanceof Error && \n        (error.message.includes('quota') || \n         error.message.includes('RESOURCE_EXHAUSTED') ||\n         error.message.includes('429') ||\n         error.message.includes('exceeded'));\n      \n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'failed',\n        null,\n        isQuotaExceeded ? 'API quota exceeded' : errorMessage,\n        processingTime\n      );\n\n      this.logMetrics(context?.noteId || 'unknown', processingTime, false, errorMessage);\n      return result;\n    }\n  }\n\n  private buildPrompt(content: string): string {\n    return `You are an expert content analyst specializing in creating high-quality summaries.\n\nContent to analyze:\n\"${content}\"\n\nPlease create a comprehensive summary that:\n1. Captures the main ideas and key concepts\n2. Maintains the original meaning and context\n3. Is concise but complete (10-1000 words)\n4. Identifies the primary themes\n5. Uses clear, professional language\n\nFocus on extracting the essence of the content while preserving important details. The summary should be useful for someone who wants to quickly understand the main points without reading the full content.\n\nConsider the content's:\n- Main topic and purpose\n- Key arguments or points\n- Important details or examples\n- Overall tone and perspective\n- Target audience implications\n\nProvide a confidence score (0-1) indicating how well you understood the content, and identify the primary language used.`;\n  }\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;;AAEO,MAAM,+BAA+B,iMAAmB;IACpD,OAAO,gKAAY,CAAC,OAAO,CAAC;IAC5B,WAAW,EAAE;IACb,UAAU,KAAK;IAExB,MAAM,QAAQ,OAAe,EAAE,OAAa,EAA2B;QACrE,MAAM,YAAY,KAAK,GAAG;QAE1B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU;YAClC,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,UACA,MACA;YAEF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,KAAK,GAAG,KAAK,WAAW,OAAO;YAC7E,OAAO;QACT;QAEA,IAAI;YACF,MAAM,SAAS,MAAM,IAAI,CAAC,gBAAgB,CAAC;gBACzC,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC;oBACnC,MAAM,SAAS,IAAI,CAAC,WAAW,CAAC;oBAEhC,MAAM,WAAW,MAAM,IAAA,sHAAc,EAAC;wBACpC,OAAO,IAAI,CAAC,KAAK;wBACjB,QAAQ,yKAAqB;wBAC7B;oBACF;oBAEA,OAAO,SAAS,MAAM;gBACxB;YACF,GAAG,IAAI,uBAAuB;YAE9B,MAAM,iBAAiB,KAAK,GAAG,KAAK;YACpC,MAAM,iBAAiB,IAAI,CAAC,gBAAgB,CAC1C,SAAS,UAAU,WACnB,aACA,QACA,WACA;YAGF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,gBAAgB;YAC9D,OAAO;QAET,EAAE,OAAO,OAAO;YACd,MAAM,iBAAiB,KAAK,GAAG,KAAK;YACpC,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAE9D,uCAAuC;YACvC,MAAM,kBAAkB,iBAAiB,SACvC,CAAC,MAAM,OAAO,CAAC,QAAQ,CAAC,YACvB,MAAM,OAAO,CAAC,QAAQ,CAAC,yBACvB,MAAM,OAAO,CAAC,QAAQ,CAAC,UACvB,MAAM,OAAO,CAAC,QAAQ,CAAC,WAAW;YAErC,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,UACA,MACA,kBAAkB,uBAAuB,cACzC;YAGF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,gBAAgB,OAAO;YACrE,OAAO;QACT;IACF;IAEQ,YAAY,OAAe,EAAU;QAC3C,OAAO,CAAC;;;CAGX,EAAE,QAAQ;;;;;;;;;;;;;;;;;;wHAkB6G,CAAC;IACvH;AACF","debugId":null}},
    {"offset": {"line": 1354, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/analysis/services/KeyPointsAnalysisService.ts"],"sourcesContent":["import { BaseAnalysisService } from './BaseAnalysisService';\nimport { AnalysisResult, AnalysisType, KeyPointsAnalysisSchema } from '../types';\nimport { generateObject } from 'ai';\n\nexport class KeyPointsAnalysisService extends BaseAnalysisService {\n  readonly type = AnalysisType.KEY_POINTS;\n  readonly priority = 2; // High priority\n  readonly timeout = 12000; // 12 seconds\n\n  async analyze(content: string, context?: any): Promise<AnalysisResult> {\n    const startTime = Date.now();\n    \n    if (!this.validateContent(content)) {\n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'failed',\n        null,\n        'Content too short for key points extraction'\n      );\n      this.logMetrics(context?.noteId || 'unknown', Date.now() - startTime, false, 'Content too short');\n      return result;\n    }\n\n    try {\n      const result = await this.executeWithTimeout(async () => {\n        const prompt = this.buildPrompt(content);\n        \n        const analysis = await generateObject({\n          model: this.model,\n          schema: KeyPointsAnalysisSchema,\n          prompt,\n        });\n\n        return analysis.object;\n      });\n\n      const processingTime = Date.now() - startTime;\n      const analysisResult = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'completed',\n        result,\n        undefined,\n        processingTime\n      );\n\n      this.logMetrics(context?.noteId || 'unknown', processingTime, true);\n      return analysisResult;\n\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      \n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'failed',\n        null,\n        errorMessage,\n        processingTime\n      );\n\n      this.logMetrics(context?.noteId || 'unknown', processingTime, false, errorMessage);\n      return result;\n    }\n  }\n\n  private buildPrompt(content: string): string {\n    return `You are an expert content analyst specializing in extracting key points and insights.\n\nContent to analyze:\n\"${content}\"\n\nPlease extract the most important key points from this content. For each key point:\n\n1. **Point**: A clear, concise statement of the main idea (10-200 characters)\n2. **Importance**: A score from 0-1 indicating how critical this point is to understanding the content\n3. **Category**: Optional categorization (e.g., \"main argument\", \"supporting evidence\", \"conclusion\", \"action item\")\n4. **Evidence**: Optional supporting evidence or context from the content\n\nGuidelines:\n- Extract 1-10 key points (prioritize quality over quantity)\n- Focus on the most significant ideas, arguments, or insights\n- Avoid redundancy - each point should be distinct\n- Consider both explicit and implicit key ideas\n- Rank points by importance to the overall content\n- Include actionable items if present\n- Capture both facts and opinions/interpretations\n\nThe key points should help someone quickly understand the most important aspects of the content without reading it in full.`;\n  }\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;;AAEO,MAAM,iCAAiC,iMAAmB;IACtD,OAAO,gKAAY,CAAC,UAAU,CAAC;IAC/B,WAAW,EAAE;IACb,UAAU,MAAM;IAEzB,MAAM,QAAQ,OAAe,EAAE,OAAa,EAA2B;QACrE,MAAM,YAAY,KAAK,GAAG;QAE1B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU;YAClC,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,UACA,MACA;YAEF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,KAAK,GAAG,KAAK,WAAW,OAAO;YAC7E,OAAO;QACT;QAEA,IAAI;YACF,MAAM,SAAS,MAAM,IAAI,CAAC,kBAAkB,CAAC;gBAC3C,MAAM,SAAS,IAAI,CAAC,WAAW,CAAC;gBAEhC,MAAM,WAAW,MAAM,IAAA,sHAAc,EAAC;oBACpC,OAAO,IAAI,CAAC,KAAK;oBACjB,QAAQ,2KAAuB;oBAC/B;gBACF;gBAEA,OAAO,SAAS,MAAM;YACxB;YAEA,MAAM,iBAAiB,KAAK,GAAG,KAAK;YACpC,MAAM,iBAAiB,IAAI,CAAC,gBAAgB,CAC1C,SAAS,UAAU,WACnB,aACA,QACA,WACA;YAGF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,gBAAgB;YAC9D,OAAO;QAET,EAAE,OAAO,OAAO;YACd,MAAM,iBAAiB,KAAK,GAAG,KAAK;YACpC,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAE9D,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,UACA,MACA,cACA;YAGF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,gBAAgB,OAAO;YACrE,OAAO;QACT;IACF;IAEQ,YAAY,OAAe,EAAU;QAC3C,OAAO,CAAC;;;CAGX,EAAE,QAAQ;;;;;;;;;;;;;;;;;;2HAkBgH,CAAC;IAC1H;AACF","debugId":null}},
    {"offset": {"line": 1434, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/analysis/services/CategoriesAnalysisService.ts"],"sourcesContent":["import { BaseAnalysisService } from './BaseAnalysisService';\nimport { AnalysisResult, AnalysisType, CategoriesAnalysisSchema } from '../types';\nimport { generateObject } from 'ai';\n\nexport class CategoriesAnalysisService extends BaseAnalysisService {\n  readonly type = AnalysisType.CATEGORIES;\n  readonly priority = 3; // Medium priority\n  readonly timeout = 8000; // 8 seconds\n\n  async analyze(content: string, context?: any): Promise<AnalysisResult> {\n    const startTime = Date.now();\n    \n    if (!this.validateContent(content)) {\n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'failed',\n        null,\n        'Content too short for categorization'\n      );\n      this.logMetrics(context?.noteId || 'unknown', Date.now() - startTime, false, 'Content too short');\n      return result;\n    }\n\n    try {\n      const result = await this.executeWithTimeout(async () => {\n        const prompt = this.buildPrompt(content);\n        \n        const analysis = await generateObject({\n          model: this.model,\n          schema: CategoriesAnalysisSchema,\n          prompt,\n        });\n\n        return analysis.object;\n      });\n\n      const processingTime = Date.now() - startTime;\n      const analysisResult = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'completed',\n        result,\n        undefined,\n        processingTime\n      );\n\n      this.logMetrics(context?.noteId || 'unknown', processingTime, true);\n      return analysisResult;\n\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      \n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'failed',\n        null,\n        errorMessage,\n        processingTime\n      );\n\n      this.logMetrics(context?.noteId || 'unknown', processingTime, false, errorMessage);\n      return result;\n    }\n  }\n\n  private buildPrompt(content: string): string {\n    return `You are an expert content classifier specializing in intelligent categorization.\n\nContent to analyze:\n\"${content}\"\n\nPlease categorize this content using a hierarchical classification system. For each category:\n\n1. **Name**: A clear, descriptive category name (2-50 characters)\n2. **Confidence**: A score from 0-1 indicating how confident you are in this categorization\n3. **Reasoning**: Brief explanation of why this category applies\n4. **Subcategories**: Optional more specific subcategories\n\nConsider these category types:\n- **Subject Matter**: What is the content about? (e.g., Technology, Business, Health, Education)\n- **Content Type**: What form is it? (e.g., Tutorial, Analysis, Opinion, News, Research)\n- **Purpose**: What is the intent? (e.g., Informational, Persuasive, Instructional, Creative)\n- **Domain**: What field or industry? (e.g., Software Development, Marketing, Medicine, Law)\n- **Audience**: Who is it for? (e.g., Beginners, Professionals, General Public, Students)\n- **Tone**: What is the style? (e.g., Formal, Casual, Technical, Academic)\n\nGuidelines:\n- Provide 1-5 categories (prioritize the most relevant)\n- Use standard, recognizable category names\n- Consider both primary and secondary categorizations\n- Include confidence scores for each category\n- Provide clear reasoning for your choices\n- Consider the content's context and implications\n- Use consistent naming conventions\n\nThe primary category should be the most important classification for organizing and finding this content.`;\n  }\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;;AAEO,MAAM,kCAAkC,iMAAmB;IACvD,OAAO,gKAAY,CAAC,UAAU,CAAC;IAC/B,WAAW,EAAE;IACb,UAAU,KAAK;IAExB,MAAM,QAAQ,OAAe,EAAE,OAAa,EAA2B;QACrE,MAAM,YAAY,KAAK,GAAG;QAE1B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU;YAClC,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,UACA,MACA;YAEF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,KAAK,GAAG,KAAK,WAAW,OAAO;YAC7E,OAAO;QACT;QAEA,IAAI;YACF,MAAM,SAAS,MAAM,IAAI,CAAC,kBAAkB,CAAC;gBAC3C,MAAM,SAAS,IAAI,CAAC,WAAW,CAAC;gBAEhC,MAAM,WAAW,MAAM,IAAA,sHAAc,EAAC;oBACpC,OAAO,IAAI,CAAC,KAAK;oBACjB,QAAQ,4KAAwB;oBAChC;gBACF;gBAEA,OAAO,SAAS,MAAM;YACxB;YAEA,MAAM,iBAAiB,KAAK,GAAG,KAAK;YACpC,MAAM,iBAAiB,IAAI,CAAC,gBAAgB,CAC1C,SAAS,UAAU,WACnB,aACA,QACA,WACA;YAGF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,gBAAgB;YAC9D,OAAO;QAET,EAAE,OAAO,OAAO;YACd,MAAM,iBAAiB,KAAK,GAAG,KAAK;YACpC,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAE9D,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,UACA,MACA,cACA;YAGF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,gBAAgB,OAAO;YACrE,OAAO;QACT;IACF;IAEQ,YAAY,OAAe,EAAU;QAC3C,OAAO,CAAC;;;CAGX,EAAE,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;yGA0B8F,CAAC;IACxG;AACF","debugId":null}},
    {"offset": {"line": 1522, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/analysis/services/TagsAnalysisService.ts"],"sourcesContent":["import { BaseAnalysisService } from './BaseAnalysisService';\nimport { AnalysisResult, AnalysisType, TagsAnalysisSchema } from '../types';\nimport { generateObject } from 'ai';\n\nexport class TagsAnalysisService extends BaseAnalysisService {\n  readonly type = AnalysisType.TAGS;\n  readonly priority = 4; // Medium priority\n  readonly timeout = 6000; // 6 seconds\n\n  async analyze(content: string, context?: any): Promise<AnalysisResult> {\n    const startTime = Date.now();\n    \n    if (!this.validateContent(content)) {\n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'failed',\n        null,\n        'Content too short for tag extraction'\n      );\n      this.logMetrics(context?.noteId || 'unknown', Date.now() - startTime, false, 'Content too short');\n      return result;\n    }\n\n    try {\n      const result = await this.executeWithTimeout(async () => {\n        const prompt = this.buildPrompt(content);\n        \n        const analysis = await generateObject({\n          model: this.model,\n          schema: TagsAnalysisSchema,\n          prompt,\n        });\n\n        return analysis.object;\n      });\n\n      const processingTime = Date.now() - startTime;\n      const analysisResult = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'completed',\n        result,\n        undefined,\n        processingTime\n      );\n\n      this.logMetrics(context?.noteId || 'unknown', processingTime, true);\n      return analysisResult;\n\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      \n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'failed',\n        null,\n        errorMessage,\n        processingTime\n      );\n\n      this.logMetrics(context?.noteId || 'unknown', processingTime, false, errorMessage);\n      return result;\n    }\n  }\n\n  private buildPrompt(content: string): string {\n    return `You are an expert content tagger specializing in creating comprehensive, searchable tags.\n\nContent to analyze:\n\"${content}\"\n\nPlease extract relevant tags that would help users find and organize this content. For each tag:\n\n1. **Tag**: A concise, searchable term (2-30 characters)\n2. **Relevance**: A score from 0-1 indicating how relevant this tag is to the content\n3. **Type**: The type of tag (topic, entity, concept, action, emotion)\n4. **Frequency**: Optional count of how often this concept appears in the content\n\nTag Types:\n- **Topic**: Main subjects or themes (e.g., \"machine-learning\", \"project-management\")\n- **Entity**: Specific people, places, organizations, products (e.g., \"google\", \"javascript\", \"tesla\")\n- **Concept**: Abstract ideas or principles (e.g., \"agile\", \"sustainability\", \"innovation\")\n- **Action**: Verbs or activities (e.g., \"planning\", \"analysis\", \"implementation\")\n- **Emotion**: Emotional tone or sentiment (e.g., \"optimistic\", \"concerned\", \"excited\")\n\nGuidelines:\n- Extract 1-15 tags (prioritize the most relevant and useful)\n- Use lowercase, hyphenated format for multi-word tags\n- Avoid overly generic tags (like \"information\" or \"content\")\n- Include both broad and specific tags\n- Consider synonyms and related terms\n- Focus on tags that would be useful for search and discovery\n- Include technical terms, proper nouns, and key concepts\n- Consider the content's context and domain\n\nThe tags should make this content easily discoverable and help users understand what it's about at a glance.`;\n  }\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;;AAEO,MAAM,4BAA4B,iMAAmB;IACjD,OAAO,gKAAY,CAAC,IAAI,CAAC;IACzB,WAAW,EAAE;IACb,UAAU,KAAK;IAExB,MAAM,QAAQ,OAAe,EAAE,OAAa,EAA2B;QACrE,MAAM,YAAY,KAAK,GAAG;QAE1B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU;YAClC,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,UACA,MACA;YAEF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,KAAK,GAAG,KAAK,WAAW,OAAO;YAC7E,OAAO;QACT;QAEA,IAAI;YACF,MAAM,SAAS,MAAM,IAAI,CAAC,kBAAkB,CAAC;gBAC3C,MAAM,SAAS,IAAI,CAAC,WAAW,CAAC;gBAEhC,MAAM,WAAW,MAAM,IAAA,sHAAc,EAAC;oBACpC,OAAO,IAAI,CAAC,KAAK;oBACjB,QAAQ,sKAAkB;oBAC1B;gBACF;gBAEA,OAAO,SAAS,MAAM;YACxB;YAEA,MAAM,iBAAiB,KAAK,GAAG,KAAK;YACpC,MAAM,iBAAiB,IAAI,CAAC,gBAAgB,CAC1C,SAAS,UAAU,WACnB,aACA,QACA,WACA;YAGF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,gBAAgB;YAC9D,OAAO;QAET,EAAE,OAAO,OAAO;YACd,MAAM,iBAAiB,KAAK,GAAG,KAAK;YACpC,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAE9D,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,UACA,MACA,cACA;YAGF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,gBAAgB,OAAO;YACrE,OAAO;QACT;IACF;IAEQ,YAAY,OAAe,EAAU;QAC3C,OAAO,CAAC;;;CAGX,EAAE,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;4GA0BiG,CAAC;IAC3G;AACF","debugId":null}},
    {"offset": {"line": 1610, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/analysis/services/SentimentAnalysisService.ts"],"sourcesContent":["import { BaseAnalysisService } from './BaseAnalysisService';\nimport { AnalysisResult, AnalysisType, SentimentAnalysisSchema } from '../types';\nimport { generateObject } from 'ai';\n\nexport class SentimentAnalysisService extends BaseAnalysisService {\n  readonly type = AnalysisType.SENTIMENT;\n  readonly priority = 5; // Lower priority\n  readonly timeout = 5000; // 5 seconds\n\n  async analyze(content: string, context?: any): Promise<AnalysisResult> {\n    const startTime = Date.now();\n    \n    if (!this.validateContent(content)) {\n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'failed',\n        null,\n        'Content too short for sentiment analysis'\n      );\n      this.logMetrics(context?.noteId || 'unknown', Date.now() - startTime, false, 'Content too short');\n      return result;\n    }\n\n    try {\n      const result = await this.executeWithTimeout(async () => {\n        const prompt = this.buildPrompt(content);\n        \n        const analysis = await generateObject({\n          model: this.model,\n          schema: SentimentAnalysisSchema,\n          prompt,\n        });\n\n        return analysis.object;\n      });\n\n      const processingTime = Date.now() - startTime;\n      const analysisResult = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'completed',\n        result,\n        undefined,\n        processingTime\n      );\n\n      this.logMetrics(context?.noteId || 'unknown', processingTime, true);\n      return analysisResult;\n\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      \n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'failed',\n        null,\n        errorMessage,\n        processingTime\n      );\n\n      this.logMetrics(context?.noteId || 'unknown', processingTime, false, errorMessage);\n      return result;\n    }\n  }\n\n  private buildPrompt(content: string): string {\n    return `You are an expert sentiment analyst specializing in understanding emotional tone and attitude.\n\nContent to analyze:\n\"${content}\"\n\nPlease analyze the sentiment and emotional tone of this content. Provide:\n\n1. **Overall Sentiment**: The primary emotional tone (positive, negative, neutral, mixed)\n2. **Confidence**: How confident you are in this assessment (0-1)\n3. **Emotions**: Specific emotions detected with their intensity (0-1)\n4. **Polarity**: Overall emotional polarity (-1 to 1, where -1 is very negative, 0 is neutral, 1 is very positive)\n\nConsider these aspects:\n- **Tone**: Is the content optimistic, pessimistic, neutral, or mixed?\n- **Emotional Language**: What emotions are expressed or implied?\n- **Attitude**: How does the author feel about the subject matter?\n- **Context**: Consider the purpose and context of the content\n- **Nuance**: Look for subtle emotional cues and mixed sentiments\n\nEmotions to consider:\n- Joy, excitement, satisfaction, optimism\n- Sadness, disappointment, frustration, concern\n- Anger, irritation, criticism, hostility\n- Fear, anxiety, worry, uncertainty\n- Surprise, curiosity, interest, amazement\n- Trust, confidence, certainty, assurance\n- Disgust, contempt, rejection, disapproval\n\nGuidelines:\n- Consider both explicit and implicit emotional content\n- Look for emotional indicators in word choice, tone, and context\n- Account for sarcasm, irony, and other nuanced expressions\n- Consider the overall message and its emotional impact\n- Provide confidence scores based on clarity of emotional signals\n- Identify mixed sentiments when multiple emotions are present\n\nThe analysis should help understand the emotional context and tone of the content for better interpretation and response.`;\n  }\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;;AAEO,MAAM,iCAAiC,iMAAmB;IACtD,OAAO,gKAAY,CAAC,SAAS,CAAC;IAC9B,WAAW,EAAE;IACb,UAAU,KAAK;IAExB,MAAM,QAAQ,OAAe,EAAE,OAAa,EAA2B;QACrE,MAAM,YAAY,KAAK,GAAG;QAE1B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU;YAClC,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,UACA,MACA;YAEF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,KAAK,GAAG,KAAK,WAAW,OAAO;YAC7E,OAAO;QACT;QAEA,IAAI;YACF,MAAM,SAAS,MAAM,IAAI,CAAC,kBAAkB,CAAC;gBAC3C,MAAM,SAAS,IAAI,CAAC,WAAW,CAAC;gBAEhC,MAAM,WAAW,MAAM,IAAA,sHAAc,EAAC;oBACpC,OAAO,IAAI,CAAC,KAAK;oBACjB,QAAQ,2KAAuB;oBAC/B;gBACF;gBAEA,OAAO,SAAS,MAAM;YACxB;YAEA,MAAM,iBAAiB,KAAK,GAAG,KAAK;YACpC,MAAM,iBAAiB,IAAI,CAAC,gBAAgB,CAC1C,SAAS,UAAU,WACnB,aACA,QACA,WACA;YAGF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,gBAAgB;YAC9D,OAAO;QAET,EAAE,OAAO,OAAO;YACd,MAAM,iBAAiB,KAAK,GAAG,KAAK;YACpC,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAE9D,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,UACA,MACA,cACA;YAGF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,gBAAgB,OAAO;YACrE,OAAO;QACT;IACF;IAEQ,YAAY,OAAe,EAAU;QAC3C,OAAO,CAAC;;;CAGX,EAAE,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yHAiC8G,CAAC;IACxH;AACF","debugId":null}},
    {"offset": {"line": 1705, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/analysis/services/TitleAnalysisService.ts"],"sourcesContent":["import { BaseAnalysisService } from './BaseAnalysisService';\nimport { AnalysisResult, AnalysisType, TitleAnalysisSchema } from '../types';\nimport { generateObject } from 'ai';\n\nexport class TitleAnalysisService extends BaseAnalysisService {\n  readonly type = AnalysisType.TITLE;\n  readonly priority = 1; // High priority (same as summary)\n  readonly timeout = 3000; // 3 seconds - fail faster\n\n  async analyze(content: string, context?: any): Promise<AnalysisResult> {\n    const startTime = Date.now();\n    \n    if (!this.validateContent(content)) {\n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'failed',\n        null,\n        'Content too short for title generation'\n      );\n      this.logMetrics(context?.noteId || 'unknown', Date.now() - startTime, false, 'Content too short');\n      return result;\n    }\n\n    try {\n      const result = await this.executeWithRetry(async () => {\n        return await this.executeWithTimeout(async () => {\n          const prompt = this.buildPrompt(content);\n          \n          const analysis = await generateObject({\n            model: this.model,\n            schema: TitleAnalysisSchema,\n            prompt,\n          });\n\n          return analysis.object;\n        });\n      }, 1); // Only 1 retry attempt\n\n      const processingTime = Date.now() - startTime;\n      const analysisResult = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'completed',\n        result,\n        undefined,\n        processingTime\n      );\n\n      this.logMetrics(context?.noteId || 'unknown', processingTime, true);\n      return analysisResult;\n\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      \n      // Check if it's a quota exceeded error\n      const isQuotaExceeded = error instanceof Error && \n        (error.message.includes('quota') || \n         error.message.includes('RESOURCE_EXHAUSTED') ||\n         error.message.includes('429') ||\n         error.message.includes('exceeded'));\n      \n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'failed',\n        null,\n        isQuotaExceeded ? 'API quota exceeded' : errorMessage,\n        processingTime\n      );\n\n      this.logMetrics(context?.noteId || 'unknown', processingTime, false, errorMessage);\n      return result;\n    }\n  }\n\n  private buildPrompt(content: string): string {\n    return `You are an expert content titler specializing in creating compelling, descriptive titles.\n\nContent to analyze:\n\"${content}\"\n\nPlease generate an effective title for this content. Provide:\n\n1. **Title**: A clear, engaging title (5-100 characters)\n2. **Alternatives**: 1-3 alternative title options\n3. **Confidence**: How confident you are in this title (0-1)\n4. **Style**: The title style (descriptive, question, statement, creative)\n\nTitle Guidelines:\n- **Descriptive**: Clearly describes what the content is about\n- **Question**: Poses a question that the content answers\n- **Statement**: Makes a declarative statement about the content\n- **Creative**: Uses creative language or wordplay\n\nConsider these factors:\n- **Clarity**: The title should clearly indicate the content's main topic\n- **Engagement**: Make it interesting and compelling to read\n- **Accuracy**: Ensure it accurately represents the content\n- **Length**: Keep it concise but informative\n- **Keywords**: Include important terms for searchability\n- **Tone**: Match the tone and style of the content\n- **Uniqueness**: Make it distinctive and memorable\n\nAvoid:\n- Generic titles like \"Notes\" or \"Content\"\n- Overly long or complex titles\n- Misleading or inaccurate descriptions\n- Titles that don't reflect the main content\n\nThe title should help users quickly understand what the content is about and encourage them to read it.`;\n  }\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;;AAEO,MAAM,6BAA6B,iMAAmB;IAClD,OAAO,gKAAY,CAAC,KAAK,CAAC;IAC1B,WAAW,EAAE;IACb,UAAU,KAAK;IAExB,MAAM,QAAQ,OAAe,EAAE,OAAa,EAA2B;QACrE,MAAM,YAAY,KAAK,GAAG;QAE1B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU;YAClC,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,UACA,MACA;YAEF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,KAAK,GAAG,KAAK,WAAW,OAAO;YAC7E,OAAO;QACT;QAEA,IAAI;YACF,MAAM,SAAS,MAAM,IAAI,CAAC,gBAAgB,CAAC;gBACzC,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC;oBACnC,MAAM,SAAS,IAAI,CAAC,WAAW,CAAC;oBAEhC,MAAM,WAAW,MAAM,IAAA,sHAAc,EAAC;wBACpC,OAAO,IAAI,CAAC,KAAK;wBACjB,QAAQ,uKAAmB;wBAC3B;oBACF;oBAEA,OAAO,SAAS,MAAM;gBACxB;YACF,GAAG,IAAI,uBAAuB;YAE9B,MAAM,iBAAiB,KAAK,GAAG,KAAK;YACpC,MAAM,iBAAiB,IAAI,CAAC,gBAAgB,CAC1C,SAAS,UAAU,WACnB,aACA,QACA,WACA;YAGF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,gBAAgB;YAC9D,OAAO;QAET,EAAE,OAAO,OAAO;YACd,MAAM,iBAAiB,KAAK,GAAG,KAAK;YACpC,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAE9D,uCAAuC;YACvC,MAAM,kBAAkB,iBAAiB,SACvC,CAAC,MAAM,OAAO,CAAC,QAAQ,CAAC,YACvB,MAAM,OAAO,CAAC,QAAQ,CAAC,yBACvB,MAAM,OAAO,CAAC,QAAQ,CAAC,UACvB,MAAM,OAAO,CAAC,QAAQ,CAAC,WAAW;YAErC,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,UACA,MACA,kBAAkB,uBAAuB,cACzC;YAGF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,gBAAgB,OAAO;YACrE,OAAO;QACT;IACF;IAEQ,YAAY,OAAe,EAAU;QAC3C,OAAO,CAAC;;;CAGX,EAAE,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uGA8B4F,CAAC;IACtG;AACF","debugId":null}},
    {"offset": {"line": 1801, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/analysis/AnalysisOrchestrator.ts"],"sourcesContent":["import { \n  AnalysisType, \n  AnalysisConfig, \n  AnalysisRequest, \n  AnalysisResponse, \n  ComprehensiveAnalysis,\n  AnalysisResult \n} from './types';\nimport { BaseAnalysisService } from './services/BaseAnalysisService';\nimport { SummaryAnalysisService } from './services/SummaryAnalysisService';\nimport { KeyPointsAnalysisService } from './services/KeyPointsAnalysisService';\nimport { CategoriesAnalysisService } from './services/CategoriesAnalysisService';\nimport { TagsAnalysisService } from './services/TagsAnalysisService';\nimport { SentimentAnalysisService } from './services/SentimentAnalysisService';\nimport { TitleAnalysisService } from './services/TitleAnalysisService';\n\nexport class AnalysisOrchestrator {\n  private services: Map<AnalysisType, BaseAnalysisService>;\n  private cache: Map<string, ComprehensiveAnalysis>;\n  private defaultConfig: AnalysisConfig;\n\n  constructor() {\n    this.services = new Map();\n    this.cache = new Map();\n    \n    // Initialize services\n    this.initializeServices();\n    \n    // Default configuration\n    this.defaultConfig = {\n      enabledAnalyses: [\n        AnalysisType.TITLE,\n        AnalysisType.SUMMARY,\n        AnalysisType.KEY_POINTS,\n        AnalysisType.CATEGORIES,\n        AnalysisType.TAGS,\n        AnalysisType.SENTIMENT,\n      ],\n      priority: [\n        AnalysisType.TITLE,\n        AnalysisType.SUMMARY,\n        AnalysisType.KEY_POINTS,\n        AnalysisType.CATEGORIES,\n        AnalysisType.TAGS,\n        AnalysisType.SENTIMENT,\n      ],\n      timeout: 15000, // 15 seconds total - fail faster\n      retryAttempts: 1,\n      cacheEnabled: true,\n      cacheTTL: 24 * 60 * 60 * 1000, // 24 hours\n    };\n  }\n\n  private async initializeServices(userId?: string): Promise<void> {\n    // Only create services if they don't exist or if we need to reinitialize with user settings\n    if (this.services.size === 0 || userId) {\n      const summaryService = new SummaryAnalysisService();\n      const keyPointsService = new KeyPointsAnalysisService();\n      const categoriesService = new CategoriesAnalysisService();\n      const tagsService = new TagsAnalysisService();\n      const sentimentService = new SentimentAnalysisService();\n      const titleService = new TitleAnalysisService();\n\n      // Initialize services with user settings if userId is provided\n      if (userId) {\n        await Promise.all([\n          summaryService.initialize(userId),\n          keyPointsService.initialize(userId),\n          categoriesService.initialize(userId),\n          tagsService.initialize(userId),\n          sentimentService.initialize(userId),\n          titleService.initialize(userId),\n        ]);\n      } else {\n        // Initialize with default settings if no userId provided\n        await Promise.all([\n          summaryService.initialize('default'),\n          keyPointsService.initialize('default'),\n          categoriesService.initialize('default'),\n          tagsService.initialize('default'),\n          sentimentService.initialize('default'),\n          titleService.initialize('default'),\n        ]);\n      }\n\n      this.services.set(AnalysisType.SUMMARY, summaryService);\n      this.services.set(AnalysisType.KEY_POINTS, keyPointsService);\n      this.services.set(AnalysisType.CATEGORIES, categoriesService);\n      this.services.set(AnalysisType.TAGS, tagsService);\n      this.services.set(AnalysisType.SENTIMENT, sentimentService);\n      this.services.set(AnalysisType.TITLE, titleService);\n    }\n  }\n\n  /**\n   * Perform comprehensive analysis of content\n   */\n  async analyze(request: AnalysisRequest, userId?: string): Promise<AnalysisResponse> {\n    const startTime = Date.now();\n    const config = { ...this.defaultConfig, ...request.config };\n    \n    // Check cache first\n    if (config.cacheEnabled && !request.forceRefresh) {\n      const cached = this.getCachedAnalysis(request.noteId);\n      if (cached) {\n        return {\n          success: true,\n          data: cached,\n        };\n      }\n    }\n\n    try {\n      // Initialize services with user settings\n      await this.initializeServices(userId);\n      \n      // Get enabled services in priority order\n      const enabledServices = this.getEnabledServices(config);\n      \n      // Execute analyses in parallel with priority handling\n      const results = await this.executeAnalyses(\n        request.noteId,\n        request.content,\n        enabledServices,\n        config\n      );\n\n      // Calculate overall confidence\n      const overallConfidence = this.calculateOverallConfidence(results);\n      \n      // Create comprehensive analysis\n      const comprehensiveAnalysis: ComprehensiveAnalysis = {\n        noteId: request.noteId,\n        analyses: results,\n        overallConfidence,\n        processingTime: Date.now() - startTime,\n        version: '1.0.0',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      // Cache the result\n      if (config.cacheEnabled) {\n        this.cacheAnalysis(request.noteId, comprehensiveAnalysis);\n      }\n\n      return {\n        success: true,\n        data: comprehensiveAnalysis,\n      };\n\n    } catch (error) {\n      console.error('Analysis orchestration failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Get enabled services in priority order\n   */\n  private getEnabledServices(config: AnalysisConfig): BaseAnalysisService[] {\n    return config.enabledAnalyses\n      .map(type => this.services.get(type))\n      .filter((service): service is BaseAnalysisService => service !== undefined)\n      .sort((a, b) => a.getPriority() - b.getPriority());\n  }\n\n  /**\n   * Execute analyses with parallel processing and error handling\n   */\n  private async executeAnalyses(\n    noteId: string,\n    content: string,\n    services: BaseAnalysisService[],\n    config: AnalysisConfig\n  ): Promise<Record<AnalysisType, AnalysisResult>> {\n    const results: Record<AnalysisType, AnalysisResult> = {} as Record<AnalysisType, AnalysisResult>;\n    const context = { noteId };\n\n    // Execute high-priority analyses first (title, summary)\n    const highPriorityServices = services.filter(s => s.getPriority() <= 2);\n    const otherServices = services.filter(s => s.getPriority() > 2);\n\n    // Run high-priority analyses sequentially for better results\n    for (const service of highPriorityServices) {\n      try {\n        const result = await service.analyze(content, context);\n        results[service.type] = result;\n      } catch (error) {\n        console.error(`High-priority analysis failed for ${service.type}:`, error);\n        results[service.type] = service.createBaseResult(\n          noteId,\n          'failed',\n          null,\n          error instanceof Error ? error.message : 'Unknown error'\n        );\n      }\n    }\n\n    // Run other analyses in parallel\n    const otherPromises = otherServices.map(async (service) => {\n      try {\n        return await service.analyze(content, context);\n      } catch (error) {\n        console.error(`Analysis failed for ${service.type}:`, error);\n        return service.createBaseResult(\n          noteId,\n          'failed',\n          null,\n          error instanceof Error ? error.message : 'Unknown error'\n        );\n      }\n    });\n\n    const otherResults = await Promise.all(otherPromises);\n    otherResults.forEach(result => {\n      results[result.type] = result;\n    });\n\n    return results;\n  }\n\n  /**\n   * Calculate overall confidence score\n   */\n  private calculateOverallConfidence(results: Record<AnalysisType, AnalysisResult>): number {\n    const completedAnalyses = Object.values(results).filter(r => r.status === 'completed');\n    \n    if (completedAnalyses.length === 0) {\n      return 0;\n    }\n\n    // Calculate weighted average based on analysis type importance\n    const weights: Record<AnalysisType, number> = {\n      [AnalysisType.TITLE]: 0.2,\n      [AnalysisType.SUMMARY]: 0.25,\n      [AnalysisType.KEY_POINTS]: 0.2,\n      [AnalysisType.CATEGORIES]: 0.15,\n      [AnalysisType.TAGS]: 0.1,\n      [AnalysisType.SENTIMENT]: 0.1,\n      [AnalysisType.ENTITIES]: 0.05,\n      [AnalysisType.TOPICS]: 0.05,\n      [AnalysisType.RELATIONSHIPS]: 0.05,\n      [AnalysisType.CONFIDENCE_SCORE]: 0.05,\n    };\n\n    let totalWeight = 0;\n    let weightedSum = 0;\n\n    completedAnalyses.forEach(analysis => {\n      const weight = weights[analysis.type] || 0.05;\n      const confidence = this.extractConfidenceFromResult(analysis);\n      weightedSum += confidence * weight;\n      totalWeight += weight;\n    });\n\n    return totalWeight > 0 ? weightedSum / totalWeight : 0;\n  }\n\n  /**\n   * Extract confidence score from analysis result\n   */\n  private extractConfidenceFromResult(result: AnalysisResult): number {\n    if (result.status !== 'completed' || !result.result) {\n      return 0;\n    }\n\n    // Try to extract confidence from the result\n    if (typeof result.result === 'object' && result.result !== null) {\n      if ('confidence' in result.result) {\n        return result.result.confidence as number;\n      }\n      if ('overallConfidence' in result.result) {\n        return result.result.overallConfidence as number;\n      }\n    }\n\n    // Default confidence based on status\n    return result.status === 'completed' ? 0.8 : 0;\n  }\n\n  /**\n   * Get cached analysis\n   */\n  private getCachedAnalysis(noteId: string): ComprehensiveAnalysis | null {\n    const cached = this.cache.get(noteId);\n    if (!cached) {\n      return null;\n    }\n\n    // Check if cache is still valid\n    const now = Date.now();\n    const cacheAge = now - cached.createdAt.getTime();\n    \n    if (cacheAge > this.defaultConfig.cacheTTL) {\n      this.cache.delete(noteId);\n      return null;\n    }\n\n    return cached;\n  }\n\n  /**\n   * Cache analysis result\n   */\n  private cacheAnalysis(noteId: string, analysis: ComprehensiveAnalysis): void {\n    this.cache.set(noteId, analysis);\n    \n    // Clean up old cache entries periodically\n    if (this.cache.size > 100) {\n      this.cleanupCache();\n    }\n  }\n\n  /**\n   * Clean up old cache entries\n   */\n  private cleanupCache(): void {\n    const now = Date.now();\n    const entries = Array.from(this.cache.entries());\n    \n    entries.forEach(([noteId, analysis]) => {\n      const cacheAge = now - analysis.createdAt.getTime();\n      if (cacheAge > this.defaultConfig.cacheTTL) {\n        this.cache.delete(noteId);\n      }\n    });\n  }\n\n  /**\n   * Get analysis statistics\n   */\n  getStats(): {\n    totalAnalyses: number;\n    cacheSize: number;\n    availableServices: AnalysisType[];\n  } {\n    return {\n      totalAnalyses: this.cache.size,\n      cacheSize: this.cache.size,\n      availableServices: Array.from(this.services.keys()),\n    };\n  }\n\n  /**\n   * Clear cache\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2109, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/auth.ts"],"sourcesContent":["import { cookies } from 'next/headers';\nimport { db, users, sessions, emailVerificationTokens } from '@polynote/db';\nimport { eq, and, gt } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\nimport { randomBytes } from 'crypto';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  emailVerified: boolean;\n  avatar?: string;\n  preferences?: Record<string, unknown>;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Session {\n  id: string;\n  userId: string;\n  token: string;\n  expiresAt: Date;\n  createdAt: Date;\n}\n\n// Password hashing\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\n// Session management\nexport async function createSession(userId: string): Promise<Session> {\n  const token = randomBytes(32).toString('hex');\n  const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days\n\n  const [session] = await db.insert(sessions).values({\n    userId,\n    token,\n    expiresAt,\n  }).returning();\n\n  return session;\n}\n\nexport async function getSession(token: string): Promise<Session | null> {\n  const [session] = await db\n    .select()\n    .from(sessions)\n    .where(and(\n      eq(sessions.token, token),\n      gt(sessions.expiresAt, new Date())\n    ))\n    .limit(1);\n\n  return session || null;\n}\n\nexport async function deleteSession(token: string): Promise<void> {\n  await db.delete(sessions).where(eq(sessions.token, token));\n}\n\n// Email verification\nexport async function createEmailVerificationToken(userId: string): Promise<string> {\n  const token = randomBytes(32).toString('hex');\n  const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n\n  await db.insert(emailVerificationTokens).values({\n    userId,\n    token,\n    expiresAt,\n  });\n\n  return token;\n}\n\nexport async function verifyEmailToken(token: string): Promise<string | null> {\n  const [verificationToken] = await db\n    .select()\n    .from(emailVerificationTokens)\n    .where(and(\n      eq(emailVerificationTokens.token, token),\n      gt(emailVerificationTokens.expiresAt, new Date())\n    ))\n    .limit(1);\n\n  if (!verificationToken) {\n    return null;\n  }\n\n  // Mark user as verified\n  await db.update(users)\n    .set({ emailVerified: true })\n    .where(eq(users.id, verificationToken.userId));\n\n  // Delete the verification token\n  await db.delete(emailVerificationTokens)\n    .where(eq(emailVerificationTokens.token, token));\n\n  return verificationToken.userId;\n}\n\n// User management\nexport async function getUserByEmail(email: string): Promise<User | null> {\n  const [user] = await db\n    .select()\n    .from(users)\n    .where(eq(users.email, email))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function getUserByEmailWithPassword(email: string): Promise<(User & { passwordHash: string }) | null> {\n  const [user] = await db\n    .select({\n      id: users.id,\n      email: users.email,\n      name: users.name,\n      emailVerified: users.emailVerified,\n      avatar: users.avatar,\n      preferences: users.preferences,\n      createdAt: users.createdAt,\n      updatedAt: users.updatedAt,\n      passwordHash: users.passwordHash,\n    })\n    .from(users)\n    .where(eq(users.email, email))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function getUserById(id: string): Promise<User | null> {\n  const [user] = await db\n    .select()\n    .from(users)\n    .where(eq(users.id, id))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function createUser(email: string, name: string, password: string): Promise<User> {\n  const passwordHash = await hashPassword(password);\n  \n  const [user] = await db.insert(users).values({\n    email,\n    name,\n    passwordHash,\n  }).returning();\n\n  return user;\n}\n\n// Authentication helpers\nexport async function getCurrentUser(): Promise<User | null> {\n  const cookieStore = await cookies();\n  const sessionToken = cookieStore.get('session')?.value;\n  \n  if (!sessionToken) {\n    return null;\n  }\n\n  const session = await getSession(sessionToken);\n  if (!session) {\n    return null;\n  }\n\n  return getUserById(session.userId);\n}\n\nexport async function requireAuth(): Promise<User> {\n  const user = await getCurrentUser();\n  if (!user) {\n    throw new Error('Authentication required');\n  }\n  return user;\n}\n\n// Cookie helpers\nexport async function setSessionCookie(token: string) {\n  const cookieStore = await cookies();\n  cookieStore.set('session', token, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'lax',\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n    path: '/',\n  });\n}\n\nexport async function clearSessionCookie() {\n  const cookieStore = await cookies();\n  cookieStore.delete('session');\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2274, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/app/api/notes/analyze/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { analyzeNote } from '@/lib/ai';\nimport { AnalysisOrchestrator } from '@/lib/analysis/AnalysisOrchestrator';\nimport { AnalysisType } from '@/lib/analysis/types';\nimport { getCurrentUser } from '@/lib/auth';\n\n// Try to initialize the new system, but fallback to old system if it fails\nlet orchestrator: AnalysisOrchestrator | null = null;\ntry {\n  orchestrator = new AnalysisOrchestrator();\n  console.log('New analysis system initialized successfully');\n} catch (error) {\n  console.error('Failed to initialize new analysis system, using fallback:', error);\n  orchestrator = null;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Get the current user (optional for analysis)\n    const user = await getCurrentUser();\n    \n    const body = await request.json();\n    const { content, title, noteId } = body;\n\n    if (!content?.trim()) {\n      return NextResponse.json(\n        { error: 'Content is required' },\n        { status: 400 }\n      );\n    }\n\n    console.log('AI Analysis - Content received:', {\n      noteId: noteId || 'legacy',\n      contentLength: content.length,\n      hasFileContent: content.includes('--- Content from'),\n      contentPreview: content.substring(0, 200) + (content.length > 200 ? '...' : ''),\n      fileContentSections: (content.match(/--- Content from .+? ---/g) || []).length,\n      usingNewSystem: !!orchestrator,\n    });\n\n    // Try new system first, fallback to old system\n    if (orchestrator) {\n      try {\n        console.log('AI Analysis - Using new system with user:', user?.id || 'anonymous');\n        \n        const analysisRequest = {\n          noteId: noteId || `legacy_${Date.now()}`,\n          content: content.trim(),\n          config: {\n            enabledAnalyses: [\n              AnalysisType.TITLE,\n              AnalysisType.SUMMARY,\n              AnalysisType.KEY_POINTS,\n              AnalysisType.CATEGORIES,\n              AnalysisType.TAGS,\n              AnalysisType.SENTIMENT,\n            ],\n            priority: [\n              AnalysisType.TITLE,\n              AnalysisType.SUMMARY,\n              AnalysisType.KEY_POINTS,\n              AnalysisType.CATEGORIES,\n              AnalysisType.TAGS,\n              AnalysisType.SENTIMENT,\n            ],\n            timeout: 15000, // 15 seconds - fail faster\n            retryAttempts: 1,\n            cacheEnabled: true,\n            cacheTTL: 24 * 60 * 60 * 1000,\n          },\n          forceRefresh: false,\n        };\n\n        const result = await orchestrator.analyze(analysisRequest, user?.id || 'anonymous');\n        \n        console.log('AI Analysis - New system result:', {\n          success: result.success,\n          hasData: !!result.data,\n          error: result.error,\n          analysesCount: result.data ? Object.keys(result.data.analyses).length : 0\n        });\n\n        if (result.success && result.data) {\n          // Check if any analysis failed due to quota exceeded\n          const quotaExceeded = Object.values(result.data.analyses).some((analysis: any) => \n            analysis.error && analysis.error.includes('quota')\n          );\n          \n          if (quotaExceeded) {\n            console.warn('AI Analysis - Quota exceeded detected in analysis services');\n            return NextResponse.json(\n              { \n                error: 'API quota exceeded. Please check your API key limits or try again later.',\n                quotaExceeded: true,\n                fallback: {\n                  title: title || 'Untitled Note',\n                  summary: content.length > 150 ? content.substring(0, 150) + '...' : content,\n                  tags: ['note'],\n                  categories: ['general'],\n                  sentiment: 'neutral',\n                  keyPoints: [content.substring(0, 100) + '...']\n                }\n              },\n              { status: 429 }\n            );\n          }\n          \n          // Transform the new format to the legacy format for backward compatibility\n          const legacyFormat = {\n            title: result.data.analyses[AnalysisType.TITLE]?.result?.title || title || 'Untitled Note',\n            summary: result.data.analyses[AnalysisType.SUMMARY]?.result?.summary || '',\n            tags: result.data.analyses[AnalysisType.TAGS]?.result?.tags?.map((t: any) => t.tag) || [],\n            categories: result.data.analyses[AnalysisType.CATEGORIES]?.result?.categories?.map((c: any) => c.name) || [],\n            sentiment: result.data.analyses[AnalysisType.SENTIMENT]?.result?.sentiment || 'neutral',\n            keyPoints: result.data.analyses[AnalysisType.KEY_POINTS]?.result?.keyPoints?.map((kp: any) => kp.point) || [],\n            // Include new metadata\n            metadata: {\n              overallConfidence: result.data.overallConfidence,\n              processingTime: result.data.processingTime,\n              analysisVersion: result.data.version,\n              detailedResults: {\n                summary: result.data.analyses[AnalysisType.SUMMARY]?.result,\n                keyPoints: result.data.analyses[AnalysisType.KEY_POINTS]?.result,\n                categories: result.data.analyses[AnalysisType.CATEGORIES]?.result,\n                tags: result.data.analyses[AnalysisType.TAGS]?.result,\n                sentiment: result.data.analyses[AnalysisType.SENTIMENT]?.result,\n                title: result.data.analyses[AnalysisType.TITLE]?.result,\n              },\n            },\n          };\n\n          console.log('AI Analysis - New System Result:', {\n            title: legacyFormat.title,\n            tags: legacyFormat.tags,\n            categories: legacyFormat.categories,\n            summaryLength: legacyFormat.summary?.length || 0,\n            overallConfidence: legacyFormat.metadata.overallConfidence,\n            processingTime: legacyFormat.metadata.processingTime,\n          });\n\n          return NextResponse.json(legacyFormat);\n        } else {\n          console.error('New system failed, falling back to old system:', result.error);\n          \n          // Check if it's a quota exceeded error\n          const isQuotaExceeded = result.error && \n            (result.error.includes('quota') || \n             result.error.includes('RESOURCE_EXHAUSTED') ||\n             result.error.includes('429') ||\n             result.error.includes('exceeded'));\n          \n          if (isQuotaExceeded) {\n            return NextResponse.json(\n              { \n                error: 'API quota exceeded. Please check your API key limits or try again later.',\n                quotaExceeded: true,\n                fallback: {\n                  title: title || 'Untitled Note',\n                  summary: content.length > 150 ? content.substring(0, 150) + '...' : content,\n                  tags: ['note'],\n                  categories: ['general'],\n                  sentiment: 'neutral',\n                  keyPoints: [content.substring(0, 100) + '...']\n                }\n              },\n              { status: 429 }\n            );\n          }\n        }\n      } catch (error) {\n        console.error('New system error, falling back to old system:', error);\n        \n        // Check if it's a quota exceeded error\n        const isQuotaExceeded = error instanceof Error && \n          (error.message.includes('quota') || \n           error.message.includes('RESOURCE_EXHAUSTED') ||\n           error.message.includes('429') ||\n           error.message.includes('exceeded'));\n        \n        if (isQuotaExceeded) {\n          return NextResponse.json(\n            { \n              error: 'API quota exceeded. Please check your API key limits or try again later.',\n              quotaExceeded: true,\n              fallback: {\n                title: title || 'Untitled Note',\n                summary: content.length > 150 ? content.substring(0, 150) + '...' : content,\n                tags: ['note'],\n                categories: ['general'],\n                sentiment: 'neutral',\n                keyPoints: [content.substring(0, 100) + '...']\n              }\n            },\n            { status: 429 }\n          );\n        }\n      }\n    }\n\n    // Fallback to old system\n    console.log('AI Analysis - Using legacy analysis system');\n    try {\n      const analysis = await analyzeNote(content);\n\n      console.log('AI Analysis - Legacy Result:', {\n        title: analysis.title,\n        tags: analysis.tags,\n        categories: analysis.categories,\n        summaryLength: analysis.summary?.length || 0\n      });\n\n      return NextResponse.json(analysis);\n    } catch (legacyError) {\n      console.error('AI Analysis - Legacy system also failed:', legacyError);\n      \n      // Check if it's a quota exceeded error\n      const isQuotaExceeded = legacyError instanceof Error && \n        (legacyError.message.includes('quota') || \n         legacyError.message.includes('RESOURCE_EXHAUSTED') ||\n         legacyError.message.includes('429') ||\n         legacyError.message.includes('exceeded'));\n      \n      if (isQuotaExceeded) {\n        return NextResponse.json(\n          { \n            error: 'API quota exceeded. Please check your API key limits or try again later.',\n            quotaExceeded: true,\n            fallback: {\n              title: title || 'Untitled Note',\n              summary: content.length > 150 ? content.substring(0, 150) + '...' : content,\n              tags: ['note'],\n              categories: ['general'],\n              sentiment: 'neutral',\n              keyPoints: [content.substring(0, 100) + '...']\n            }\n          },\n          { status: 429 }\n        );\n      }\n      \n      throw legacyError;\n    }\n\n  } catch (error) {\n    console.error('Error analyzing note:', error);\n    return NextResponse.json(\n      { error: 'Failed to analyze note' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,2EAA2E;AAC3E,IAAI,eAA4C;AAChD,IAAI;IACF,eAAe,IAAI,uLAAoB;IACvC,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,6DAA6D;IAC3E,eAAe;AACjB;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,+CAA+C;QAC/C,MAAM,OAAO,MAAM,IAAA,qJAAc;QAEjC,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG;QAEnC,IAAI,CAAC,SAAS,QAAQ;YACpB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC,mCAAmC;YAC7C,QAAQ,UAAU;YAClB,eAAe,QAAQ,MAAM;YAC7B,gBAAgB,QAAQ,QAAQ,CAAC;YACjC,gBAAgB,QAAQ,SAAS,CAAC,GAAG,OAAO,CAAC,QAAQ,MAAM,GAAG,MAAM,QAAQ,EAAE;YAC9E,qBAAqB,CAAC,QAAQ,KAAK,CAAC,gCAAgC,EAAE,EAAE,MAAM;YAC9E,gBAAgB,CAAC,CAAC;QACpB;QAEA,+CAA+C;QAC/C,IAAI,cAAc;YAChB,IAAI;gBACF,QAAQ,GAAG,CAAC,6CAA6C,MAAM,MAAM;gBAErE,MAAM,kBAAkB;oBACtB,QAAQ,UAAU,CAAC,OAAO,EAAE,KAAK,GAAG,IAAI;oBACxC,SAAS,QAAQ,IAAI;oBACrB,QAAQ;wBACN,iBAAiB;4BACf,gKAAY,CAAC,KAAK;4BAClB,gKAAY,CAAC,OAAO;4BACpB,gKAAY,CAAC,UAAU;4BACvB,gKAAY,CAAC,UAAU;4BACvB,gKAAY,CAAC,IAAI;4BACjB,gKAAY,CAAC,SAAS;yBACvB;wBACD,UAAU;4BACR,gKAAY,CAAC,KAAK;4BAClB,gKAAY,CAAC,OAAO;4BACpB,gKAAY,CAAC,UAAU;4BACvB,gKAAY,CAAC,UAAU;4BACvB,gKAAY,CAAC,IAAI;4BACjB,gKAAY,CAAC,SAAS;yBACvB;wBACD,SAAS;wBACT,eAAe;wBACf,cAAc;wBACd,UAAU,KAAK,KAAK,KAAK;oBAC3B;oBACA,cAAc;gBAChB;gBAEA,MAAM,SAAS,MAAM,aAAa,OAAO,CAAC,iBAAiB,MAAM,MAAM;gBAEvE,QAAQ,GAAG,CAAC,oCAAoC;oBAC9C,SAAS,OAAO,OAAO;oBACvB,SAAS,CAAC,CAAC,OAAO,IAAI;oBACtB,OAAO,OAAO,KAAK;oBACnB,eAAe,OAAO,IAAI,GAAG,OAAO,IAAI,CAAC,OAAO,IAAI,CAAC,QAAQ,EAAE,MAAM,GAAG;gBAC1E;gBAEA,IAAI,OAAO,OAAO,IAAI,OAAO,IAAI,EAAE;oBACjC,qDAAqD;oBACrD,MAAM,gBAAgB,OAAO,MAAM,CAAC,OAAO,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,WAC9D,SAAS,KAAK,IAAI,SAAS,KAAK,CAAC,QAAQ,CAAC;oBAG5C,IAAI,eAAe;wBACjB,QAAQ,IAAI,CAAC;wBACb,OAAO,gJAAY,CAAC,IAAI,CACtB;4BACE,OAAO;4BACP,eAAe;4BACf,UAAU;gCACR,OAAO,SAAS;gCAChB,SAAS,QAAQ,MAAM,GAAG,MAAM,QAAQ,SAAS,CAAC,GAAG,OAAO,QAAQ;gCACpE,MAAM;oCAAC;iCAAO;gCACd,YAAY;oCAAC;iCAAU;gCACvB,WAAW;gCACX,WAAW;oCAAC,QAAQ,SAAS,CAAC,GAAG,OAAO;iCAAM;4BAChD;wBACF,GACA;4BAAE,QAAQ;wBAAI;oBAElB;oBAEA,2EAA2E;oBAC3E,MAAM,eAAe;wBACnB,OAAO,OAAO,IAAI,CAAC,QAAQ,CAAC,gKAAY,CAAC,KAAK,CAAC,EAAE,QAAQ,SAAS,SAAS;wBAC3E,SAAS,OAAO,IAAI,CAAC,QAAQ,CAAC,gKAAY,CAAC,OAAO,CAAC,EAAE,QAAQ,WAAW;wBACxE,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,gKAAY,CAAC,IAAI,CAAC,EAAE,QAAQ,MAAM,IAAI,CAAC,IAAW,EAAE,GAAG,KAAK,EAAE;wBACzF,YAAY,OAAO,IAAI,CAAC,QAAQ,CAAC,gKAAY,CAAC,UAAU,CAAC,EAAE,QAAQ,YAAY,IAAI,CAAC,IAAW,EAAE,IAAI,KAAK,EAAE;wBAC5G,WAAW,OAAO,IAAI,CAAC,QAAQ,CAAC,gKAAY,CAAC,SAAS,CAAC,EAAE,QAAQ,aAAa;wBAC9E,WAAW,OAAO,IAAI,CAAC,QAAQ,CAAC,gKAAY,CAAC,UAAU,CAAC,EAAE,QAAQ,WAAW,IAAI,CAAC,KAAY,GAAG,KAAK,KAAK,EAAE;wBAC7G,uBAAuB;wBACvB,UAAU;4BACR,mBAAmB,OAAO,IAAI,CAAC,iBAAiB;4BAChD,gBAAgB,OAAO,IAAI,CAAC,cAAc;4BAC1C,iBAAiB,OAAO,IAAI,CAAC,OAAO;4BACpC,iBAAiB;gCACf,SAAS,OAAO,IAAI,CAAC,QAAQ,CAAC,gKAAY,CAAC,OAAO,CAAC,EAAE;gCACrD,WAAW,OAAO,IAAI,CAAC,QAAQ,CAAC,gKAAY,CAAC,UAAU,CAAC,EAAE;gCAC1D,YAAY,OAAO,IAAI,CAAC,QAAQ,CAAC,gKAAY,CAAC,UAAU,CAAC,EAAE;gCAC3D,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,gKAAY,CAAC,IAAI,CAAC,EAAE;gCAC/C,WAAW,OAAO,IAAI,CAAC,QAAQ,CAAC,gKAAY,CAAC,SAAS,CAAC,EAAE;gCACzD,OAAO,OAAO,IAAI,CAAC,QAAQ,CAAC,gKAAY,CAAC,KAAK,CAAC,EAAE;4BACnD;wBACF;oBACF;oBAEA,QAAQ,GAAG,CAAC,oCAAoC;wBAC9C,OAAO,aAAa,KAAK;wBACzB,MAAM,aAAa,IAAI;wBACvB,YAAY,aAAa,UAAU;wBACnC,eAAe,aAAa,OAAO,EAAE,UAAU;wBAC/C,mBAAmB,aAAa,QAAQ,CAAC,iBAAiB;wBAC1D,gBAAgB,aAAa,QAAQ,CAAC,cAAc;oBACtD;oBAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAC3B,OAAO;oBACL,QAAQ,KAAK,CAAC,kDAAkD,OAAO,KAAK;oBAE5E,uCAAuC;oBACvC,MAAM,kBAAkB,OAAO,KAAK,IAClC,CAAC,OAAO,KAAK,CAAC,QAAQ,CAAC,YACtB,OAAO,KAAK,CAAC,QAAQ,CAAC,yBACtB,OAAO,KAAK,CAAC,QAAQ,CAAC,UACtB,OAAO,KAAK,CAAC,QAAQ,CAAC,WAAW;oBAEpC,IAAI,iBAAiB;wBACnB,OAAO,gJAAY,CAAC,IAAI,CACtB;4BACE,OAAO;4BACP,eAAe;4BACf,UAAU;gCACR,OAAO,SAAS;gCAChB,SAAS,QAAQ,MAAM,GAAG,MAAM,QAAQ,SAAS,CAAC,GAAG,OAAO,QAAQ;gCACpE,MAAM;oCAAC;iCAAO;gCACd,YAAY;oCAAC;iCAAU;gCACvB,WAAW;gCACX,WAAW;oCAAC,QAAQ,SAAS,CAAC,GAAG,OAAO;iCAAM;4BAChD;wBACF,GACA;4BAAE,QAAQ;wBAAI;oBAElB;gBACF;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,iDAAiD;gBAE/D,uCAAuC;gBACvC,MAAM,kBAAkB,iBAAiB,SACvC,CAAC,MAAM,OAAO,CAAC,QAAQ,CAAC,YACvB,MAAM,OAAO,CAAC,QAAQ,CAAC,yBACvB,MAAM,OAAO,CAAC,QAAQ,CAAC,UACvB,MAAM,OAAO,CAAC,QAAQ,CAAC,WAAW;gBAErC,IAAI,iBAAiB;oBACnB,OAAO,gJAAY,CAAC,IAAI,CACtB;wBACE,OAAO;wBACP,eAAe;wBACf,UAAU;4BACR,OAAO,SAAS;4BAChB,SAAS,QAAQ,MAAM,GAAG,MAAM,QAAQ,SAAS,CAAC,GAAG,OAAO,QAAQ;4BACpE,MAAM;gCAAC;6BAAO;4BACd,YAAY;gCAAC;6BAAU;4BACvB,WAAW;4BACX,WAAW;gCAAC,QAAQ,SAAS,CAAC,GAAG,OAAO;6BAAM;wBAChD;oBACF,GACA;wBAAE,QAAQ;oBAAI;gBAElB;YACF;QACF;QAEA,yBAAyB;QACzB,QAAQ,GAAG,CAAC;QACZ,IAAI;YACF,MAAM,WAAW,MAAM,IAAA,gJAAW,EAAC;YAEnC,QAAQ,GAAG,CAAC,gCAAgC;gBAC1C,OAAO,SAAS,KAAK;gBACrB,MAAM,SAAS,IAAI;gBACnB,YAAY,SAAS,UAAU;gBAC/B,eAAe,SAAS,OAAO,EAAE,UAAU;YAC7C;YAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;QAC3B,EAAE,OAAO,aAAa;YACpB,QAAQ,KAAK,CAAC,4CAA4C;YAE1D,uCAAuC;YACvC,MAAM,kBAAkB,uBAAuB,SAC7C,CAAC,YAAY,OAAO,CAAC,QAAQ,CAAC,YAC7B,YAAY,OAAO,CAAC,QAAQ,CAAC,yBAC7B,YAAY,OAAO,CAAC,QAAQ,CAAC,UAC7B,YAAY,OAAO,CAAC,QAAQ,CAAC,WAAW;YAE3C,IAAI,iBAAiB;gBACnB,OAAO,gJAAY,CAAC,IAAI,CACtB;oBACE,OAAO;oBACP,eAAe;oBACf,UAAU;wBACR,OAAO,SAAS;wBAChB,SAAS,QAAQ,MAAM,GAAG,MAAM,QAAQ,SAAS,CAAC,GAAG,OAAO,QAAQ;wBACpE,MAAM;4BAAC;yBAAO;wBACd,YAAY;4BAAC;yBAAU;wBACvB,WAAW;wBACX,WAAW;4BAAC,QAAQ,SAAS,CAAC,GAAG,OAAO;yBAAM;oBAChD;gBACF,GACA;oBAAE,QAAQ;gBAAI;YAElB;YAEA,MAAM;QACR;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyB,GAClC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}