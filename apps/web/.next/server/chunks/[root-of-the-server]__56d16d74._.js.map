{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/packages/db/src/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, uuid, jsonb, index, boolean, varchar, integer } from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\n\n// Users table for authentication\nexport const users = pgTable('users', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  email: varchar('email', { length: 255 }).notNull().unique(),\n  name: text('name').notNull(),\n  passwordHash: text('password_hash').notNull(),\n  emailVerified: boolean('email_verified').default(false).notNull(),\n  avatar: text('avatar'), // URL to user avatar\n  preferences: jsonb('preferences').$type<Record<string, unknown>>(), // User preferences\n  resetToken: text('reset_token'), // Password reset token\n  resetTokenExpiry: timestamp('reset_token_expiry'), // Password reset token expiry\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  emailIdx: index('users_email_idx').on(table.email),\n  createdAtIdx: index('users_created_at_idx').on(table.createdAt),\n  resetTokenIdx: index('users_reset_token_idx').on(table.resetToken),\n}));\n\n// User sessions table for authentication\nexport const sessions = pgTable('sessions', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  token: text('token').notNull().unique(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('sessions_user_id_idx').on(table.userId),\n  tokenIdx: index('sessions_token_idx').on(table.token),\n  expiresAtIdx: index('sessions_expires_at_idx').on(table.expiresAt),\n}));\n\n// Email verification tokens table\nexport const emailVerificationTokens = pgTable('email_verification_tokens', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  token: text('token').notNull().unique(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('email_verification_tokens_user_id_idx').on(table.userId),\n  tokenIdx: index('email_verification_tokens_token_idx').on(table.token),\n  expiresAtIdx: index('email_verification_tokens_expires_at_idx').on(table.expiresAt),\n}));\n\n// Notes table - updated with user ownership\nexport const notes = pgTable('notes', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  title: text('title').notNull(),\n  content: text('content').notNull(),\n  transcript: text('transcript'), // Original voice transcript\n  summary: text('summary'), // AI-generated summary\n  tags: jsonb('tags').$type<string[]>(), // AI-generated tags\n  categories: jsonb('categories').$type<string[]>(), // AI-generated categories\n  metadata: jsonb('metadata').$type<Record<string, unknown>>(), // Additional AI metadata\n  isPublic: boolean('is_public').default(false).notNull(), // Allow sharing notes\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('notes_user_id_idx').on(table.userId),\n  titleIdx: index('notes_title_idx').on(table.title),\n  createdAtIdx: index('notes_created_at_idx').on(table.createdAt),\n  tagsIdx: index('notes_tags_idx').on(table.tags),\n  categoriesIdx: index('notes_categories_idx').on(table.categories),\n  isPublicIdx: index('notes_is_public_idx').on(table.isPublic),\n}));\n\n// Note searches table for full-text search\nexport const noteSearches = pgTable('note_searches', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  noteId: uuid('note_id').references(() => notes.id, { onDelete: 'cascade' }),\n  searchVector: text('search_vector'), // For full-text search\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// File attachments table\nexport const attachments = pgTable('attachments', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  noteId: uuid('note_id').references(() => notes.id, { onDelete: 'cascade' }).notNull(),\n  filename: text('filename').notNull(),\n  originalName: text('original_name').notNull(),\n  size: text('size').notNull(), // File size in bytes\n  type: text('type').notNull(), // MIME type\n  url: text('url').notNull(), // Vercel Blob URL\n  content: text('content'), // Extracted text content for search\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  noteIdIdx: index('attachments_note_id_idx').on(table.noteId),\n  createdAtIdx: index('attachments_created_at_idx').on(table.createdAt),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  notes: many(notes),\n  sessions: many(sessions),\n  emailVerificationTokens: many(emailVerificationTokens),\n}));\n\nexport const sessionsRelations = relations(sessions, ({ one }) => ({\n  user: one(users, {\n    fields: [sessions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const emailVerificationTokensRelations = relations(emailVerificationTokens, ({ one }) => ({\n  user: one(users, {\n    fields: [emailVerificationTokens.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const notesRelations = relations(notes, ({ one, many }) => ({\n  user: one(users, {\n    fields: [notes.userId],\n    references: [users.id],\n  }),\n  searches: many(noteSearches),\n  attachments: many(attachments),\n}));\n\nexport const noteSearchesRelations = relations(noteSearches, ({ one }) => ({\n  note: one(notes, {\n    fields: [noteSearches.noteId],\n    references: [notes.id],\n  }),\n}));\n\nexport const attachmentsRelations = relations(attachments, ({ one }) => ({\n  note: one(notes, {\n    fields: [attachments.noteId],\n    references: [notes.id],\n  }),\n}));\n\n// User AI Settings table\nexport const userAISettings = pgTable('user_ai_settings', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  \n  // API Configuration\n  provider: varchar('provider', { length: 50 }).notNull().default('google'), // 'google', 'openai', 'anthropic'\n  apiKey: text('api_key'), // Encrypted API key\n  model: varchar('model', { length: 100 }).notNull().default('gemini-1.5-flash-latest'),\n  \n  // Usage Tracking\n  totalTokensUsed: integer('total_tokens_used').default(0).notNull(),\n  totalRequests: integer('total_requests').default(0).notNull(),\n  lastUsedAt: timestamp('last_used_at'),\n  \n  // Settings\n  enabledAnalyses: jsonb('enabled_analyses').$type<string[]>().default(['title', 'summary', 'key_points', 'categories', 'tags']),\n  analysisTimeout: integer('analysis_timeout').default(30000), // 30 seconds\n  cacheEnabled: boolean('cache_enabled').default(true),\n  cacheTTL: integer('cache_ttl').default(86400), // 24 hours in seconds\n  \n  // Metadata\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('user_ai_settings_user_id_idx').on(table.userId),\n  providerIdx: index('user_ai_settings_provider_idx').on(table.provider),\n  lastUsedIdx: index('user_ai_settings_last_used_idx').on(table.lastUsedAt),\n}));\n\n// Token Usage Log table for detailed tracking\nexport const tokenUsageLogs = pgTable('token_usage_logs', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  noteId: uuid('note_id'), // Optional reference to note\n  \n  // Request details\n  provider: varchar('provider', { length: 50 }).notNull(),\n  model: varchar('model', { length: 100 }).notNull(),\n  analysisType: varchar('analysis_type', { length: 50 }).notNull(),\n  \n  // Token usage\n  inputTokens: integer('input_tokens').default(0).notNull(),\n  outputTokens: integer('output_tokens').default(0).notNull(),\n  totalTokens: integer('total_tokens').default(0).notNull(),\n  \n  // Request metadata\n  requestDuration: integer('request_duration'), // milliseconds\n  success: boolean('success').default(true).notNull(),\n  errorMessage: text('error_message'),\n  \n  // Cost tracking (for future billing)\n  estimatedCost: integer('estimated_cost'), // in cents\n  \n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('token_usage_logs_user_id_idx').on(table.userId),\n  noteIdIdx: index('token_usage_logs_note_id_idx').on(table.noteId),\n  createdAtIdx: index('token_usage_logs_created_at_idx').on(table.createdAt),\n  providerIdx: index('token_usage_logs_provider_idx').on(table.provider),\n}));\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type Session = typeof sessions.$inferSelect;\nexport type NewSession = typeof sessions.$inferInsert;\nexport type EmailVerificationToken = typeof emailVerificationTokens.$inferSelect;\nexport type NewEmailVerificationToken = typeof emailVerificationTokens.$inferInsert;\nexport type Note = typeof notes.$inferSelect;\nexport type NewNote = typeof notes.$inferInsert;\nexport type NoteSearch = typeof noteSearches.$inferSelect;\nexport type NewNoteSearch = typeof noteSearches.$inferInsert;\nexport type Attachment = typeof attachments.$inferSelect;\nexport type NewAttachment = typeof attachments.$inferInsert;\nexport type UserAISettings = typeof userAISettings.$inferSelect;\nexport type NewUserAISettings = typeof userAISettings.$inferInsert;\nexport type TokenUsageLog = typeof tokenUsageLogs.$inferSelect;\nexport type NewTokenUsageLog = typeof tokenUsageLogs.$inferInsert;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 337, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/packages/db/src/index.ts"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { config } from 'dotenv';\nimport { resolve } from 'path';\nimport * as schema from './schema';\n\n// Load environment variables from the root .env.local file\nconfig({ path: resolve(__dirname, '../../../.env.local') });\n\nconst sql = neon(process.env.DATABASE_URL!);\nexport const db = drizzle(sql, { schema });\n\nexport * from './schema';\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,2DAA2D;AAC3D,IAAA,+GAAM,EAAC;IAAE,MAAM,IAAA,4GAAO,6DAAY;AAAuB;AAEzD,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;AAClC,MAAM,KAAK,IAAA,qKAAO,EAAC,KAAK;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/ai.ts"],"sourcesContent":["import { google } from '@ai-sdk/google';\nimport { generateText, generateObject } from 'ai';\nimport { z } from 'zod';\n\n// Initialize Gemini Flash model with explicit API key\nexport const geminiFlash = google('models/gemini-1.5-flash-latest', {\n  apiKey: process.env.GOOGLE_GENERATIVE_AI_API_KEY,\n});\n\n// Schema for note analysis\nconst NoteAnalysisSchema = z.object({\n  title: z.string(),\n  summary: z.string(),\n  tags: z.array(z.string()),\n  categories: z.array(z.string()),\n  sentiment: z.string(),\n  keyPoints: z.array(z.string()),\n});\n\n// Schema for search queries\nconst SearchQuerySchema = z.object({\n  intent: z.string(),\n  keywords: z.array(z.string()),\n  filters: z.object({\n    categories: z.array(z.string()).optional(),\n    tags: z.array(z.string()).optional(),\n    dateRange: z.string().optional(),\n  }),\n});\n\n/**\n * Analyze a note transcript and extract metadata\n */\nexport async function analyzeNote(transcript: string) {\n  const prompt = `You are an AI assistant that analyzes notes and extracts structured information.\n\nNote content: \"${transcript}\"\n\nPlease analyze this content and provide:\n1. A concise, descriptive title (not just the first few words)\n2. A brief summary that captures the main ideas\n3. 3-5 relevant tags/keywords\n4. Appropriate categories\n5. The overall sentiment\n6. Key points mentioned\n\nMake sure to actually analyze and summarize the content, not just repeat it.`;\n\n  try {\n    console.log('Calling AI analysis with prompt:', prompt.substring(0, 200) + '...');\n    const result = await generateObject({\n      model: geminiFlash,\n      schema: NoteAnalysisSchema,\n      prompt,\n    });\n\n    console.log('AI analysis successful:', result.object);\n    return result.object;\n  } catch (error) {\n    console.error('AI analysis failed, using fallback:', error);\n    \n    // Check if it's a quota exceeded error\n    const isQuotaExceeded = error instanceof Error && \n      (error.message.includes('quota') || \n       error.message.includes('RESOURCE_EXHAUSTED') ||\n       error.message.includes('429'));\n    \n    if (isQuotaExceeded) {\n      console.warn('AI API quota exceeded, using enhanced fallback analysis');\n    }\n    \n    // Enhanced fallback analysis\n    const words = transcript.split(' ').filter(word => word.length > 0);\n    const firstSentence = transcript.split(/[.!?]/)[0] || transcript;\n    \n    return {\n      title: words.slice(0, 6).join(' ') + (words.length > 6 ? '...' : ''),\n      summary: firstSentence.length > 150 ? firstSentence.substring(0, 150) + '...' : firstSentence,\n      tags: ['note', 'analysis'],\n      categories: ['general'],\n      sentiment: 'neutral',\n      keyPoints: words.length > 10 ? [words.slice(0, 10).join(' '), words.slice(10, 20).join(' ')].filter(Boolean) : [transcript],\n    };\n  }\n}\n\n/**\n * Generate search suggestions based on user query\n */\nexport async function generateSearchQuery(query: string) {\n  const prompt = `\nAnalyze this search query and provide structured search parameters:\n\nQuery: \"${query}\"\n\nPlease identify:\n- The user's intent\n- Key search keywords\n- Any category or tag filters mentioned\n- Date range preferences if any\n\nMake the search parameters specific and helpful.\n`;\n\n  try {\n    const result = await generateObject({\n      model: geminiFlash,\n      schema: SearchQuerySchema,\n      prompt,\n    });\n\n    return result.object;\n  } catch (error) {\n    console.error('Error generating search query:', error);\n    return {\n      intent: 'general_search',\n      keywords: query.split(' '),\n      filters: {},\n    };\n  }\n}\n\n/**\n * Generate a response to user questions about their notes\n */\nexport async function generateNoteResponse(question: string, context: string) {\n  const prompt = `\nBased on the following note content, answer the user's question:\n\nNote Content: \"${context}\"\n\nUser Question: \"${question}\"\n\nProvide a helpful, concise answer based on the note content.\n`;\n\n  try {\n    const result = await generateText({\n      model: geminiFlash,\n      prompt,\n    });\n\n    return result.text;\n  } catch (error) {\n    console.error('Error generating response:', error);\n    return 'I apologize, but I encountered an error processing your question.';\n  }\n}\n\n/**\n * Test AI connection and API key\n */\nexport async function testAIConnection(): Promise<boolean> {\n  try {\n    console.log('Testing AI connection with model:', geminiFlash);\n    console.log('API Key present:', !!process.env.GOOGLE_GENERATIVE_AI_API_KEY);\n    console.log('API Key length:', process.env.GOOGLE_GENERATIVE_AI_API_KEY?.length);\n    \n    const result = await generateText({\n      model: geminiFlash,\n      prompt: 'Say \"Hello\" if you can read this message.',\n    });\n\n    console.log('AI test result:', result.text);\n    return result.text.includes('Hello') || result.text.length > 0;\n  } catch (error) {\n    console.error('AI connection test failed:', error);\n    console.error('Error details:', {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined,\n    });\n    return false;\n  }\n}\n\n/**\n * Transcribe audio to text (placeholder for voice transcription)\n */\nexport async function transcribeAudio(): Promise<string> {\n  // This is a placeholder - in a real implementation, you'd use:\n  // - Web Speech API for browser-based transcription\n  // - Google Speech-to-Text API\n  // - OpenAI Whisper API\n  // For now, return a mock transcript\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"This is a mock transcript from the audio. In a real implementation, this would be the actual transcribed text from the user's voice recording.\");\n    }, 1000);\n  });\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 598, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/auth.ts"],"sourcesContent":["import { cookies } from 'next/headers';\nimport { db, users, sessions, emailVerificationTokens } from '@polynote/db';\nimport { eq, and, gt } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\nimport { randomBytes } from 'crypto';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  emailVerified: boolean;\n  avatar?: string;\n  preferences?: Record<string, unknown>;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Session {\n  id: string;\n  userId: string;\n  token: string;\n  expiresAt: Date;\n  createdAt: Date;\n}\n\n// Password hashing\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\n// Session management\nexport async function createSession(userId: string): Promise<Session> {\n  const token = randomBytes(32).toString('hex');\n  const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days\n\n  const [session] = await db.insert(sessions).values({\n    userId,\n    token,\n    expiresAt,\n  }).returning();\n\n  return session;\n}\n\nexport async function getSession(token: string): Promise<Session | null> {\n  const [session] = await db\n    .select()\n    .from(sessions)\n    .where(and(\n      eq(sessions.token, token),\n      gt(sessions.expiresAt, new Date())\n    ))\n    .limit(1);\n\n  return session || null;\n}\n\nexport async function deleteSession(token: string): Promise<void> {\n  await db.delete(sessions).where(eq(sessions.token, token));\n}\n\n// Email verification\nexport async function createEmailVerificationToken(userId: string): Promise<string> {\n  const token = randomBytes(32).toString('hex');\n  const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n\n  await db.insert(emailVerificationTokens).values({\n    userId,\n    token,\n    expiresAt,\n  });\n\n  return token;\n}\n\nexport async function verifyEmailToken(token: string): Promise<string | null> {\n  const [verificationToken] = await db\n    .select()\n    .from(emailVerificationTokens)\n    .where(and(\n      eq(emailVerificationTokens.token, token),\n      gt(emailVerificationTokens.expiresAt, new Date())\n    ))\n    .limit(1);\n\n  if (!verificationToken) {\n    return null;\n  }\n\n  // Mark user as verified\n  await db.update(users)\n    .set({ emailVerified: true })\n    .where(eq(users.id, verificationToken.userId));\n\n  // Delete the verification token\n  await db.delete(emailVerificationTokens)\n    .where(eq(emailVerificationTokens.token, token));\n\n  return verificationToken.userId;\n}\n\n// User management\nexport async function getUserByEmail(email: string): Promise<User | null> {\n  const [user] = await db\n    .select()\n    .from(users)\n    .where(eq(users.email, email))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function getUserByEmailWithPassword(email: string): Promise<(User & { passwordHash: string }) | null> {\n  const [user] = await db\n    .select({\n      id: users.id,\n      email: users.email,\n      name: users.name,\n      emailVerified: users.emailVerified,\n      avatar: users.avatar,\n      preferences: users.preferences,\n      createdAt: users.createdAt,\n      updatedAt: users.updatedAt,\n      passwordHash: users.passwordHash,\n    })\n    .from(users)\n    .where(eq(users.email, email))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function getUserById(id: string): Promise<User | null> {\n  const [user] = await db\n    .select()\n    .from(users)\n    .where(eq(users.id, id))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function createUser(email: string, name: string, password: string): Promise<User> {\n  const passwordHash = await hashPassword(password);\n  \n  const [user] = await db.insert(users).values({\n    email,\n    name,\n    passwordHash,\n  }).returning();\n\n  return user;\n}\n\n// Authentication helpers\nexport async function getCurrentUser(): Promise<User | null> {\n  const cookieStore = await cookies();\n  const sessionToken = cookieStore.get('session')?.value;\n  \n  if (!sessionToken) {\n    return null;\n  }\n\n  const session = await getSession(sessionToken);\n  if (!session) {\n    return null;\n  }\n\n  return getUserById(session.userId);\n}\n\nexport async function requireAuth(): Promise<User> {\n  const user = await getCurrentUser();\n  if (!user) {\n    throw new Error('Authentication required');\n  }\n  return user;\n}\n\n// Cookie helpers\nexport async function setSessionCookie(token: string) {\n  const cookieStore = await cookies();\n  cookieStore.set('session', token, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'lax',\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n    path: '/',\n  });\n}\n\nexport async function clearSessionCookie() {\n  const cookieStore = await cookies();\n  cookieStore.delete('session');\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 763, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/app/api/notes/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@polynote/db';\nimport { notes, attachments } from '@polynote/db';\nimport { analyzeNote } from '@/lib/ai';\nimport { getCurrentUser } from '@/lib/auth';\nimport { sql, desc, and, or, ilike, eq } from 'drizzle-orm';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Get the current user\n    const user = await getCurrentUser();\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const search = searchParams.get('search');\n    const category = searchParams.get('category');\n    const tag = searchParams.get('tag');\n\n    // Build conditions array for better query optimization\n    const conditions = [eq(notes.userId, user.id)]; // Only show user's own notes\n\n    // Optimize search with proper indexing\n    if (search) {\n      const searchTerm = `%${search}%`;\n      conditions.push(\n        or(\n          ilike(notes.title, searchTerm),\n          ilike(notes.content, searchTerm)\n        )\n      );\n    }\n\n    // Optimize category filter\n    if (category) {\n      conditions.push(sql`${notes.categories}::text LIKE ${`%${category}%`}`);\n    }\n\n    // Optimize tag filter\n    if (tag) {\n      conditions.push(sql`${notes.tags}::text LIKE ${`%${tag}%`}`);\n    }\n\n    // Build optimized query\n    let query = db.select().from(notes);\n    \n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    const result = await query\n      .orderBy(desc(notes.createdAt))\n      .limit(50); // Reduced limit for better performance\n\n    // Add optimized cache headers and compression\n    const response = NextResponse.json(result);\n    response.headers.set('Cache-Control', 'public, max-age=60, stale-while-revalidate=120');\n    response.headers.set('ETag', `\"notes-${Date.now()}\"`);\n    response.headers.set('Vary', 'Accept-Encoding');\n    \n    return response;\n  } catch (error) {\n    console.error('Error fetching notes:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch notes' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Get the current user\n    const user = await getCurrentUser();\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { title, content, transcript, tags, categories, attachments: uploadedFiles, aiAnalysis } = body;\n\n    if (!content?.trim()) {\n      return NextResponse.json(\n        { error: 'Content is required' },\n        { status: 400 }\n      );\n    }\n\n    // Use AI analysis from frontend if provided, otherwise do our own analysis\n    let finalAiAnalysis = aiAnalysis;\n    \n    if (!finalAiAnalysis && content.trim()) {\n      try {\n        const contentToAnalyze = transcript || content;\n        finalAiAnalysis = await analyzeNote(contentToAnalyze);\n      } catch (aiError) {\n        console.error('AI analysis failed:', aiError);\n      }\n    }\n\n    // Prepare the note data - prioritize AI-generated title and summary\n    const noteData = {\n      userId: user.id,\n      title: finalAiAnalysis?.title || title || 'Untitled Note',\n      content,\n      transcript: transcript || null,\n      summary: finalAiAnalysis?.summary || null,\n      tags: finalAiAnalysis?.tags || tags || [],\n      categories: finalAiAnalysis?.categories || categories || [],\n      metadata: finalAiAnalysis ? {\n        sentiment: finalAiAnalysis.sentiment,\n        keyPoints: finalAiAnalysis.keyPoints,\n      } : null,\n    };\n\n    // Save to database\n    const result = await db.insert(notes).values(noteData).returning();\n    const savedNote = result[0];\n\n    // Save file attachments if any\n    if (uploadedFiles && uploadedFiles.length > 0) {\n      const attachmentData = uploadedFiles.map((file: any) => ({\n        noteId: savedNote.id,\n        filename: file.filename,\n        originalName: file.originalName,\n        size: file.size.toString(),\n        type: file.type,\n        url: file.url,\n        content: file.content || null, // Store extracted content for search\n      }));\n\n      await db.insert(attachments).values(attachmentData);\n    }\n\n    return NextResponse.json(savedNote);\n  } catch (error) {\n    console.error('Error creating note:', error);\n    return NextResponse.json(\n      { error: 'Failed to create note' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}