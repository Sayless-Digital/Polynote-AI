"use strict";exports.id=4985,exports.ids=[4985],exports.modules={60277:(a,b,c)=>{function d(a,b){a.accDescr&&b.setAccDescription?.(a.accDescr),a.accTitle&&b.setAccTitle?.(a.accTitle),a.title&&b.setDiagramTitle?.(a.title)}c.d(b,{S:()=>d}),(0,c(83939).K2)(d,"populateCommonDb")},94985:(a,b,c)=>{c.d(b,{diagram:()=>ar});var d=c(60277),e=c(97816),f=c(53092),g=c(3927),h=c(83939),i=c(28777),j=c(75645),k={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},l=g.UI.gitGraph,m=(0,h.K2)(()=>(0,f.$t)({...l,...(0,g.zj)().gitGraph}),"getConfig"),n=new e.m(()=>{let a=m(),b=a.mainBranchName,c=a.mainBranchOrder;return{mainBranchName:b,commits:new Map,head:null,branchConfig:new Map([[b,{name:b,order:c}]]),branches:new Map([[b,null]]),currBranch:b,direction:"LR",seq:0,options:{}}});function o(){return(0,f.yT)({length:7})}function p(a,b){let c=Object.create(null);return a.reduce((a,d)=>{let e=b(d);return c[e]||(c[e]=!0,a.push(d)),a},[])}(0,h.K2)(o,"getID"),(0,h.K2)(p,"uniqBy");var q=(0,h.K2)(function(a){n.records.direction=a},"setDirection"),r=(0,h.K2)(function(a){h.Rm.debug("options str",a),a=(a=a?.trim())||"{}";try{n.records.options=JSON.parse(a)}catch(a){h.Rm.error("error while parsing gitGraph options",a.message)}},"setOptions"),s=(0,h.K2)(function(){return n.records.options},"getOptions"),t=(0,h.K2)(function(a){let b=a.msg,c=a.id,d=a.type,e=a.tags;h.Rm.info("commit",b,c,d,e),h.Rm.debug("Entering commit:",b,c,d,e);let f=m();c=g.Y2.sanitizeText(c,f),b=g.Y2.sanitizeText(b,f),e=e?.map(a=>g.Y2.sanitizeText(a,f));let i={id:c||n.records.seq+"-"+o(),message:b,seq:n.records.seq++,type:d??k.NORMAL,tags:e??[],parents:null==n.records.head?[]:[n.records.head.id],branch:n.records.currBranch};n.records.head=i,h.Rm.info("main branch",f.mainBranchName),n.records.commits.has(i.id)&&h.Rm.warn(`Commit ID ${i.id} already exists`),n.records.commits.set(i.id,i),n.records.branches.set(n.records.currBranch,i.id),h.Rm.debug("in pushCommit "+i.id)},"commit"),u=(0,h.K2)(function(a){let b=a.name,c=a.order;if(b=g.Y2.sanitizeText(b,m()),n.records.branches.has(b))throw Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${b}")`);n.records.branches.set(b,null!=n.records.head?n.records.head.id:null),n.records.branchConfig.set(b,{name:b,order:c}),x(b),h.Rm.debug("in createBranch")},"branch"),v=(0,h.K2)(a=>{let b=a.branch,c=a.id,d=a.type,e=a.tags,f=m();b=g.Y2.sanitizeText(b,f),c&&(c=g.Y2.sanitizeText(c,f));let i=n.records.branches.get(n.records.currBranch),j=n.records.branches.get(b),l=i?n.records.commits.get(i):void 0,p=j?n.records.commits.get(j):void 0;if(l&&p&&l.branch===b)throw Error(`Cannot merge branch '${b}' into itself.`);if(n.records.currBranch===b){let a=Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw a.hash={text:`merge ${b}`,token:`merge ${b}`,expected:["branch abc"]},a}if(void 0===l||!l){let a=Error(`Incorrect usage of "merge". Current branch (${n.records.currBranch})has no commits`);throw a.hash={text:`merge ${b}`,token:`merge ${b}`,expected:["commit"]},a}if(!n.records.branches.has(b)){let a=Error('Incorrect usage of "merge". Branch to be merged ('+b+") does not exist");throw a.hash={text:`merge ${b}`,token:`merge ${b}`,expected:[`branch ${b}`]},a}if(void 0===p||!p){let a=Error('Incorrect usage of "merge". Branch to be merged ('+b+") has no commits");throw a.hash={text:`merge ${b}`,token:`merge ${b}`,expected:['"commit"']},a}if(l===p){let a=Error('Incorrect usage of "merge". Both branches have same head');throw a.hash={text:`merge ${b}`,token:`merge ${b}`,expected:["branch abc"]},a}if(c&&n.records.commits.has(c)){let a=Error('Incorrect usage of "merge". Commit with id:'+c+" already exists, use different custom id");throw a.hash={text:`merge ${b} ${c} ${d} ${e?.join(" ")}`,token:`merge ${b} ${c} ${d} ${e?.join(" ")}`,expected:[`merge ${b} ${c}_UNIQUE ${d} ${e?.join(" ")}`]},a}let q={id:c||`${n.records.seq}-${o()}`,message:`merged branch ${b} into ${n.records.currBranch}`,seq:n.records.seq++,parents:null==n.records.head?[]:[n.records.head.id,j||""],branch:n.records.currBranch,type:k.MERGE,customType:d,customId:!!c,tags:e??[]};n.records.head=q,n.records.commits.set(q.id,q),n.records.branches.set(n.records.currBranch,q.id),h.Rm.debug(n.records.branches),h.Rm.debug("in mergeBranch")},"merge"),w=(0,h.K2)(function(a){let b=a.id,c=a.targetId,d=a.tags,e=a.parent;h.Rm.debug("Entering cherryPick:",b,c,d);let f=m();if(b=g.Y2.sanitizeText(b,f),c=g.Y2.sanitizeText(c,f),d=d?.map(a=>g.Y2.sanitizeText(a,f)),e=g.Y2.sanitizeText(e,f),!b||!n.records.commits.has(b)){let a=Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw a.hash={text:`cherryPick ${b} ${c}`,token:`cherryPick ${b} ${c}`,expected:["cherry-pick abc"]},a}let i=n.records.commits.get(b);if(void 0===i||!i)throw Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(e&&!(Array.isArray(i.parents)&&i.parents.includes(e)))throw Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");let j=i.branch;if(i.type===k.MERGE&&!e)throw Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!c||!n.records.commits.has(c)){if(j===n.records.currBranch){let a=Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw a.hash={text:`cherryPick ${b} ${c}`,token:`cherryPick ${b} ${c}`,expected:["cherry-pick abc"]},a}let a=n.records.branches.get(n.records.currBranch);if(void 0===a||!a){let a=Error(`Incorrect usage of "cherry-pick". Current branch (${n.records.currBranch})has no commits`);throw a.hash={text:`cherryPick ${b} ${c}`,token:`cherryPick ${b} ${c}`,expected:["cherry-pick abc"]},a}let f=n.records.commits.get(a);if(void 0===f||!f){let a=Error(`Incorrect usage of "cherry-pick". Current branch (${n.records.currBranch})has no commits`);throw a.hash={text:`cherryPick ${b} ${c}`,token:`cherryPick ${b} ${c}`,expected:["cherry-pick abc"]},a}let g={id:n.records.seq+"-"+o(),message:`cherry-picked ${i?.message} into ${n.records.currBranch}`,seq:n.records.seq++,parents:null==n.records.head?[]:[n.records.head.id,i.id],branch:n.records.currBranch,type:k.CHERRY_PICK,tags:d?d.filter(Boolean):[`cherry-pick:${i.id}${i.type===k.MERGE?`|parent:${e}`:""}`]};n.records.head=g,n.records.commits.set(g.id,g),n.records.branches.set(n.records.currBranch,g.id),h.Rm.debug(n.records.branches),h.Rm.debug("in cherryPick")}},"cherryPick"),x=(0,h.K2)(function(a){if(a=g.Y2.sanitizeText(a,m()),n.records.branches.has(a)){n.records.currBranch=a;let b=n.records.branches.get(n.records.currBranch);void 0!==b&&b?n.records.head=n.records.commits.get(b)??null:n.records.head=null}else{let b=Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${a}")`);throw b.hash={text:`checkout ${a}`,token:`checkout ${a}`,expected:[`branch ${a}`]},b}},"checkout");function y(a,b,c){let d=a.indexOf(b);-1===d?a.push(c):a.splice(d,1,c)}function z(a){let b=a.reduce((a,b)=>a.seq>b.seq?a:b,a[0]),c="";a.forEach(function(a){a===b?c+="	*":c+="	|"});let d=[c,b.id,b.seq];for(let a in n.records.branches)n.records.branches.get(a)===b.id&&d.push(a);if(h.Rm.debug(d.join(" ")),b.parents&&2==b.parents.length&&b.parents[0]&&b.parents[1]){let c=n.records.commits.get(b.parents[0]);y(a,b,c),b.parents[1]&&a.push(n.records.commits.get(b.parents[1]))}else if(0==b.parents.length)return;else if(b.parents[0]){let c=n.records.commits.get(b.parents[0]);y(a,b,c)}z(a=p(a,a=>a.id))}(0,h.K2)(y,"upsert"),(0,h.K2)(z,"prettyPrintCommitHistory");var A=(0,h.K2)(function(){h.Rm.debug(n.records.commits),z([F()[0]])},"prettyPrint"),B=(0,h.K2)(function(){n.reset(),(0,g.IU)()},"clear"),C=(0,h.K2)(function(){return[...n.records.branchConfig.values()].map((a,b)=>null!==a.order&&void 0!==a.order?a:{...a,order:parseFloat(`0.${b}`)}).sort((a,b)=>(a.order??0)-(b.order??0)).map(({name:a})=>({name:a}))},"getBranchesAsObjArray"),D=(0,h.K2)(function(){return n.records.branches},"getBranches"),E=(0,h.K2)(function(){return n.records.commits},"getCommits"),F=(0,h.K2)(function(){let a=[...n.records.commits.values()];return a.forEach(function(a){h.Rm.debug(a.id)}),a.sort((a,b)=>a.seq-b.seq),a},"getCommitsArray"),G={commitType:k,getConfig:m,setDirection:q,setOptions:r,getOptions:s,commit:t,branch:u,merge:v,cherryPick:w,checkout:x,prettyPrint:A,clear:B,getBranchesAsObjArray:C,getBranches:D,getCommits:E,getCommitsArray:F,getCurrentBranch:(0,h.K2)(function(){return n.records.currBranch},"getCurrentBranch"),getDirection:(0,h.K2)(function(){return n.records.direction},"getDirection"),getHead:(0,h.K2)(function(){return n.records.head},"getHead"),setAccTitle:g.SV,getAccTitle:g.iN,getAccDescription:g.m7,setAccDescription:g.EI,setDiagramTitle:g.ke,getDiagramTitle:g.ab},H=(0,h.K2)((a,b)=>{for(let c of((0,d.S)(a,b),a.dir&&b.setDirection(a.dir),a.statements))I(c,b)},"populate"),I=(0,h.K2)((a,b)=>{let c={Commit:(0,h.K2)(a=>b.commit(J(a)),"Commit"),Branch:(0,h.K2)(a=>b.branch(K(a)),"Branch"),Merge:(0,h.K2)(a=>b.merge(L(a)),"Merge"),Checkout:(0,h.K2)(a=>b.checkout(M(a)),"Checkout"),CherryPicking:(0,h.K2)(a=>b.cherryPick(N(a)),"CherryPicking")}[a.$type];c?c(a):h.Rm.error(`Unknown statement type: ${a.$type}`)},"parseStatement"),J=(0,h.K2)(a=>({id:a.id,msg:a.message??"",type:void 0!==a.type?k[a.type]:k.NORMAL,tags:a.tags??void 0}),"parseCommit"),K=(0,h.K2)(a=>({name:a.name,order:a.order??0}),"parseBranch"),L=(0,h.K2)(a=>({branch:a.branch,id:a.id??"",type:void 0!==a.type?k[a.type]:void 0,tags:a.tags??void 0}),"parseMerge"),M=(0,h.K2)(a=>a.branch,"parseCheckout"),N=(0,h.K2)(a=>({id:a.id,targetId:"",tags:a.tags?.length===0?void 0:a.tags,parent:a.parent}),"parseCherryPicking"),O={parse:(0,h.K2)(async a=>{let b=await (0,i.qg)("gitGraph",a);h.Rm.debug(b),H(b,G)},"parse")},P=(0,g.D7)(),Q=P?.gitGraph,R=new Map,S=new Map,T=new Map,U=[],V=0,W="LR",X=(0,h.K2)(()=>{R.clear(),S.clear(),T.clear(),V=0,U=[],W="LR"},"clear"),Y=(0,h.K2)(a=>{let b=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof a?a.split(/\\n|\n|<br\s*\/?>/gi):a).forEach(a=>{let c=document.createElementNS("http://www.w3.org/2000/svg","tspan");c.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),c.setAttribute("dy","1em"),c.setAttribute("x","0"),c.setAttribute("class","row"),c.textContent=a.trim(),b.appendChild(c)}),b},"drawText"),Z=(0,h.K2)(a=>{let b,c,d;return"BT"===W?(c=(0,h.K2)((a,b)=>a<=b,"comparisonFunc"),d=1/0):(c=(0,h.K2)((a,b)=>a>=b,"comparisonFunc"),d=0),a.forEach(a=>{let e="TB"===W||"BT"==W?S.get(a)?.y:S.get(a)?.x;void 0!==e&&c(e,d)&&(b=a,d=e)}),b},"findClosestParent"),$=(0,h.K2)(a=>{let b="",c=1/0;return a.forEach(a=>{let d=S.get(a).y;d<=c&&(b=a,c=d)}),b||void 0},"findClosestParentBT"),_=(0,h.K2)((a,b,c)=>{let d=c,e=c,f=[];a.forEach(a=>{let c=b.get(a);if(!c)throw Error(`Commit not found for key ${a}`);c.parents.length?e=Math.max(d=ab(c),e):f.push(c),ac(c,d)}),d=e,f.forEach(a=>{ad(a,d,c)}),a.forEach(a=>{let c=b.get(a);if(c?.parents.length){let a=$(c.parents);(d=S.get(a).y-40)<=e&&(e=d);let b=R.get(c.branch).pos,f=d-10;S.set(c.id,{x:b,y:f})}})},"setParallelBTPos"),aa=(0,h.K2)(a=>{let b=Z(a.parents.filter(a=>null!==a));if(!b)throw Error(`Closest parent not found for commit ${a.id}`);let c=S.get(b)?.y;if(void 0===c)throw Error(`Closest parent position not found for commit ${a.id}`);return c},"findClosestParentPos"),ab=(0,h.K2)(a=>aa(a)+40,"calculateCommitPosition"),ac=(0,h.K2)((a,b)=>{let c=R.get(a.branch);if(!c)throw Error(`Branch not found for commit ${a.id}`);let d=c.pos,e=b+10;return S.set(a.id,{x:d,y:e}),{x:d,y:e}},"setCommitPosition"),ad=(0,h.K2)((a,b,c)=>{let d=R.get(a.branch);if(!d)throw Error(`Branch not found for commit ${a.id}`);let e=d.pos;S.set(a.id,{x:e,y:b+c})},"setRootPosition"),ae=(0,h.K2)((a,b,c,d,e,f)=>{if(f===k.HIGHLIGHT)a.append("rect").attr("x",c.x-10).attr("y",c.y-10).attr("width",20).attr("height",20).attr("class",`commit ${b.id} commit-highlight${e%8} ${d}-outer`),a.append("rect").attr("x",c.x-6).attr("y",c.y-6).attr("width",12).attr("height",12).attr("class",`commit ${b.id} commit${e%8} ${d}-inner`);else if(f===k.CHERRY_PICK)a.append("circle").attr("cx",c.x).attr("cy",c.y).attr("r",10).attr("class",`commit ${b.id} ${d}`),a.append("circle").attr("cx",c.x-3).attr("cy",c.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${b.id} ${d}`),a.append("circle").attr("cx",c.x+3).attr("cy",c.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${b.id} ${d}`),a.append("line").attr("x1",c.x+3).attr("y1",c.y+1).attr("x2",c.x).attr("y2",c.y-5).attr("stroke","#fff").attr("class",`commit ${b.id} ${d}`),a.append("line").attr("x1",c.x-3).attr("y1",c.y+1).attr("x2",c.x).attr("y2",c.y-5).attr("stroke","#fff").attr("class",`commit ${b.id} ${d}`);else{let g=a.append("circle");if(g.attr("cx",c.x),g.attr("cy",c.y),g.attr("r",b.type===k.MERGE?9:10),g.attr("class",`commit ${b.id} commit${e%8}`),f===k.MERGE){let f=a.append("circle");f.attr("cx",c.x),f.attr("cy",c.y),f.attr("r",6),f.attr("class",`commit ${d} ${b.id} commit${e%8}`)}f===k.REVERSE&&a.append("path").attr("d",`M ${c.x-5},${c.y-5}L${c.x+5},${c.y+5}M${c.x-5},${c.y+5}L${c.x+5},${c.y-5}`).attr("class",`commit ${d} ${b.id} commit${e%8}`)}},"drawCommitBullet"),af=(0,h.K2)((a,b,c,d)=>{if(b.type!==k.CHERRY_PICK&&(b.customId&&b.type===k.MERGE||b.type!==k.MERGE)&&Q?.showCommitLabel){let e=a.append("g"),f=e.insert("rect").attr("class","commit-label-bkg"),g=e.append("text").attr("x",d).attr("y",c.y+25).attr("class","commit-label").text(b.id),h=g.node()?.getBBox();if(h&&(f.attr("x",c.posWithOffset-h.width/2-2).attr("y",c.y+13.5).attr("width",h.width+4).attr("height",h.height+4),"TB"===W||"BT"===W?(f.attr("x",c.x-(h.width+16+5)).attr("y",c.y-12),g.attr("x",c.x-(h.width+16)).attr("y",c.y+h.height-12)):g.attr("x",c.posWithOffset-h.width/2),Q.rotateCommitLabel))if("TB"===W||"BT"===W)g.attr("transform","rotate(-45, "+c.x+", "+c.y+")"),f.attr("transform","rotate(-45, "+c.x+", "+c.y+")");else{let a=-7.5-(h.width+10)/25*9.5,b=10+h.width/25*8.5;e.attr("transform","translate("+a+", "+b+") rotate(-45, "+d+", "+c.y+")")}}},"drawCommitLabel"),ag=(0,h.K2)((a,b,c,d)=>{if(b.tags.length>0){let e=0,f=0,g=0,h=[];for(let d of b.tags.reverse()){let b=a.insert("polygon"),i=a.append("circle"),j=a.append("text").attr("y",c.y-16-e).attr("class","tag-label").text(d),k=j.node()?.getBBox();if(!k)throw Error("Tag bbox not found");f=Math.max(f,k.width),g=Math.max(g,k.height),j.attr("x",c.posWithOffset-k.width/2),h.push({tag:j,hole:i,rect:b,yOffset:e}),e+=20}for(let{tag:a,hole:b,rect:e,yOffset:i}of h){let h=g/2,j=c.y-19.2-i;if(e.attr("class","tag-label-bkg").attr("points",`
      ${d-f/2-2},${j+2}  
      ${d-f/2-2},${j-2}
      ${c.posWithOffset-f/2-4},${j-h-2}
      ${c.posWithOffset+f/2+4},${j-h-2}
      ${c.posWithOffset+f/2+4},${j+h+2}
      ${c.posWithOffset-f/2-4},${j+h+2}`),b.attr("cy",j).attr("cx",d-f/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===W||"BT"===W){let g=d+i;e.attr("class","tag-label-bkg").attr("points",`
        ${c.x},${g+2}
        ${c.x},${g-2}
        ${c.x+10},${g-h-2}
        ${c.x+10+f+4},${g-h-2}
        ${c.x+10+f+4},${g+h+2}
        ${c.x+10},${g+h+2}`).attr("transform","translate(12,12) rotate(45, "+c.x+","+d+")"),b.attr("cx",c.x+2).attr("cy",g).attr("transform","translate(12,12) rotate(45, "+c.x+","+d+")"),a.attr("x",c.x+5).attr("y",g+3).attr("transform","translate(14,14) rotate(45, "+c.x+","+d+")")}}}},"drawCommitTags"),ah=(0,h.K2)(a=>{switch(a.customType??a.type){case k.NORMAL:return"commit-normal";case k.REVERSE:return"commit-reverse";case k.HIGHLIGHT:return"commit-highlight";case k.MERGE:return"commit-merge";case k.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),ai=(0,h.K2)((a,b,c,d)=>{let e={x:0,y:0};if(a.parents.length>0){let c=Z(a.parents);if(c){let f=d.get(c)??e;return"TB"===b?f.y+40:"BT"===b?(d.get(a.id)??e).y-40:f.x+40}}else if("TB"===b)return 30;else if("BT"===b)return(d.get(a.id)??e).y-40;return 0},"calculatePosition"),aj=(0,h.K2)((a,b,c)=>{let d="BT"===W&&c?b:b+10,e="TB"===W||"BT"===W?d:R.get(a.branch)?.pos,f="TB"===W||"BT"===W?R.get(a.branch)?.pos:d;if(void 0===f||void 0===e)throw Error(`Position were undefined for commit ${a.id}`);return{x:f,y:e,posWithOffset:d}},"getCommitPosition"),ak=(0,h.K2)((a,b,c)=>{if(!Q)throw Error("GitGraph config not found");let d=a.append("g").attr("class","commit-bullets"),e=a.append("g").attr("class","commit-labels"),f=30*("TB"===W||"BT"===W),g=[...b.keys()],i=Q?.parallelCommits??!1,j=g.sort((0,h.K2)((a,c)=>{let d=b.get(a)?.seq,e=b.get(c)?.seq;return void 0!==d&&void 0!==e?d-e:0},"sortKeys"));"BT"===W&&(i&&_(j,b,f),j=j.reverse()),j.forEach(a=>{let g=b.get(a);if(!g)throw Error(`Commit not found for key ${a}`);i&&(f=ai(g,W,f,S));let h=aj(g,f,i);if(c){let a=ah(g),b=g.customType??g.type,c=R.get(g.branch)?.index??0;ae(d,g,h,a,c,b),af(e,g,h,f),ag(e,g,h,f)}"TB"===W||"BT"===W?S.set(g.id,{x:h.x,y:h.posWithOffset}):S.set(g.id,{x:h.posWithOffset,y:h.y}),(f="BT"===W&&i?f+40:f+40+10)>V&&(V=f)})},"drawCommits"),al=(0,h.K2)((a,b,c,d,e)=>{let f=("TB"===W||"BT"===W?c.x<d.x:c.y<d.y)?b.branch:a.branch,g=(0,h.K2)(a=>a.branch===f,"isOnBranchToGetCurve"),i=(0,h.K2)(c=>c.seq>a.seq&&c.seq<b.seq,"isBetweenCommits");return[...e.values()].some(a=>i(a)&&g(a))},"shouldRerouteArrow"),am=(0,h.K2)((a,b,c=0)=>{let d=a+Math.abs(a-b)/2;if(c>5)return d;if(U.every(a=>Math.abs(a-d)>=10))return U.push(d),d;let e=Math.abs(a-b);return am(a,b-e/5,c+1)},"findLane"),an=(0,h.K2)((a,b,c,d)=>{let e,f=S.get(b.id),g=S.get(c.id);if(void 0===f||void 0===g)throw Error(`Commit positions not found for commits ${b.id} and ${c.id}`);let h=al(b,c,f,g,d),i="",j="",l=0,m=0,n=R.get(c.branch)?.index;if(c.type===k.MERGE&&b.id!==c.parents[0]&&(n=R.get(b.branch)?.index),h){i="A 10 10, 0, 0, 0,",j="A 10 10, 0, 0, 1,",l=10,m=10;let a=f.y<g.y?am(f.y,g.y):am(g.y,f.y),c=f.x<g.x?am(f.x,g.x):am(g.x,f.x);"TB"===W?f.x<g.x?e=`M ${f.x} ${f.y} L ${c-l} ${f.y} ${j} ${c} ${f.y+m} L ${c} ${g.y-l} ${i} ${c+m} ${g.y} L ${g.x} ${g.y}`:(n=R.get(b.branch)?.index,e=`M ${f.x} ${f.y} L ${c+l} ${f.y} ${i} ${c} ${f.y+m} L ${c} ${g.y-l} ${j} ${c-m} ${g.y} L ${g.x} ${g.y}`):"BT"===W?f.x<g.x?e=`M ${f.x} ${f.y} L ${c-l} ${f.y} ${i} ${c} ${f.y-m} L ${c} ${g.y+l} ${j} ${c+m} ${g.y} L ${g.x} ${g.y}`:(n=R.get(b.branch)?.index,e=`M ${f.x} ${f.y} L ${c+l} ${f.y} ${j} ${c} ${f.y-m} L ${c} ${g.y+l} ${i} ${c-m} ${g.y} L ${g.x} ${g.y}`):f.y<g.y?e=`M ${f.x} ${f.y} L ${f.x} ${a-l} ${i} ${f.x+m} ${a} L ${g.x-l} ${a} ${j} ${g.x} ${a+m} L ${g.x} ${g.y}`:(n=R.get(b.branch)?.index,e=`M ${f.x} ${f.y} L ${f.x} ${a+l} ${j} ${f.x+m} ${a} L ${g.x-l} ${a} ${i} ${g.x} ${a-m} L ${g.x} ${g.y}`)}else i="A 20 20, 0, 0, 0,",j="A 20 20, 0, 0, 1,",l=20,m=20,"TB"===W?(f.x<g.x&&(e=c.type===k.MERGE&&b.id!==c.parents[0]?`M ${f.x} ${f.y} L ${f.x} ${g.y-l} ${i} ${f.x+m} ${g.y} L ${g.x} ${g.y}`:`M ${f.x} ${f.y} L ${g.x-l} ${f.y} ${j} ${g.x} ${f.y+m} L ${g.x} ${g.y}`),f.x>g.x&&(i="A 20 20, 0, 0, 0,",j="A 20 20, 0, 0, 1,",l=20,m=20,e=c.type===k.MERGE&&b.id!==c.parents[0]?`M ${f.x} ${f.y} L ${f.x} ${g.y-l} ${j} ${f.x-m} ${g.y} L ${g.x} ${g.y}`:`M ${f.x} ${f.y} L ${g.x+l} ${f.y} ${i} ${g.x} ${f.y+m} L ${g.x} ${g.y}`),f.x===g.x&&(e=`M ${f.x} ${f.y} L ${g.x} ${g.y}`)):"BT"===W?(f.x<g.x&&(e=c.type===k.MERGE&&b.id!==c.parents[0]?`M ${f.x} ${f.y} L ${f.x} ${g.y+l} ${j} ${f.x+m} ${g.y} L ${g.x} ${g.y}`:`M ${f.x} ${f.y} L ${g.x-l} ${f.y} ${i} ${g.x} ${f.y-m} L ${g.x} ${g.y}`),f.x>g.x&&(i="A 20 20, 0, 0, 0,",j="A 20 20, 0, 0, 1,",l=20,m=20,e=c.type===k.MERGE&&b.id!==c.parents[0]?`M ${f.x} ${f.y} L ${f.x} ${g.y+l} ${i} ${f.x-m} ${g.y} L ${g.x} ${g.y}`:`M ${f.x} ${f.y} L ${g.x-l} ${f.y} ${i} ${g.x} ${f.y-m} L ${g.x} ${g.y}`),f.x===g.x&&(e=`M ${f.x} ${f.y} L ${g.x} ${g.y}`)):(f.y<g.y&&(e=c.type===k.MERGE&&b.id!==c.parents[0]?`M ${f.x} ${f.y} L ${g.x-l} ${f.y} ${j} ${g.x} ${f.y+m} L ${g.x} ${g.y}`:`M ${f.x} ${f.y} L ${f.x} ${g.y-l} ${i} ${f.x+m} ${g.y} L ${g.x} ${g.y}`),f.y>g.y&&(e=c.type===k.MERGE&&b.id!==c.parents[0]?`M ${f.x} ${f.y} L ${g.x-l} ${f.y} ${i} ${g.x} ${f.y-m} L ${g.x} ${g.y}`:`M ${f.x} ${f.y} L ${f.x} ${g.y+l} ${j} ${f.x+m} ${g.y} L ${g.x} ${g.y}`),f.y===g.y&&(e=`M ${f.x} ${f.y} L ${g.x} ${g.y}`));if(void 0===e)throw Error("Line definition not found");a.append("path").attr("d",e).attr("class","arrow arrow"+n%8)},"drawArrow"),ao=(0,h.K2)((a,b)=>{let c=a.append("g").attr("class","commit-arrows");[...b.keys()].forEach(a=>{let d=b.get(a);d.parents&&d.parents.length>0&&d.parents.forEach(a=>{an(c,b.get(a),d,b)})})},"drawArrows"),ap=(0,h.K2)((a,b)=>{let c=a.append("g");b.forEach((a,b)=>{let d=b%8,e=R.get(a.name)?.pos;if(void 0===e)throw Error(`Position not found for branch ${a.name}`);let f=c.append("line");f.attr("x1",0),f.attr("y1",e),f.attr("x2",V),f.attr("y2",e),f.attr("class","branch branch"+d),"TB"===W?(f.attr("y1",30),f.attr("x1",e),f.attr("y2",V),f.attr("x2",e)):"BT"===W&&(f.attr("y1",V),f.attr("x1",e),f.attr("y2",30),f.attr("x2",e)),U.push(e);let g=Y(a.name),h=c.insert("rect"),i=c.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+d);i.node().appendChild(g);let j=g.getBBox();h.attr("class","branchLabelBkg label"+d).attr("rx",4).attr("ry",4).attr("x",-j.width-4-30*(Q?.rotateCommitLabel===!0)).attr("y",-j.height/2+8).attr("width",j.width+18).attr("height",j.height+4),i.attr("transform","translate("+(-j.width-14-30*(Q?.rotateCommitLabel===!0))+", "+(e-j.height/2-1)+")"),"TB"===W?(h.attr("x",e-j.width/2-10).attr("y",0),i.attr("transform","translate("+(e-j.width/2-5)+", 0)")):"BT"===W?(h.attr("x",e-j.width/2-10).attr("y",V),i.attr("transform","translate("+(e-j.width/2-5)+", "+V+")")):h.attr("transform","translate(-19, "+(e-j.height/2)+")")})},"drawBranches"),aq=(0,h.K2)(function(a,b,c,d,e){return R.set(a,{pos:b,index:c}),b+=50+40*!!e+("TB"===W||"BT"===W?d.width/2:0)},"setBranchPosition"),ar={parser:O,db:G,renderer:{draw:(0,h.K2)(function(a,b,c,d){if(X(),h.Rm.debug("in gitgraph renderer",a+"\n","id:",b,c),!Q)throw Error("GitGraph config not found");let e=Q.rotateCommitLabel??!1,i=d.db;T=i.getCommits();let k=i.getBranchesAsObjArray();W=i.getDirection();let l=(0,j.Ltv)(`[id="${b}"]`),m=0;k.forEach((a,b)=>{let c=Y(a.name),d=l.append("g"),f=d.insert("g").attr("class","branchLabel"),g=f.insert("g").attr("class","label branch-label");g.node()?.appendChild(c);let h=c.getBBox();m=aq(a.name,m,b,h,e),g.remove(),f.remove(),d.remove()}),ak(l,T,!1),Q.showBranches&&ap(l,k),ao(l,T),ak(l,T,!0),f._K.insertTitle(l,"gitTitleText",Q.titleTopMargin??0,i.getDiagramTitle()),(0,g.mj)(void 0,l,Q.diagramPadding,Q.useMaxWidth)},"draw")},styles:(0,h.K2)(a=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(b=>`
        .branch-label${b} { fill: ${a["gitBranchLabel"+b]}; }
        .commit${b} { stroke: ${a["git"+b]}; fill: ${a["git"+b]}; }
        .commit-highlight${b} { stroke: ${a["gitInv"+b]}; fill: ${a["gitInv"+b]}; }
        .label${b}  { fill: ${a["git"+b]}; }
        .arrow${b} { stroke: ${a["git"+b]}; }
        `).join("\n")}

  .branch {
    stroke-width: 1;
    stroke: ${a.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${a.commitLabelFontSize}; fill: ${a.commitLabelColor};}
  .commit-label-bkg { font-size: ${a.commitLabelFontSize}; fill: ${a.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${a.tagLabelFontSize}; fill: ${a.tagLabelColor};}
  .tag-label-bkg { fill: ${a.tagLabelBackground}; stroke: ${a.tagLabelBorder}; }
  .tag-hole { fill: ${a.textColor}; }

  .commit-merge {
    stroke: ${a.primaryColor};
    fill: ${a.primaryColor};
  }
  .commit-reverse {
    stroke: ${a.primaryColor};
    fill: ${a.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${a.primaryColor};
    fill: ${a.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${a.textColor};
  }
`,"getStyles")}},97816:(a,b,c)=>{c.d(b,{m:()=>e});var d=c(83939),e=class{constructor(a){this.init=a,this.records=this.init()}static{(0,d.K2)(this,"ImperativeState")}reset(){this.records=this.init()}}}};