{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/packages/db/src/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, uuid, jsonb, index, boolean, varchar, integer } from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\n\n// Users table for authentication\nexport const users = pgTable('users', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  email: varchar('email', { length: 255 }).notNull().unique(),\n  name: text('name').notNull(),\n  passwordHash: text('password_hash').notNull(),\n  emailVerified: boolean('email_verified').default(false).notNull(),\n  avatar: text('avatar'), // URL to user avatar\n  preferences: jsonb('preferences').$type<Record<string, unknown>>(), // User preferences\n  resetToken: text('reset_token'), // Password reset token\n  resetTokenExpiry: timestamp('reset_token_expiry'), // Password reset token expiry\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  emailIdx: index('users_email_idx').on(table.email),\n  createdAtIdx: index('users_created_at_idx').on(table.createdAt),\n  resetTokenIdx: index('users_reset_token_idx').on(table.resetToken),\n}));\n\n// User sessions table for authentication\nexport const sessions = pgTable('sessions', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  token: text('token').notNull().unique(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('sessions_user_id_idx').on(table.userId),\n  tokenIdx: index('sessions_token_idx').on(table.token),\n  expiresAtIdx: index('sessions_expires_at_idx').on(table.expiresAt),\n}));\n\n// Email verification tokens table\nexport const emailVerificationTokens = pgTable('email_verification_tokens', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  token: text('token').notNull().unique(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('email_verification_tokens_user_id_idx').on(table.userId),\n  tokenIdx: index('email_verification_tokens_token_idx').on(table.token),\n  expiresAtIdx: index('email_verification_tokens_expires_at_idx').on(table.expiresAt),\n}));\n\n// Notes table - updated with user ownership\nexport const notes = pgTable('notes', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  title: text('title').notNull(),\n  content: text('content').notNull(),\n  transcript: text('transcript'), // Original voice transcript\n  summary: text('summary'), // AI-generated summary\n  tags: jsonb('tags').$type<string[]>(), // AI-generated tags\n  categories: jsonb('categories').$type<string[]>(), // AI-generated categories\n  metadata: jsonb('metadata').$type<Record<string, unknown>>(), // Additional AI metadata\n  isPublic: boolean('is_public').default(false).notNull(), // Allow sharing notes\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('notes_user_id_idx').on(table.userId),\n  titleIdx: index('notes_title_idx').on(table.title),\n  createdAtIdx: index('notes_created_at_idx').on(table.createdAt),\n  tagsIdx: index('notes_tags_idx').on(table.tags),\n  categoriesIdx: index('notes_categories_idx').on(table.categories),\n  isPublicIdx: index('notes_is_public_idx').on(table.isPublic),\n}));\n\n// Note searches table for full-text search\nexport const noteSearches = pgTable('note_searches', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  noteId: uuid('note_id').references(() => notes.id, { onDelete: 'cascade' }),\n  searchVector: text('search_vector'), // For full-text search\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// File attachments table\nexport const attachments = pgTable('attachments', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  noteId: uuid('note_id').references(() => notes.id, { onDelete: 'cascade' }).notNull(),\n  filename: text('filename').notNull(),\n  originalName: text('original_name').notNull(),\n  size: text('size').notNull(), // File size in bytes\n  type: text('type').notNull(), // MIME type\n  url: text('url').notNull(), // Vercel Blob URL\n  content: text('content'), // Extracted text content for search\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  noteIdIdx: index('attachments_note_id_idx').on(table.noteId),\n  createdAtIdx: index('attachments_created_at_idx').on(table.createdAt),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  notes: many(notes),\n  sessions: many(sessions),\n  emailVerificationTokens: many(emailVerificationTokens),\n}));\n\nexport const sessionsRelations = relations(sessions, ({ one }) => ({\n  user: one(users, {\n    fields: [sessions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const emailVerificationTokensRelations = relations(emailVerificationTokens, ({ one }) => ({\n  user: one(users, {\n    fields: [emailVerificationTokens.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const notesRelations = relations(notes, ({ one, many }) => ({\n  user: one(users, {\n    fields: [notes.userId],\n    references: [users.id],\n  }),\n  searches: many(noteSearches),\n  attachments: many(attachments),\n}));\n\nexport const noteSearchesRelations = relations(noteSearches, ({ one }) => ({\n  note: one(notes, {\n    fields: [noteSearches.noteId],\n    references: [notes.id],\n  }),\n}));\n\nexport const attachmentsRelations = relations(attachments, ({ one }) => ({\n  note: one(notes, {\n    fields: [attachments.noteId],\n    references: [notes.id],\n  }),\n}));\n\n// User AI Settings table\nexport const userAISettings = pgTable('user_ai_settings', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  \n  // API Configuration\n  provider: varchar('provider', { length: 50 }).notNull().default('google'), // 'google', 'openai', 'anthropic'\n  apiKey: text('api_key'), // Encrypted API key\n  model: varchar('model', { length: 100 }).notNull().default('gemini-1.5-flash-latest'),\n  \n  // Usage Tracking\n  totalTokensUsed: integer('total_tokens_used').default(0).notNull(),\n  totalRequests: integer('total_requests').default(0).notNull(),\n  lastUsedAt: timestamp('last_used_at'),\n  \n  // Settings\n  enabledAnalyses: jsonb('enabled_analyses').$type<string[]>().default(['title', 'summary', 'key_points', 'categories', 'tags']),\n  analysisTimeout: integer('analysis_timeout').default(30000), // 30 seconds\n  cacheEnabled: boolean('cache_enabled').default(true),\n  cacheTTL: integer('cache_ttl').default(86400), // 24 hours in seconds\n  \n  // Metadata\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('user_ai_settings_user_id_idx').on(table.userId),\n  providerIdx: index('user_ai_settings_provider_idx').on(table.provider),\n  lastUsedIdx: index('user_ai_settings_last_used_idx').on(table.lastUsedAt),\n}));\n\n// Token Usage Log table for detailed tracking\nexport const tokenUsageLogs = pgTable('token_usage_logs', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  noteId: uuid('note_id'), // Optional reference to note\n  \n  // Request details\n  provider: varchar('provider', { length: 50 }).notNull(),\n  model: varchar('model', { length: 100 }).notNull(),\n  analysisType: varchar('analysis_type', { length: 50 }).notNull(),\n  \n  // Token usage\n  inputTokens: integer('input_tokens').default(0).notNull(),\n  outputTokens: integer('output_tokens').default(0).notNull(),\n  totalTokens: integer('total_tokens').default(0).notNull(),\n  \n  // Request metadata\n  requestDuration: integer('request_duration'), // milliseconds\n  success: boolean('success').default(true).notNull(),\n  errorMessage: text('error_message'),\n  \n  // Cost tracking (for future billing)\n  estimatedCost: integer('estimated_cost'), // in cents\n  \n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('token_usage_logs_user_id_idx').on(table.userId),\n  noteIdIdx: index('token_usage_logs_note_id_idx').on(table.noteId),\n  createdAtIdx: index('token_usage_logs_created_at_idx').on(table.createdAt),\n  providerIdx: index('token_usage_logs_provider_idx').on(table.provider),\n}));\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type Session = typeof sessions.$inferSelect;\nexport type NewSession = typeof sessions.$inferInsert;\nexport type EmailVerificationToken = typeof emailVerificationTokens.$inferSelect;\nexport type NewEmailVerificationToken = typeof emailVerificationTokens.$inferInsert;\nexport type Note = typeof notes.$inferSelect;\nexport type NewNote = typeof notes.$inferInsert;\nexport type NoteSearch = typeof noteSearches.$inferSelect;\nexport type NewNoteSearch = typeof noteSearches.$inferInsert;\nexport type Attachment = typeof attachments.$inferSelect;\nexport type NewAttachment = typeof attachments.$inferInsert;\nexport type UserAISettings = typeof userAISettings.$inferSelect;\nexport type NewUserAISettings = typeof userAISettings.$inferInsert;\nexport type TokenUsageLog = typeof tokenUsageLogs.$inferSelect;\nexport type NewTokenUsageLog = typeof tokenUsageLogs.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAGO,MAAM,QAAQ,IAAA,kKAAO,EAAC,SAAS;IACpC,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,OAAO,IAAA,+KAAO,EAAC,SAAS;QAAE,QAAQ;IAAI,GAAG,OAAO,GAAG,MAAM;IACzD,MAAM,IAAA,yKAAI,EAAC,QAAQ,OAAO;IAC1B,cAAc,IAAA,yKAAI,EAAC,iBAAiB,OAAO;IAC3C,eAAe,IAAA,+KAAO,EAAC,kBAAkB,OAAO,CAAC,OAAO,OAAO;IAC/D,QAAQ,IAAA,yKAAI,EAAC;IACb,aAAa,IAAA,2KAAK,EAAC,eAAe,KAAK;IACvC,YAAY,IAAA,yKAAI,EAAC;IACjB,kBAAkB,IAAA,mLAAS,EAAC;IAC5B,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,UAAU,IAAA,kKAAK,EAAC,mBAAmB,EAAE,CAAC,MAAM,KAAK;QACjD,cAAc,IAAA,kKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,SAAS;QAC9D,eAAe,IAAA,kKAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,UAAU;IACnE,CAAC;AAGM,MAAM,WAAW,IAAA,kKAAO,EAAC,YAAY;IAC1C,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,yKAAI,EAAC,WAAW,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU,GAAG,OAAO;IACnF,OAAO,IAAA,yKAAI,EAAC,SAAS,OAAO,GAAG,MAAM;IACrC,WAAW,IAAA,mLAAS,EAAC,cAAc,OAAO;IAC1C,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,kKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,MAAM;QACxD,UAAU,IAAA,kKAAK,EAAC,sBAAsB,EAAE,CAAC,MAAM,KAAK;QACpD,cAAc,IAAA,kKAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,SAAS;IACnE,CAAC;AAGM,MAAM,0BAA0B,IAAA,kKAAO,EAAC,6BAA6B;IAC1E,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,yKAAI,EAAC,WAAW,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU,GAAG,OAAO;IACnF,OAAO,IAAA,yKAAI,EAAC,SAAS,OAAO,GAAG,MAAM;IACrC,WAAW,IAAA,mLAAS,EAAC,cAAc,OAAO;IAC1C,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,kKAAK,EAAC,yCAAyC,EAAE,CAAC,MAAM,MAAM;QACzE,UAAU,IAAA,kKAAK,EAAC,uCAAuC,EAAE,CAAC,MAAM,KAAK;QACrE,cAAc,IAAA,kKAAK,EAAC,4CAA4C,EAAE,CAAC,MAAM,SAAS;IACpF,CAAC;AAGM,MAAM,QAAQ,IAAA,kKAAO,EAAC,SAAS;IACpC,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,yKAAI,EAAC,WAAW,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU,GAAG,OAAO;IACnF,OAAO,IAAA,yKAAI,EAAC,SAAS,OAAO;IAC5B,SAAS,IAAA,yKAAI,EAAC,WAAW,OAAO;IAChC,YAAY,IAAA,yKAAI,EAAC;IACjB,SAAS,IAAA,yKAAI,EAAC;IACd,MAAM,IAAA,2KAAK,EAAC,QAAQ,KAAK;IACzB,YAAY,IAAA,2KAAK,EAAC,cAAc,KAAK;IACrC,UAAU,IAAA,2KAAK,EAAC,YAAY,KAAK;IACjC,UAAU,IAAA,+KAAO,EAAC,aAAa,OAAO,CAAC,OAAO,OAAO;IACrD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,kKAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,MAAM;QACrD,UAAU,IAAA,kKAAK,EAAC,mBAAmB,EAAE,CAAC,MAAM,KAAK;QACjD,cAAc,IAAA,kKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,SAAS;QAC9D,SAAS,IAAA,kKAAK,EAAC,kBAAkB,EAAE,CAAC,MAAM,IAAI;QAC9C,eAAe,IAAA,kKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,UAAU;QAChE,aAAa,IAAA,kKAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,QAAQ;IAC7D,CAAC;AAGM,MAAM,eAAe,IAAA,kKAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,yKAAI,EAAC,WAAW,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACzE,cAAc,IAAA,yKAAI,EAAC;IACnB,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,cAAc,IAAA,kKAAO,EAAC,eAAe;IAChD,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,yKAAI,EAAC,WAAW,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU,GAAG,OAAO;IACnF,UAAU,IAAA,yKAAI,EAAC,YAAY,OAAO;IAClC,cAAc,IAAA,yKAAI,EAAC,iBAAiB,OAAO;IAC3C,MAAM,IAAA,yKAAI,EAAC,QAAQ,OAAO;IAC1B,MAAM,IAAA,yKAAI,EAAC,QAAQ,OAAO;IAC1B,KAAK,IAAA,yKAAI,EAAC,OAAO,OAAO;IACxB,SAAS,IAAA,yKAAI,EAAC;IACd,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,kKAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,MAAM;QAC3D,cAAc,IAAA,kKAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,SAAS;IACtE,CAAC;AAGM,MAAM,iBAAiB,IAAA,0JAAS,EAAC,OAAO,CAAC,EAAE,IAAI,EAAE,GAAK,CAAC;QAC5D,OAAO,KAAK;QACZ,UAAU,KAAK;QACf,yBAAyB,KAAK;IAChC,CAAC;AAEM,MAAM,oBAAoB,IAAA,0JAAS,EAAC,UAAU,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACjE,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,SAAS,MAAM;aAAC;YACzB,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;IACF,CAAC;AAEM,MAAM,mCAAmC,IAAA,0JAAS,EAAC,yBAAyB,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QAC/F,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,wBAAwB,MAAM;aAAC;YACxC,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;IACF,CAAC;AAEM,MAAM,iBAAiB,IAAA,0JAAS,EAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAK,CAAC;QACjE,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,MAAM,MAAM;aAAC;YACtB,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;QACA,UAAU,KAAK;QACf,aAAa,KAAK;IACpB,CAAC;AAEM,MAAM,wBAAwB,IAAA,0JAAS,EAAC,cAAc,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACzE,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,aAAa,MAAM;aAAC;YAC7B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;IACF,CAAC;AAEM,MAAM,uBAAuB,IAAA,0JAAS,EAAC,aAAa,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACvE,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,YAAY,MAAM;aAAC;YAC5B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;IACF,CAAC;AAGM,MAAM,iBAAiB,IAAA,kKAAO,EAAC,oBAAoB;IACxD,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,yKAAI,EAAC,WAAW,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU,GAAG,OAAO;IAEnF,oBAAoB;IACpB,UAAU,IAAA,+KAAO,EAAC,YAAY;QAAE,QAAQ;IAAG,GAAG,OAAO,GAAG,OAAO,CAAC;IAChE,QAAQ,IAAA,yKAAI,EAAC;IACb,OAAO,IAAA,+KAAO,EAAC,SAAS;QAAE,QAAQ;IAAI,GAAG,OAAO,GAAG,OAAO,CAAC;IAE3D,iBAAiB;IACjB,iBAAiB,IAAA,+KAAO,EAAC,qBAAqB,OAAO,CAAC,GAAG,OAAO;IAChE,eAAe,IAAA,+KAAO,EAAC,kBAAkB,OAAO,CAAC,GAAG,OAAO;IAC3D,YAAY,IAAA,mLAAS,EAAC;IAEtB,WAAW;IACX,iBAAiB,IAAA,2KAAK,EAAC,oBAAoB,KAAK,GAAa,OAAO,CAAC;QAAC;QAAS;QAAW;QAAc;QAAc;KAAO;IAC7H,iBAAiB,IAAA,+KAAO,EAAC,oBAAoB,OAAO,CAAC;IACrD,cAAc,IAAA,+KAAO,EAAC,iBAAiB,OAAO,CAAC;IAC/C,UAAU,IAAA,+KAAO,EAAC,aAAa,OAAO,CAAC;IAEvC,WAAW;IACX,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,kKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,MAAM;QAChE,aAAa,IAAA,kKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,QAAQ;QACrE,aAAa,IAAA,kKAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,UAAU;IAC1E,CAAC;AAGM,MAAM,iBAAiB,IAAA,kKAAO,EAAC,oBAAoB;IACxD,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,yKAAI,EAAC,WAAW,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU,GAAG,OAAO;IACnF,QAAQ,IAAA,yKAAI,EAAC;IAEb,kBAAkB;IAClB,UAAU,IAAA,+KAAO,EAAC,YAAY;QAAE,QAAQ;IAAG,GAAG,OAAO;IACrD,OAAO,IAAA,+KAAO,EAAC,SAAS;QAAE,QAAQ;IAAI,GAAG,OAAO;IAChD,cAAc,IAAA,+KAAO,EAAC,iBAAiB;QAAE,QAAQ;IAAG,GAAG,OAAO;IAE9D,cAAc;IACd,aAAa,IAAA,+KAAO,EAAC,gBAAgB,OAAO,CAAC,GAAG,OAAO;IACvD,cAAc,IAAA,+KAAO,EAAC,iBAAiB,OAAO,CAAC,GAAG,OAAO;IACzD,aAAa,IAAA,+KAAO,EAAC,gBAAgB,OAAO,CAAC,GAAG,OAAO;IAEvD,mBAAmB;IACnB,iBAAiB,IAAA,+KAAO,EAAC;IACzB,SAAS,IAAA,+KAAO,EAAC,WAAW,OAAO,CAAC,MAAM,OAAO;IACjD,cAAc,IAAA,yKAAI,EAAC;IAEnB,qCAAqC;IACrC,eAAe,IAAA,+KAAO,EAAC;IAEvB,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,kKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,MAAM;QAChE,WAAW,IAAA,kKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,MAAM;QAChE,cAAc,IAAA,kKAAK,EAAC,mCAAmC,EAAE,CAAC,MAAM,SAAS;QACzE,aAAa,IAAA,kKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,QAAQ;IACvE,CAAC","debugId":null}},
    {"offset": {"line": 347, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/packages/db/src/index.ts"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { config } from 'dotenv';\nimport { resolve } from 'path';\nimport * as schema from './schema';\n\n// Load environment variables from the root .env.local file\nconfig({ path: resolve(__dirname, '../../../.env.local') });\n\nconst sql = neon(process.env.DATABASE_URL!);\nexport const db = drizzle(sql, { schema });\n\nexport * from './schema';\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,2DAA2D;AAC3D,IAAA,+GAAM,EAAC;IAAE,MAAM,IAAA,4GAAO,6DAAY;AAAuB;AAEzD,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;AAClC,MAAM,KAAK,IAAA,qKAAO,EAAC,KAAK;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 386, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/ai-providers.ts"],"sourcesContent":["// Client-safe AI providers configuration\n// This file contains no server-side dependencies and can be safely imported in client components\n\nexport const AI_PROVIDERS = {\n  google: {\n    name: 'Google Gemini',\n    models: [\n      { id: 'gemini-2.0-flash-lite', name: 'Gemini 2.0 Flash Lite', costPer1kTokens: 0.0375 },\n      { id: 'gemini-1.5-flash-latest', name: 'Gemini 1.5 Flash (Latest)', costPer1kTokens: 0.075 },\n      { id: 'gemini-1.5-pro-latest', name: 'Gemini 1.5 Pro (Latest)', costPer1kTokens: 1.25 },\n      { id: 'gemini-1.0-pro', name: 'Gemini 1.0 Pro', costPer1kTokens: 0.5 },\n    ],\n    apiKeyUrl: 'https://makersuite.google.com/app/apikey',\n    documentation: 'https://ai.google.dev/gemini-api/docs',\n  },\n  openai: {\n    name: 'OpenAI',\n    models: [\n      { id: 'gpt-4o', name: 'GPT-4o', costPer1kTokens: 5.0 },\n      { id: 'gpt-4o-mini', name: 'GPT-4o Mini', costPer1kTokens: 0.15 },\n      { id: 'gpt-4-turbo', name: 'GPT-4 Turbo', costPer1kTokens: 10.0 },\n      { id: 'gpt-3.5-turbo', name: 'GPT-3.5 Turbo', costPer1kTokens: 0.5 },\n    ],\n    apiKeyUrl: 'https://platform.openai.com/api-keys',\n    documentation: 'https://platform.openai.com/docs',\n  },\n  anthropic: {\n    name: 'Anthropic Claude',\n    models: [\n      { id: 'claude-3-5-sonnet-20241022', name: 'Claude 3.5 Sonnet', costPer1kTokens: 3.0 },\n      { id: 'claude-3-5-haiku-20241022', name: 'Claude 3.5 Haiku', costPer1kTokens: 0.8 },\n      { id: 'claude-3-opus-20240229', name: 'Claude 3 Opus', costPer1kTokens: 15.0 },\n    ],\n    apiKeyUrl: 'https://console.anthropic.com/',\n    documentation: 'https://docs.anthropic.com/',\n  },\n  'ai-gateway': {\n    name: 'Vercel AI Gateway',\n    models: [\n      // Google models\n      { id: 'google/gemini-2.0-flash-lite', name: 'Google Gemini 2.0 Flash Lite', costPer1kTokens: 0.0375 },\n      { id: 'google/gemini-1.5-flash-latest', name: 'Google Gemini 1.5 Flash', costPer1kTokens: 0.075 },\n      { id: 'google/gemini-1.5-pro-latest', name: 'Google Gemini 1.5 Pro', costPer1kTokens: 1.25 },\n      { id: 'google/gemini-1.0-pro', name: 'Google Gemini 1.0 Pro', costPer1kTokens: 0.5 },\n      \n      // OpenAI models\n      { id: 'openai/gpt-4o', name: 'OpenAI GPT-4o', costPer1kTokens: 5.0 },\n      { id: 'openai/gpt-4o-mini', name: 'OpenAI GPT-4o Mini', costPer1kTokens: 0.15 },\n      { id: 'openai/gpt-4-turbo', name: 'OpenAI GPT-4 Turbo', costPer1kTokens: 10.0 },\n      { id: 'openai/gpt-4', name: 'OpenAI GPT-4', costPer1kTokens: 30.0 },\n      { id: 'openai/gpt-3.5-turbo', name: 'OpenAI GPT-3.5 Turbo', costPer1kTokens: 0.5 },\n      { id: 'openai/o1-preview', name: 'OpenAI o1 Preview', costPer1kTokens: 15.0 },\n      { id: 'openai/o1-mini', name: 'OpenAI o1 Mini', costPer1kTokens: 3.0 },\n      \n      // Anthropic models\n      { id: 'anthropic/claude-3-5-sonnet-20241022', name: 'Anthropic Claude 3.5 Sonnet', costPer1kTokens: 3.0 },\n      { id: 'anthropic/claude-sonnet-4', name: 'Anthropic Claude Sonnet 4', costPer1kTokens: 3.0 },\n      { id: 'anthropic/claude-3-5-haiku-20241022', name: 'Anthropic Claude 3.5 Haiku', costPer1kTokens: 0.8 },\n      { id: 'anthropic/claude-3-opus-20240229', name: 'Anthropic Claude 3 Opus', costPer1kTokens: 15.0 },\n      \n      // xAI models\n      { id: 'xai/grok-beta', name: 'xAI Grok Beta', costPer1kTokens: 0.5 },\n      { id: 'xai/grok-4', name: 'xAI Grok 4', costPer1kTokens: 0.5 },\n      \n      // Cohere models\n      { id: 'cohere/command', name: 'Cohere Command', costPer1kTokens: 1.0 },\n      { id: 'cohere/command-light', name: 'Cohere Command Light', costPer1kTokens: 0.5 },\n      \n      // Mistral models\n      { id: 'mistral/mistral-large', name: 'Mistral Large', costPer1kTokens: 2.0 },\n      { id: 'mistral/mistral-medium', name: 'Mistral Medium', costPer1kTokens: 1.0 },\n      { id: 'mistral/mistral-small', name: 'Mistral Small', costPer1kTokens: 0.5 },\n      \n      // Perplexity models\n      { id: 'perplexity/llama-3.1-sonar-large-128k-online', name: 'Perplexity Llama 3.1 Sonar Large', costPer1kTokens: 1.0 },\n      { id: 'perplexity/llama-3.1-sonar-small-128k-online', name: 'Perplexity Llama 3.1 Sonar Small', costPer1kTokens: 0.5 },\n      \n      // DeepSeek models\n      { id: 'deepseek/deepseek-chat', name: 'DeepSeek Chat', costPer1kTokens: 0.14 },\n      { id: 'deepseek/deepseek-coder', name: 'DeepSeek Coder', costPer1kTokens: 0.14 },\n    ],\n    apiKeyUrl: 'https://vercel.com/ai-gateway',\n    documentation: 'https://vercel.com/docs/ai-gateway',\n    isGateway: true,\n  },\n} as const;\n\nexport type AIProvider = keyof typeof AI_PROVIDERS;\nexport type AIModel = typeof AI_PROVIDERS[AIProvider]['models'][number];\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 622, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/ai-config.ts"],"sourcesContent":["import { db } from '@polynote/db';\nimport { userAISettings, tokenUsageLogs, UserAISettings, NewTokenUsageLog } from '@polynote/db';\nimport { eq, and, gte } from 'drizzle-orm';\nimport crypto from 'crypto';\nimport { AI_PROVIDERS } from './ai-providers';\n\n// Type for decrypted user settings\nexport interface DecryptedUserAISettings extends Omit<UserAISettings, 'apiKey'> {\n  apiKey: string;\n}\n\n// Encryption key for API keys (in production, use a proper key management system)\nconst ENCRYPTION_KEY = process.env.API_KEY_ENCRYPTION_KEY || 'default-encryption-key-change-in-production';\nconst ALGORITHM = 'aes-256-gcm';\n\n// Derive key from password for AES-256-GCM\nfunction getKey(): Buffer {\n  return crypto.scryptSync(ENCRYPTION_KEY, 'salt', 32);\n}\n\n/**\n * Encrypt API key for storage\n */\nfunction encryptApiKey(apiKey: string): string {\n  const iv = crypto.randomBytes(16);\n  const key = getKey();\n  const cipher = crypto.createCipheriv(ALGORITHM, key, iv);\n\n  let encrypted = cipher.update(apiKey, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n\n  const authTag = cipher.getAuthTag();\n  return iv.toString('hex') + ':' + encrypted + ':' + authTag.toString('hex');\n}\n\n/**\n * Decrypt API key for use (supports both old and new formats)\n */\nfunction decryptApiKey(encryptedApiKey: string): string {\n  const parts = encryptedApiKey.split(':');\n\n  // Handle new format (3 parts: iv:encrypted:authTag)\n  if (parts.length === 3) {\n    const iv = Buffer.from(parts[0], 'hex');\n    const encrypted = parts[1];\n    const authTag = Buffer.from(parts[2], 'hex');\n    const key = getKey();\n\n    const decipher = crypto.createDecipheriv(ALGORITHM, key, iv);\n    decipher.setAuthTag(authTag);\n\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    return decrypted;\n  }\n\n  // Handle old format (2 parts: iv:encrypted) for backward compatibility\n  if (parts.length === 2) {\n    const iv = Buffer.from(parts[0], 'hex');\n    const encrypted = parts[1];\n    const decipher = crypto.createDecipher(ALGORITHM, Buffer.from(ENCRYPTION_KEY));\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    return decrypted;\n  }\n\n  throw new Error('Invalid encrypted API key format');\n}\n\n/**\n * Get user's AI settings\n */\nexport async function getUserAISettings(userId: string): Promise<DecryptedUserAISettings | null> {\n  try {\n    const [settings] = await db\n      .select()\n      .from(userAISettings)\n      .where(eq(userAISettings.userId, userId))\n      .limit(1);\n\n    if (settings && settings.apiKey) {\n      // Decrypt the API key\n      settings.apiKey = decryptApiKey(settings.apiKey);\n    }\n\n    return settings || null;\n  } catch (error) {\n    console.error('Error getting user AI settings:', error);\n    return null;\n  }\n}\n\n/**\n * Create or update user's AI settings\n */\nexport async function upsertUserAISettings(\n  userId: string,\n  settings: {\n    provider?: string;\n    apiKey?: string;\n    model?: string;\n    enabledAnalyses?: string[];\n    analysisTimeout?: number;\n    cacheEnabled?: boolean;\n    cacheTTL?: number;\n  }\n): Promise<DecryptedUserAISettings | null> {\n  try {\n    const existingSettings = await getUserAISettings(userId);\n    \n    const settingsData = {\n      userId,\n      provider: settings.provider || 'google',\n      apiKey: settings.apiKey ? encryptApiKey(settings.apiKey) : existingSettings?.apiKey,\n      model: settings.model || 'gemini-1.5-flash-latest',\n      enabledAnalyses: settings.enabledAnalyses || ['title', 'summary', 'key_points', 'categories', 'tags'],\n      analysisTimeout: settings.analysisTimeout || 30000,\n      cacheEnabled: settings.cacheEnabled !== undefined ? settings.cacheEnabled : true,\n      cacheTTL: settings.cacheTTL || 86400,\n      updatedAt: new Date(),\n    };\n\n    if (existingSettings) {\n      const [updated] = await db\n        .update(userAISettings)\n        .set(settingsData)\n        .where(eq(userAISettings.userId, userId))\n        .returning();\n      \n      if (updated && updated.apiKey) {\n        updated.apiKey = decryptApiKey(updated.apiKey);\n      }\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(userAISettings)\n        .values(settingsData)\n        .returning();\n      \n      if (created && created.apiKey) {\n        created.apiKey = decryptApiKey(created.apiKey);\n      }\n      return created;\n    }\n  } catch (error) {\n    console.error('Error upserting user AI settings:', error);\n    return null;\n  }\n}\n\n/**\n * Log token usage\n */\nexport async function logTokenUsage(\n  userId: string,\n  usage: {\n    noteId?: string;\n    provider: string;\n    model: string;\n    analysisType: string;\n    inputTokens: number;\n    outputTokens: number;\n    totalTokens: number;\n    requestDuration?: number;\n    success: boolean;\n    errorMessage?: string;\n    estimatedCost?: number;\n  }\n): Promise<void> {\n  try {\n    const logData: NewTokenUsageLog = {\n      userId,\n      noteId: usage.noteId,\n      provider: usage.provider,\n      model: usage.model,\n      analysisType: usage.analysisType,\n      inputTokens: usage.inputTokens,\n      outputTokens: usage.outputTokens,\n      totalTokens: usage.totalTokens,\n      requestDuration: usage.requestDuration,\n      success: usage.success,\n      errorMessage: usage.errorMessage,\n      estimatedCost: usage.estimatedCost,\n    };\n\n    await db.insert(tokenUsageLogs).values(logData);\n\n    // Update user's total usage\n    if (usage.success) {\n      await db\n        .update(userAISettings)\n        .set({\n          totalTokensUsed: db.sql`${userAISettings.totalTokensUsed} + ${usage.totalTokens}`,\n          totalRequests: db.sql`${userAISettings.totalRequests} + 1`,\n          lastUsedAt: new Date(),\n        })\n        .where(eq(userAISettings.userId, userId));\n    }\n  } catch (error) {\n    console.error('Error logging token usage:', error);\n  }\n}\n\n/**\n * Get user's token usage statistics\n */\nexport async function getUserTokenUsage(userId: string, days: number = 30) {\n  try {\n    const since = new Date();\n    since.setDate(since.getDate() - days);\n\n    const usage = await db\n      .select()\n      .from(tokenUsageLogs)\n      .where(\n        and(\n          eq(tokenUsageLogs.userId, userId),\n          gte(tokenUsageLogs.createdAt, since)\n        )\n      );\n\n    const stats = {\n      totalRequests: usage.length,\n      totalTokens: usage.reduce((sum, log) => sum + log.totalTokens, 0),\n      totalInputTokens: usage.reduce((sum, log) => sum + log.inputTokens, 0),\n      totalOutputTokens: usage.reduce((sum, log) => sum + log.outputTokens, 0),\n      successfulRequests: usage.filter(log => log.success).length,\n      failedRequests: usage.filter(log => !log.success).length,\n      averageRequestDuration: usage.length > 0 ? usage.reduce((sum, log) => sum + (log.requestDuration || 0), 0) / usage.length : 0,\n      estimatedTotalCost: usage.reduce((sum, log) => sum + (log.estimatedCost || 0), 0) / 100, // Convert from cents to dollars\n      byProvider: {} as Record<string, any>,\n      byModel: {} as Record<string, any>,\n      byAnalysisType: {} as Record<string, any>,\n    };\n\n    // Group by provider\n    usage.forEach(log => {\n      if (!stats.byProvider[log.provider]) {\n        stats.byProvider[log.provider] = { requests: 0, tokens: 0, cost: 0 };\n      }\n      stats.byProvider[log.provider].requests++;\n      stats.byProvider[log.provider].tokens += log.totalTokens;\n      stats.byProvider[log.provider].cost += (log.estimatedCost || 0) / 100; // Convert from cents to dollars\n    });\n\n    // Group by model\n    usage.forEach(log => {\n      if (!stats.byModel[log.model]) {\n        stats.byModel[log.model] = { requests: 0, tokens: 0, cost: 0 };\n      }\n      stats.byModel[log.model].requests++;\n      stats.byModel[log.model].tokens += log.totalTokens;\n      stats.byModel[log.model].cost += (log.estimatedCost || 0) / 100; // Convert from cents to dollars\n    });\n\n    // Group by analysis type\n    usage.forEach(log => {\n      if (!stats.byAnalysisType[log.analysisType]) {\n        stats.byAnalysisType[log.analysisType] = { requests: 0, tokens: 0, cost: 0 };\n      }\n      stats.byAnalysisType[log.analysisType].requests++;\n      stats.byAnalysisType[log.analysisType].tokens += log.totalTokens;\n      stats.byAnalysisType[log.analysisType].cost += (log.estimatedCost || 0) / 100; // Convert from cents to dollars\n    });\n\n    return stats;\n  } catch (error) {\n    console.error('Error getting user token usage:', error);\n    return null;\n  }\n}\n\n\n/**\n * Estimate cost for token usage\n */\nexport function estimateCost(provider: string, model: string, tokens: number): number {\n  const providerInfo = AI_PROVIDERS[provider as keyof typeof AI_PROVIDERS];\n  if (!providerInfo) return 0;\n\n  const modelInfo = providerInfo.models.find(m => m.id === model);\n  if (!modelInfo) return 0;\n\n  // Return cost in cents for storage\n  return Math.round((tokens / 1000) * modelInfo.costPer1kTokens * 100);\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 851, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/analysis/services/BaseAnalysisService.ts"],"sourcesContent":["import { google } from '@ai-sdk/google';\nimport { AnalysisResult, AnalysisType } from '../types';\nimport { getUserAISettings, logTokenUsage, DecryptedUserAISettings } from '@/lib/ai-config';\n\nexport abstract class BaseAnalysisService {\n  protected model: any;\n  protected userSettings: DecryptedUserAISettings | null = null;\n\n  abstract readonly type: AnalysisType;\n\n  async initialize(userId: string) {\n    console.log(`[${this.type.toUpperCase()}] Initializing service for user:`, userId);\n    \n    // Only try to get user settings if userId is not 'default'\n    if (userId !== 'default') {\n      this.userSettings = await getUserAISettings(userId);\n      console.log(`[${this.type.toUpperCase()}] User settings:`, {\n        hasSettings: !!this.userSettings,\n        provider: this.userSettings?.provider,\n        model: this.userSettings?.model,\n        hasApiKey: !!this.userSettings?.apiKey\n      });\n    }\n    \n    if (this.userSettings?.provider === 'google' && this.userSettings?.apiKey) {\n      console.log(`[${this.type.toUpperCase()}] Using user's Google API key with model:`, this.userSettings.model);\n      this.model = google(this.userSettings.model, {\n        apiKey: this.userSettings.apiKey,\n      });\n    } else {\n      // Fallback to environment variable\n      console.log(`[${this.type.toUpperCase()}] Using environment variable for Google API key`);\n      console.log(`[${this.type.toUpperCase()}] Environment API key present:`, !!process.env.GOOGLE_GENERATIVE_AI_API_KEY);\n      this.model = google('models/gemini-1.5-flash-latest', {\n        apiKey: process.env.GOOGLE_GENERATIVE_AI_API_KEY,\n      });\n    }\n  }\n  abstract readonly priority: number;\n  abstract readonly timeout: number;\n\n  /**\n   * Perform the analysis\n   */\n  abstract analyze(content: string, context?: Record<string, unknown>, userId?: string): Promise<AnalysisResult>;\n\n  /**\n   * Validate the content before analysis\n   */\n  protected validateContent(content: string): boolean {\n    if (!content || content.trim().length < 10) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Create a base analysis result\n   */\n  protected createBaseResult(\n    noteId: string,\n    status: AnalysisResult['status'],\n    result?: Record<string, unknown>,\n    error?: string,\n    processingTime?: number\n  ): AnalysisResult {\n    return {\n      id: `${noteId}_${this.type}_${Date.now()}`,\n      noteId,\n      type: this.type,\n      status,\n      result,\n      error,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      processingTime,\n    };\n  }\n\n  /**\n   * Execute analysis with timeout and error handling\n   */\n  protected async executeWithTimeout<T>(\n    operation: () => Promise<T>,\n    timeoutMs: number = this.timeout\n  ): Promise<T> {\n    return Promise.race([\n      operation(),\n      new Promise<never>((_, reject) =>\n        setTimeout(() => reject(new Error(`Analysis timeout after ${timeoutMs}ms`)), timeoutMs)\n      ),\n    ]);\n  }\n\n  /**\n   * Execute analysis with retry logic and quota detection\n   */\n  protected async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = 1\n  ): Promise<T> {\n    let lastError: Error | null = null;\n    \n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error('Unknown error');\n        \n        // Check if it's a quota exceeded error - don't retry\n        const isQuotaExceeded = lastError.message.includes('quota') || \n          lastError.message.includes('RESOURCE_EXHAUSTED') ||\n          lastError.message.includes('429') ||\n          lastError.message.includes('exceeded');\n        \n        if (isQuotaExceeded) {\n          console.log(`[${this.type.toUpperCase()}] Quota exceeded detected, not retrying`);\n          throw lastError;\n        }\n        \n        // If this is the last attempt, throw the error\n        if (attempt === maxRetries) {\n          throw lastError;\n        }\n        \n        console.log(`[${this.type.toUpperCase()}] Attempt ${attempt + 1} failed, retrying...`);\n        // Small delay before retry\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n    \n    throw lastError || new Error('Max retries exceeded');\n  }\n\n  /**\n   * Log analysis metrics\n   */\n  protected async logMetrics(\n    noteId: string,\n    processingTime: number,\n    success: boolean,\n    error?: string,\n    userId?: string,\n    inputTokens?: number,\n    outputTokens?: number\n  ): Promise<void> {\n    console.log(`[${this.type.toUpperCase()}] Analysis completed:`, {\n      noteId,\n      processingTime: `${processingTime}ms`,\n      success,\n      error,\n      inputTokens,\n      outputTokens,\n      timestamp: new Date().toISOString(),\n    });\n\n    // Log token usage if we have user settings and userId\n    if (this.userSettings && userId) {\n      // Use actual token data if available, otherwise estimate\n      const actualInputTokens = inputTokens !== undefined ? inputTokens : 0;\n      const actualOutputTokens = outputTokens !== undefined ? outputTokens : 0;\n      \n      await logTokenUsage(userId, {\n        noteId,\n        provider: this.userSettings.provider,\n        model: this.userSettings.model,\n        analysisType: this.type,\n        inputTokens: actualInputTokens,\n        outputTokens: actualOutputTokens,\n        totalTokens: actualInputTokens + actualOutputTokens,\n        requestDuration: processingTime,\n        success,\n        errorMessage: error,\n      });\n    }\n  }\n\n  /**\n   * Estimate input tokens (rough approximation)\n   */\n  protected estimateInputTokens(text: string): number {\n    return Math.ceil(text.length / 4); // Rough estimate: 4 characters per token\n  }\n\n  /**\n   * Estimate output tokens (rough approximation)\n   */\n  protected estimateOutputTokens(result: Record<string, unknown>): number {\n    const resultText = JSON.stringify(result);\n    return Math.ceil(resultText.length / 4);\n  }\n\n  /**\n   * Get analysis priority (lower number = higher priority)\n   */\n  getPriority(): number {\n    return this.priority;\n  }\n\n  /**\n   * Check if this analysis type is enabled\n   */\n  isEnabled(enabledTypes: AnalysisType[]): boolean {\n    return enabledTypes.includes(this.type);\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1008, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/analysis/types.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Base analysis result interface\nexport interface AnalysisResult {\n  id: string;\n  noteId: string;\n  type: AnalysisType;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  result?: Record<string, unknown>;\n  error?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  processingTime?: number;\n}\n\n// Analysis types\nexport enum AnalysisType {\n  SUMMARY = 'summary',\n  KEY_POINTS = 'key_points',\n  CATEGORIES = 'categories',\n  TAGS = 'tags',\n  SENTIMENT = 'sentiment',\n  TITLE = 'title',\n  ENTITIES = 'entities',\n  TOPICS = 'topics',\n  RELATIONSHIPS = 'relationships',\n  CONFIDENCE_SCORE = 'confidence_score'\n}\n\n// Individual analysis schemas\nexport const SummaryAnalysisSchema = z.object({\n  summary: z.string().min(10).max(1000),\n  confidence: z.number().min(0).max(1),\n  wordCount: z.number().min(1),\n  keyThemes: z.array(z.string()).max(5),\n  language: z.string().optional(),\n});\n\nexport const KeyPointsAnalysisSchema = z.object({\n  keyPoints: z.array(z.object({\n    point: z.string().min(10).max(200),\n    importance: z.number().min(0).max(1),\n    category: z.string().optional(),\n    evidence: z.string().optional(),\n  })).min(1).max(10),\n  totalPoints: z.number().min(1),\n  averageImportance: z.number().min(0).max(1),\n});\n\nexport const CategoriesAnalysisSchema = z.object({\n  categories: z.array(z.object({\n    name: z.string().min(2).max(50),\n    confidence: z.number().min(0).max(1),\n    reasoning: z.string().optional(),\n    subcategories: z.array(z.string()).optional(),\n  })).min(1).max(5),\n  primaryCategory: z.string().min(2).max(50),\n  categoryHierarchy: z.array(z.string()).optional(),\n});\n\nexport const TagsAnalysisSchema = z.object({\n  tags: z.array(z.object({\n    tag: z.string().min(2).max(30),\n    relevance: z.number().min(0).max(1),\n    type: z.enum(['topic', 'entity', 'concept', 'action', 'emotion']),\n    frequency: z.number().min(1).optional(),\n  })).min(1).max(15),\n  tagCloud: z.record(z.number()).optional(),\n});\n\nexport const SentimentAnalysisSchema = z.object({\n  sentiment: z.enum(['positive', 'negative', 'neutral', 'mixed']),\n  confidence: z.number().min(0).max(1),\n  emotions: z.array(z.object({\n    emotion: z.string(),\n    intensity: z.number().min(0).max(1),\n  })).optional(),\n  polarity: z.number().min(-1).max(1),\n});\n\nexport const TitleAnalysisSchema = z.object({\n  title: z.string().min(5).max(100),\n  alternatives: z.array(z.string()).max(3).optional(),\n  confidence: z.number().min(0).max(1),\n  style: z.enum(['descriptive', 'question', 'statement', 'creative']).optional(),\n});\n\nexport const EntitiesAnalysisSchema = z.object({\n  entities: z.array(z.object({\n    name: z.string(),\n    type: z.enum(['person', 'organization', 'location', 'date', 'product', 'concept']),\n    confidence: z.number().min(0).max(1),\n    mentions: z.number().min(1),\n    context: z.string().optional(),\n  })).min(0).max(20),\n  entityRelationships: z.array(z.object({\n    entity1: z.string(),\n    entity2: z.string(),\n    relationship: z.string(),\n    confidence: z.number().min(0).max(1),\n  })).optional(),\n});\n\nexport const TopicsAnalysisSchema = z.object({\n  topics: z.array(z.object({\n    topic: z.string().min(3).max(50),\n    relevance: z.number().min(0).max(1),\n    subtopics: z.array(z.string()).optional(),\n    keywords: z.array(z.string()).optional(),\n  })).min(1).max(8),\n  topicDistribution: z.record(z.number()).optional(),\n});\n\nexport const RelationshipsAnalysisSchema = z.object({\n  relationships: z.array(z.object({\n    source: z.string(),\n    target: z.string(),\n    relationship: z.string(),\n    strength: z.number().min(0).max(1),\n    type: z.enum(['causal', 'temporal', 'hierarchical', 'associative', 'contrastive']),\n  })).min(0).max(15),\n  relationshipGraph: z.record(z.array(z.string())).optional(),\n});\n\nexport const ConfidenceScoreSchema = z.object({\n  overallConfidence: z.number().min(0).max(1),\n  analysisBreakdown: z.record(z.number()),\n  qualityIndicators: z.object({\n    contentLength: z.boolean(),\n    clarity: z.boolean(),\n    coherence: z.boolean(),\n    completeness: z.boolean(),\n  }),\n  recommendations: z.array(z.string()).optional(),\n});\n\n// Combined analysis result\nexport interface ComprehensiveAnalysis {\n  noteId: string;\n  analyses: Record<AnalysisType, AnalysisResult>;\n  overallConfidence: number;\n  processingTime: number;\n  version: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Analysis configuration\nexport interface AnalysisConfig {\n  enabledAnalyses: AnalysisType[];\n  priority: AnalysisType[];\n  timeout: number;\n  retryAttempts: number;\n  cacheEnabled: boolean;\n  cacheTTL: number;\n}\n\n// Analysis request\nexport interface AnalysisRequest {\n  noteId: string;\n  content: string;\n  config?: Partial<AnalysisConfig>;\n  forceRefresh?: boolean;\n}\n\n// Analysis response\nexport interface AnalysisResponse {\n  success: boolean;\n  data?: ComprehensiveAnalysis;\n  error?: string;\n  partialResults?: Record<AnalysisType, AnalysisResult>;\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1188, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/analysis/services/TitleAnalysisService.ts"],"sourcesContent":["import { BaseAnalysisService } from './BaseAnalysisService';\nimport { AnalysisResult, AnalysisType, TitleAnalysisSchema } from '../types';\nimport { generateObject } from 'ai';\n\nexport class TitleAnalysisService extends BaseAnalysisService {\n  readonly type = AnalysisType.TITLE;\n  readonly priority = 1; // High priority (same as summary)\n  readonly timeout = 3000; // 3 seconds - fail faster\n\n  async analyze(content: string, context?: any): Promise<AnalysisResult> {\n    const startTime = Date.now();\n    \n    if (!this.validateContent(content)) {\n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'failed',\n        null,\n        'Content too short for title generation'\n      );\n      this.logMetrics(context?.noteId || 'unknown', Date.now() - startTime, false, 'Content too short');\n      return result;\n    }\n\n    try {\n      let analysisResult: any;\n      let inputTokens = 0;\n      let outputTokens = 0;\n\n      const analysisData = await this.executeWithRetry(async () => {\n        return await this.executeWithTimeout(async () => {\n          const prompt = this.buildPrompt(content);\n          \n          const analysis = await generateObject({\n            model: this.model,\n            schema: TitleAnalysisSchema,\n            prompt,\n          });\n\n          // Extract token usage data\n          if (analysis.usage) {\n            inputTokens = analysis.usage.promptTokens || 0;\n            outputTokens = analysis.usage.completionTokens || 0;\n          }\n\n          analysisResult = analysis.object;\n          return analysisResult;\n        });\n      }, 1); // Only 1 retry attempt\n\n      const processingTime = Date.now() - startTime;\n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'completed',\n        analysisData,\n        undefined,\n        processingTime\n      );\n\n      this.logMetrics(context?.noteId || 'unknown', processingTime, true, undefined, context?.userId, inputTokens, outputTokens);\n      return result;\n\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      \n      // Check if it's a quota exceeded error\n      const isQuotaExceeded = error instanceof Error && \n        (error.message.includes('quota') || \n         error.message.includes('RESOURCE_EXHAUSTED') ||\n         error.message.includes('429') ||\n         error.message.includes('exceeded'));\n      \n      const result = this.createBaseResult(\n        context?.noteId || 'unknown',\n        'failed',\n        null,\n        isQuotaExceeded ? 'API quota exceeded' : errorMessage,\n        processingTime\n      );\n\n      this.logMetrics(context?.noteId || 'unknown', processingTime, false, errorMessage);\n      return result;\n    }\n  }\n\n  private buildPrompt(content: string): string {\n    return `You are an expert content titler specializing in creating compelling, descriptive titles.\n\nContent to analyze:\n\"${content}\"\n\nPlease generate an effective title for this content. Provide:\n\n1. **Title**: A clear, engaging title (5-100 characters)\n2. **Alternatives**: 1-3 alternative title options\n3. **Confidence**: How confident you are in this title (0-1)\n4. **Style**: The title style (descriptive, question, statement, creative)\n\nTitle Guidelines:\n- **Descriptive**: Clearly describes what the content is about\n- **Question**: Poses a question that the content answers\n- **Statement**: Makes a declarative statement about the content\n- **Creative**: Uses creative language or wordplay\n\nConsider these factors:\n- **Clarity**: The title should clearly indicate the content's main topic\n- **Engagement**: Make it interesting and compelling to read\n- **Accuracy**: Ensure it accurately represents the content\n- **Length**: Keep it concise but informative\n- **Keywords**: Include important terms for searchability\n- **Tone**: Match the tone and style of the content\n- **Uniqueness**: Make it distinctive and memorable\n\nAvoid:\n- Generic titles like \"Notes\" or \"Content\"\n- Overly long or complex titles\n- Misleading or inaccurate descriptions\n- Titles that don't reflect the main content\n\nThe title should help users quickly understand what the content is about and encourage them to read it.`;\n  }\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;;AAEO,MAAM,6BAA6B,iMAAmB;IAClD,OAAO,gKAAY,CAAC,KAAK,CAAC;IAC1B,WAAW,EAAE;IACb,UAAU,KAAK;IAExB,MAAM,QAAQ,OAAe,EAAE,OAAa,EAA2B;QACrE,MAAM,YAAY,KAAK,GAAG;QAE1B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU;YAClC,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,UACA,MACA;YAEF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,KAAK,GAAG,KAAK,WAAW,OAAO;YAC7E,OAAO;QACT;QAEA,IAAI;YACF,IAAI;YACJ,IAAI,cAAc;YAClB,IAAI,eAAe;YAEnB,MAAM,eAAe,MAAM,IAAI,CAAC,gBAAgB,CAAC;gBAC/C,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC;oBACnC,MAAM,SAAS,IAAI,CAAC,WAAW,CAAC;oBAEhC,MAAM,WAAW,MAAM,IAAA,sHAAc,EAAC;wBACpC,OAAO,IAAI,CAAC,KAAK;wBACjB,QAAQ,uKAAmB;wBAC3B;oBACF;oBAEA,2BAA2B;oBAC3B,IAAI,SAAS,KAAK,EAAE;wBAClB,cAAc,SAAS,KAAK,CAAC,YAAY,IAAI;wBAC7C,eAAe,SAAS,KAAK,CAAC,gBAAgB,IAAI;oBACpD;oBAEA,iBAAiB,SAAS,MAAM;oBAChC,OAAO;gBACT;YACF,GAAG,IAAI,uBAAuB;YAE9B,MAAM,iBAAiB,KAAK,GAAG,KAAK;YACpC,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,aACA,cACA,WACA;YAGF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,gBAAgB,MAAM,WAAW,SAAS,QAAQ,aAAa;YAC7G,OAAO;QAET,EAAE,OAAO,OAAO;YACd,MAAM,iBAAiB,KAAK,GAAG,KAAK;YACpC,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAE9D,uCAAuC;YACvC,MAAM,kBAAkB,iBAAiB,SACvC,CAAC,MAAM,OAAO,CAAC,QAAQ,CAAC,YACvB,MAAM,OAAO,CAAC,QAAQ,CAAC,yBACvB,MAAM,OAAO,CAAC,QAAQ,CAAC,UACvB,MAAM,OAAO,CAAC,QAAQ,CAAC,WAAW;YAErC,MAAM,SAAS,IAAI,CAAC,gBAAgB,CAClC,SAAS,UAAU,WACnB,UACA,MACA,kBAAkB,uBAAuB,cACzC;YAGF,IAAI,CAAC,UAAU,CAAC,SAAS,UAAU,WAAW,gBAAgB,OAAO;YACrE,OAAO;QACT;IACF;IAEQ,YAAY,OAAe,EAAU;QAC3C,OAAO,CAAC;;;CAGX,EAAE,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uGA8B4F,CAAC;IACtG;AACF","debugId":null}},
    {"offset": {"line": 1303, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/auth.ts"],"sourcesContent":["import { cookies } from 'next/headers';\nimport { db, users, sessions, emailVerificationTokens } from '@polynote/db';\nimport { eq, and, gt } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\nimport { randomBytes } from 'crypto';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  emailVerified: boolean;\n  avatar?: string;\n  preferences?: Record<string, unknown>;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Session {\n  id: string;\n  userId: string;\n  token: string;\n  expiresAt: Date;\n  createdAt: Date;\n}\n\n// Password hashing\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\n// Session management\nexport async function createSession(userId: string): Promise<Session> {\n  const token = randomBytes(32).toString('hex');\n  const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days\n\n  const [session] = await db.insert(sessions).values({\n    userId,\n    token,\n    expiresAt,\n  }).returning();\n\n  return session;\n}\n\nexport async function getSession(token: string): Promise<Session | null> {\n  const [session] = await db\n    .select()\n    .from(sessions)\n    .where(and(\n      eq(sessions.token, token),\n      gt(sessions.expiresAt, new Date())\n    ))\n    .limit(1);\n\n  return session || null;\n}\n\nexport async function deleteSession(token: string): Promise<void> {\n  await db.delete(sessions).where(eq(sessions.token, token));\n}\n\n// Email verification\nexport async function createEmailVerificationToken(userId: string): Promise<string> {\n  const token = randomBytes(32).toString('hex');\n  const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n\n  await db.insert(emailVerificationTokens).values({\n    userId,\n    token,\n    expiresAt,\n  });\n\n  return token;\n}\n\nexport async function verifyEmailToken(token: string): Promise<string | null> {\n  const [verificationToken] = await db\n    .select()\n    .from(emailVerificationTokens)\n    .where(and(\n      eq(emailVerificationTokens.token, token),\n      gt(emailVerificationTokens.expiresAt, new Date())\n    ))\n    .limit(1);\n\n  if (!verificationToken) {\n    return null;\n  }\n\n  // Mark user as verified\n  await db.update(users)\n    .set({ emailVerified: true })\n    .where(eq(users.id, verificationToken.userId));\n\n  // Delete the verification token\n  await db.delete(emailVerificationTokens)\n    .where(eq(emailVerificationTokens.token, token));\n\n  return verificationToken.userId;\n}\n\n// User management\nexport async function getUserByEmail(email: string): Promise<User | null> {\n  const [user] = await db\n    .select()\n    .from(users)\n    .where(eq(users.email, email))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function getUserByEmailWithPassword(email: string): Promise<(User & { passwordHash: string }) | null> {\n  const [user] = await db\n    .select({\n      id: users.id,\n      email: users.email,\n      name: users.name,\n      emailVerified: users.emailVerified,\n      avatar: users.avatar,\n      preferences: users.preferences,\n      createdAt: users.createdAt,\n      updatedAt: users.updatedAt,\n      passwordHash: users.passwordHash,\n    })\n    .from(users)\n    .where(eq(users.email, email))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function getUserById(id: string): Promise<User | null> {\n  const [user] = await db\n    .select()\n    .from(users)\n    .where(eq(users.id, id))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function createUser(email: string, name: string, password: string): Promise<User> {\n  const passwordHash = await hashPassword(password);\n  \n  const [user] = await db.insert(users).values({\n    email,\n    name,\n    passwordHash,\n  }).returning();\n\n  return user;\n}\n\n// Authentication helpers\nexport async function getCurrentUser(): Promise<User | null> {\n  const cookieStore = await cookies();\n  const sessionToken = cookieStore.get('session')?.value;\n  \n  if (!sessionToken) {\n    return null;\n  }\n\n  const session = await getSession(sessionToken);\n  if (!session) {\n    return null;\n  }\n\n  return getUserById(session.userId);\n}\n\nexport async function requireAuth(): Promise<User> {\n  const user = await getCurrentUser();\n  if (!user) {\n    throw new Error('Authentication required');\n  }\n  return user;\n}\n\n// Cookie helpers\nexport async function setSessionCookie(token: string) {\n  const cookieStore = await cookies();\n  cookieStore.set('session', token, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'lax',\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n    path: '/',\n  });\n}\n\nexport async function clearSessionCookie() {\n  const cookieStore = await cookies();\n  cookieStore.delete('session');\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1468, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/app/api/analysis/title/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { TitleAnalysisService } from '@/lib/analysis/services/TitleAnalysisService';\nimport { getCurrentUser } from '@/lib/auth';\n\nconst titleService = new TitleAnalysisService();\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Get the current user (optional for analysis)\n    const user = await getCurrentUser();\n    \n    const body = await request.json();\n    const { content, noteId } = body;\n\n    if (!content?.trim()) {\n      return NextResponse.json(\n        { error: 'Content is required' },\n        { status: 400 }\n      );\n    }\n\n    console.log('Title Analysis Request:', {\n      noteId: noteId || 'unknown',\n      contentLength: content.length,\n      userId: user?.id || 'anonymous',\n    });\n\n    // Initialize service with user settings if available\n    if (user?.id) {\n      await titleService.initialize(user.id);\n    } else {\n      await titleService.initialize('default');\n    }\n\n    const result = await titleService.analyze(content, { \n      noteId: noteId || 'unknown',\n      userId: user?.id \n    });\n\n    if (result.status === 'completed' && result.result) {\n      console.log('Title Analysis Completed:', {\n        noteId: result.noteId,\n        processingTime: result.processingTime,\n        title: result.result.title,\n        confidence: result.result.confidence,\n      });\n\n      return NextResponse.json({\n        success: true,\n        title: result.result.title,\n        confidence: result.result.confidence,\n        metadata: {\n          processingTime: result.processingTime,\n          analysisType: 'title',\n        },\n      });\n    } else {\n      console.error('Title Analysis Failed:', result.error);\n      return NextResponse.json(\n        { \n          success: false, \n          error: result.error || 'Title analysis failed' \n        },\n        { status: 500 }\n      );\n    }\n\n  } catch (error) {\n    console.error('Title Analysis Error:', error);\n    return NextResponse.json(\n      { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;;AAEA,MAAM,eAAe,IAAI,mMAAoB;AAEtC,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,+CAA+C;QAC/C,MAAM,OAAO,MAAM,IAAA,qJAAc;QAEjC,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG;QAE5B,IAAI,CAAC,SAAS,QAAQ;YACpB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC,2BAA2B;YACrC,QAAQ,UAAU;YAClB,eAAe,QAAQ,MAAM;YAC7B,QAAQ,MAAM,MAAM;QACtB;QAEA,qDAAqD;QACrD,IAAI,MAAM,IAAI;YACZ,MAAM,aAAa,UAAU,CAAC,KAAK,EAAE;QACvC,OAAO;YACL,MAAM,aAAa,UAAU,CAAC;QAChC;QAEA,MAAM,SAAS,MAAM,aAAa,OAAO,CAAC,SAAS;YACjD,QAAQ,UAAU;YAClB,QAAQ,MAAM;QAChB;QAEA,IAAI,OAAO,MAAM,KAAK,eAAe,OAAO,MAAM,EAAE;YAClD,QAAQ,GAAG,CAAC,6BAA6B;gBACvC,QAAQ,OAAO,MAAM;gBACrB,gBAAgB,OAAO,cAAc;gBACrC,OAAO,OAAO,MAAM,CAAC,KAAK;gBAC1B,YAAY,OAAO,MAAM,CAAC,UAAU;YACtC;YAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO,OAAO,MAAM,CAAC,KAAK;gBAC1B,YAAY,OAAO,MAAM,CAAC,UAAU;gBACpC,UAAU;oBACR,gBAAgB,OAAO,cAAc;oBACrC,cAAc;gBAChB;YACF;QACF,OAAO;YACL,QAAQ,KAAK,CAAC,0BAA0B,OAAO,KAAK;YACpD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,OAAO,OAAO,KAAK,IAAI;YACzB,GACA;gBAAE,QAAQ;YAAI;QAElB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}