{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///home/slk/Documents/Projects/polynote/packages/db/src/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, uuid, jsonb, index } from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\n\n// Notes table\nexport const notes = pgTable('notes', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  title: text('title').notNull(),\n  content: text('content').notNull(),\n  transcript: text('transcript'), // Original voice transcript\n  summary: text('summary'), // AI-generated summary\n  tags: jsonb('tags').$type<string[]>(), // AI-generated tags\n  categories: jsonb('categories').$type<string[]>(), // AI-generated categories\n  metadata: jsonb('metadata').$type<Record<string, unknown>>(), // Additional AI metadata\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  titleIdx: index('notes_title_idx').on(table.title),\n  createdAtIdx: index('notes_created_at_idx').on(table.createdAt),\n  tagsIdx: index('notes_tags_idx').on(table.tags),\n  categoriesIdx: index('notes_categories_idx').on(table.categories),\n}));\n\n// Note searches table for full-text search\nexport const noteSearches = pgTable('note_searches', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  noteId: uuid('note_id').references(() => notes.id, { onDelete: 'cascade' }),\n  searchVector: text('search_vector'), // For full-text search\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// Relations\nexport const notesRelations = relations(notes, ({ many }) => ({\n  searches: many(noteSearches),\n}));\n\nexport const noteSearchesRelations = relations(noteSearches, ({ one }) => ({\n  note: one(notes, {\n    fields: [noteSearches.noteId],\n    references: [notes.id],\n  }),\n}));\n\n// Types\nexport type Note = typeof notes.$inferSelect;\nexport type NewNote = typeof notes.$inferInsert;\nexport type NoteSearch = typeof noteSearches.$inferSelect;\nexport type NewNoteSearch = typeof noteSearches.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAGO,MAAM,QAAQ,IAAA,kKAAO,EAAC,SAAS;IACpC,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,OAAO,IAAA,yKAAI,EAAC,SAAS,OAAO;IAC5B,SAAS,IAAA,yKAAI,EAAC,WAAW,OAAO;IAChC,YAAY,IAAA,yKAAI,EAAC;IACjB,SAAS,IAAA,yKAAI,EAAC;IACd,MAAM,IAAA,2KAAK,EAAC,QAAQ,KAAK;IACzB,YAAY,IAAA,2KAAK,EAAC,cAAc,KAAK;IACrC,UAAU,IAAA,2KAAK,EAAC,YAAY,KAAK;IACjC,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,UAAU,IAAA,kKAAK,EAAC,mBAAmB,EAAE,CAAC,MAAM,KAAK;QACjD,cAAc,IAAA,kKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,SAAS;QAC9D,SAAS,IAAA,kKAAK,EAAC,kBAAkB,EAAE,CAAC,MAAM,IAAI;QAC9C,eAAe,IAAA,kKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,UAAU;IAClE,CAAC;AAGM,MAAM,eAAe,IAAA,kKAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,yKAAI,EAAC,WAAW,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACzE,cAAc,IAAA,yKAAI,EAAC;IACnB,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,iBAAiB,IAAA,0JAAS,EAAC,OAAO,CAAC,EAAE,IAAI,EAAE,GAAK,CAAC;QAC5D,UAAU,KAAK;IACjB,CAAC;AAEM,MAAM,wBAAwB,IAAA,0JAAS,EAAC,cAAc,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACzE,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,aAAa,MAAM;aAAC;YAC7B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///home/slk/Documents/Projects/polynote/packages/db/src/index.ts"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport * as schema from './schema';\n\nconst sql = neon(process.env.DATABASE_URL!);\nexport const db = drizzle(sql, { schema });\n\nexport * from './schema';\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;;AAEA,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;AAClC,MAAM,KAAK,IAAA,qKAAO,EAAC,KAAK;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["file:///home/slk/Documents/Projects/polynote/apps/web/src/app/api/notes/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@polynote/db';\nimport { notes } from '@polynote/db';\nimport { eq } from 'drizzle-orm';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const noteId = params.id;\n\n    if (!noteId) {\n      return NextResponse.json(\n        { error: 'Note ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const result = await db\n      .select()\n      .from(notes)\n      .where(eq(notes.id, noteId))\n      .limit(1);\n\n    if (result.length === 0) {\n      return NextResponse.json(\n        { error: 'Note not found' },\n        { status: 404 }\n      );\n    }\n\n    // Add cache headers for individual notes\n    const response = NextResponse.json(result[0]);\n    response.headers.set('Cache-Control', 'public, max-age=300, stale-while-revalidate=600');\n    response.headers.set('ETag', `\"note-${noteId}-${result[0].updatedAt}\"`);\n    \n    return response;\n  } catch (error) {\n    console.error('Error fetching note:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch note' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const noteId = params.id;\n    const body = await request.json();\n    const { title, content, summary } = body;\n\n    if (!noteId) {\n      return NextResponse.json(\n        { error: 'Note ID is required' },\n        { status: 400 }\n      );\n    }\n\n    if (!title?.trim() || !content?.trim()) {\n      return NextResponse.json(\n        { error: 'Title and content are required' },\n        { status: 400 }\n      );\n    }\n\n    const result = await db\n      .update(notes)\n      .set({\n        title: title.trim(),\n        content: content.trim(),\n        summary: summary?.trim() || null,\n        updatedAt: new Date(),\n      })\n      .where(eq(notes.id, noteId))\n      .returning();\n\n    if (result.length === 0) {\n      return NextResponse.json(\n        { error: 'Note not found' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(result[0]);\n  } catch (error) {\n    console.error('Error updating note:', error);\n    return NextResponse.json(\n      { error: 'Failed to update note' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const noteId = params.id;\n\n    if (!noteId) {\n      return NextResponse.json(\n        { error: 'Note ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const result = await db\n      .delete(notes)\n      .where(eq(notes.id, noteId))\n      .returning();\n\n    if (result.length === 0) {\n      return NextResponse.json(\n        { error: 'Note not found' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json({ success: true, deletedNote: result[0] });\n  } catch (error) {\n    console.error('Error deleting note:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete note' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}