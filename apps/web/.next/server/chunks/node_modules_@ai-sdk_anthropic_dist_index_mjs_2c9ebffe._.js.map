{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/anthropic-provider.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/anthropic-messages-language-model.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/anthropic-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/anthropic-messages-options.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/anthropic-prepare-tools.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/get-cache-control.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/tool/web-search_20250305.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/convert-to-anthropic-messages-prompt.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/tool/code-execution_20250522.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/map-anthropic-stop-reason.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/tool/bash_20241022.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/tool/bash_20250124.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/tool/computer_20241022.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/tool/computer_20250124.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/tool/text-editor_20241022.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/tool/text-editor_20250124.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/tool/text-editor_20250429.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/anthropic/src/anthropic-tools.ts"],"sourcesContent":["import {\n  LanguageModelV2,\n  NoSuchModelError,\n  ProviderV2,\n} from '@ai-sdk/provider';\nimport {\n  FetchFunction,\n  generateId,\n  loadApiKey,\n  withoutTrailingSlash,\n} from '@ai-sdk/provider-utils';\nimport { AnthropicMessagesLanguageModel } from './anthropic-messages-language-model';\nimport { AnthropicMessagesModelId } from './anthropic-messages-options';\nimport { anthropicTools } from './anthropic-tools';\n\nexport interface AnthropicProvider extends ProviderV2 {\n  /**\nCreates a model for text generation.\n*/\n  (modelId: AnthropicMessagesModelId): LanguageModelV2;\n\n  /**\nCreates a model for text generation.\n*/\n  languageModel(modelId: AnthropicMessagesModelId): LanguageModelV2;\n\n  chat(modelId: AnthropicMessagesModelId): LanguageModelV2;\n\n  messages(modelId: AnthropicMessagesModelId): LanguageModelV2;\n\n  /**\nAnthropic-specific computer use tool.\n   */\n  tools: typeof anthropicTools;\n}\n\nexport interface AnthropicProviderSettings {\n  /**\nUse a different URL prefix for API calls, e.g. to use proxy servers.\nThe default prefix is `https://api.anthropic.com/v1`.\n   */\n  baseURL?: string;\n\n  /**\nAPI key that is being send using the `x-api-key` header.\nIt defaults to the `ANTHROPIC_API_KEY` environment variable.\n   */\n  apiKey?: string;\n\n  /**\nCustom headers to include in the requests.\n     */\n  headers?: Record<string, string>;\n\n  /**\nCustom fetch implementation. You can use it as a middleware to intercept requests,\nor to provide a custom fetch implementation for e.g. testing.\n    */\n  fetch?: FetchFunction;\n\n  generateId?: () => string;\n}\n\n/**\nCreate an Anthropic provider instance.\n */\nexport function createAnthropic(\n  options: AnthropicProviderSettings = {},\n): AnthropicProvider {\n  const baseURL =\n    withoutTrailingSlash(options.baseURL) ?? 'https://api.anthropic.com/v1';\n\n  const getHeaders = () => ({\n    'anthropic-version': '2023-06-01',\n    'x-api-key': loadApiKey({\n      apiKey: options.apiKey,\n      environmentVariableName: 'ANTHROPIC_API_KEY',\n      description: 'Anthropic',\n    }),\n    ...options.headers,\n  });\n\n  const createChatModel = (modelId: AnthropicMessagesModelId) =>\n    new AnthropicMessagesLanguageModel(modelId, {\n      provider: 'anthropic.messages',\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      generateId: options.generateId ?? generateId,\n      supportedUrls: () => ({\n        'image/*': [/^https?:\\/\\/.*$/],\n      }),\n    });\n\n  const provider = function (modelId: AnthropicMessagesModelId) {\n    if (new.target) {\n      throw new Error(\n        'The Anthropic model function cannot be called with the new keyword.',\n      );\n    }\n\n    return createChatModel(modelId);\n  };\n\n  provider.languageModel = createChatModel;\n  provider.chat = createChatModel;\n  provider.messages = createChatModel;\n\n  provider.textEmbeddingModel = (modelId: string) => {\n    throw new NoSuchModelError({ modelId, modelType: 'textEmbeddingModel' });\n  };\n  provider.imageModel = (modelId: string) => {\n    throw new NoSuchModelError({ modelId, modelType: 'imageModel' });\n  };\n\n  provider.tools = anthropicTools;\n\n  return provider;\n}\n\n/**\nDefault Anthropic provider instance.\n */\nexport const anthropic = createAnthropic();\n","import {\n  JSONObject,\n  JSONValue,\n  LanguageModelV2,\n  LanguageModelV2CallWarning,\n  LanguageModelV2Content,\n  LanguageModelV2FinishReason,\n  LanguageModelV2FunctionTool,\n  LanguageModelV2Prompt,\n  LanguageModelV2StreamPart,\n  LanguageModelV2Usage,\n  SharedV2ProviderMetadata,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport {\n  FetchFunction,\n  ParseResult,\n  Resolvable,\n  combineHeaders,\n  createEventSourceResponseHandler,\n  createJsonResponseHandler,\n  generateId,\n  parseProviderOptions,\n  postJsonToApi,\n  resolve,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { anthropicFailedResponseHandler } from './anthropic-error';\nimport {\n  AnthropicMessagesModelId,\n  anthropicProviderOptions,\n} from './anthropic-messages-options';\nimport { prepareTools } from './anthropic-prepare-tools';\nimport { convertToAnthropicMessagesPrompt } from './convert-to-anthropic-messages-prompt';\nimport { mapAnthropicStopReason } from './map-anthropic-stop-reason';\n\nconst citationSchemas = {\n  webSearchResult: z.object({\n    type: z.literal('web_search_result_location'),\n    cited_text: z.string(),\n    url: z.string(),\n    title: z.string(),\n    encrypted_index: z.string(),\n  }),\n  pageLocation: z.object({\n    type: z.literal('page_location'),\n    cited_text: z.string(),\n    document_index: z.number(),\n    document_title: z.string().nullable(),\n    start_page_number: z.number(),\n    end_page_number: z.number(),\n  }),\n  charLocation: z.object({\n    type: z.literal('char_location'),\n    cited_text: z.string(),\n    document_index: z.number(),\n    document_title: z.string().nullable(),\n    start_char_index: z.number(),\n    end_char_index: z.number(),\n  }),\n};\n\nconst citationSchema = z.discriminatedUnion('type', [\n  citationSchemas.webSearchResult,\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation,\n]);\n\nconst documentCitationSchema = z.discriminatedUnion('type', [\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation,\n]);\n\ntype Citation = z.infer<typeof citationSchema>;\nexport type DocumentCitation = z.infer<typeof documentCitationSchema>;\nexport type AnthropicProviderMetadata = SharedV2ProviderMetadata & {\n  usage?: Record<string, JSONValue>;\n};\n\nfunction processCitation(\n  citation: Citation,\n  citationDocuments: Array<{\n    title: string;\n    filename?: string;\n    mediaType: string;\n  }>,\n  generateId: () => string,\n  onSource: (source: any) => void,\n) {\n  if (citation.type === 'page_location' || citation.type === 'char_location') {\n    const source = createCitationSource(\n      citation,\n      citationDocuments,\n      generateId,\n    );\n    if (source) {\n      onSource(source);\n    }\n  }\n}\n\nfunction createCitationSource(\n  citation: DocumentCitation,\n  citationDocuments: Array<{\n    title: string;\n    filename?: string;\n    mediaType: string;\n  }>,\n  generateId: () => string,\n) {\n  const documentInfo = citationDocuments[citation.document_index];\n  if (!documentInfo) {\n    return null;\n  }\n\n  const providerMetadata =\n    citation.type === 'page_location'\n      ? {\n          citedText: citation.cited_text,\n          startPageNumber: citation.start_page_number,\n          endPageNumber: citation.end_page_number,\n        }\n      : {\n          citedText: citation.cited_text,\n          startCharIndex: citation.start_char_index,\n          endCharIndex: citation.end_char_index,\n        };\n\n  return {\n    type: 'source' as const,\n    sourceType: 'document' as const,\n    id: generateId(),\n    mediaType: documentInfo.mediaType,\n    title: citation.document_title ?? documentInfo.title,\n    filename: documentInfo.filename,\n    providerMetadata: {\n      anthropic: providerMetadata,\n    },\n  };\n}\n\ntype AnthropicMessagesConfig = {\n  provider: string;\n  baseURL: string;\n  headers: Resolvable<Record<string, string | undefined>>;\n  fetch?: FetchFunction;\n  buildRequestUrl?: (baseURL: string, isStreaming: boolean) => string;\n  transformRequestBody?: (args: Record<string, any>) => Record<string, any>;\n  supportedUrls?: () => LanguageModelV2['supportedUrls'];\n  generateId?: () => string;\n};\n\nexport class AnthropicMessagesLanguageModel implements LanguageModelV2 {\n  readonly specificationVersion = 'v2';\n\n  readonly modelId: AnthropicMessagesModelId;\n\n  private readonly config: AnthropicMessagesConfig;\n  private readonly generateId: () => string;\n\n  constructor(\n    modelId: AnthropicMessagesModelId,\n    config: AnthropicMessagesConfig,\n  ) {\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = config.generateId ?? generateId;\n  }\n\n  supportsUrl(url: URL): boolean {\n    return url.protocol === 'https:';\n  }\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  get supportedUrls() {\n    return this.config.supportedUrls?.() ?? {};\n  }\n\n  private async getArgs({\n    prompt,\n    maxOutputTokens = 4096, // 4096: max model output tokens TODO update default in v5\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions,\n  }: Parameters<LanguageModelV2['doGenerate']>[0]) {\n    const warnings: LanguageModelV2CallWarning[] = [];\n\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'frequencyPenalty',\n      });\n    }\n\n    if (presencePenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'presencePenalty',\n      });\n    }\n\n    if (seed != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'seed',\n      });\n    }\n\n    if (responseFormat?.type === 'json') {\n      if (responseFormat.schema == null) {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'responseFormat',\n          details:\n            'JSON response format requires a schema. ' +\n            'The response format is ignored.',\n        });\n      } else if (tools != null) {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'tools',\n          details:\n            'JSON response format does not support tools. ' +\n            'The provided tools are ignored.',\n        });\n      }\n    }\n\n    const jsonResponseTool: LanguageModelV2FunctionTool | undefined =\n      responseFormat?.type === 'json' && responseFormat.schema != null\n        ? {\n            type: 'function',\n            name: 'json',\n            description: 'Respond with a JSON object.',\n            inputSchema: responseFormat.schema,\n          }\n        : undefined;\n\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions,\n      schema: anthropicProviderOptions,\n    });\n\n    const { prompt: messagesPrompt, betas: messagesBetas } =\n      await convertToAnthropicMessagesPrompt({\n        prompt,\n        sendReasoning: anthropicOptions?.sendReasoning ?? true,\n        warnings,\n      });\n\n    const isThinking = anthropicOptions?.thinking?.type === 'enabled';\n    const thinkingBudget = anthropicOptions?.thinking?.budgetTokens;\n\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_k: topK,\n      top_p: topP,\n      stop_sequences: stopSequences,\n\n      // provider specific settings:\n      ...(isThinking && {\n        thinking: { type: 'enabled', budget_tokens: thinkingBudget },\n      }),\n\n      // prompt:\n      system: messagesPrompt.system,\n      messages: messagesPrompt.messages,\n    };\n\n    if (isThinking) {\n      if (thinkingBudget == null) {\n        throw new UnsupportedFunctionalityError({\n          functionality: 'thinking requires a budget',\n        });\n      }\n\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'temperature',\n          details: 'temperature is not supported when thinking is enabled',\n        });\n      }\n\n      if (topK != null) {\n        baseArgs.top_k = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'topK',\n          details: 'topK is not supported when thinking is enabled',\n        });\n      }\n\n      if (topP != null) {\n        baseArgs.top_p = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'topP',\n          details: 'topP is not supported when thinking is enabled',\n        });\n      }\n\n      // adjust max tokens to account for thinking:\n      baseArgs.max_tokens = maxOutputTokens + thinkingBudget;\n    }\n\n    const {\n      tools: anthropicTools,\n      toolChoice: anthropicToolChoice,\n      toolWarnings,\n      betas: toolsBetas,\n    } = prepareTools(\n      jsonResponseTool != null\n        ? {\n            tools: [jsonResponseTool],\n            toolChoice: { type: 'tool', toolName: jsonResponseTool.name },\n            disableParallelToolUse: true,\n          }\n        : {\n            tools: tools ?? [],\n            toolChoice,\n            disableParallelToolUse: anthropicOptions?.disableParallelToolUse,\n          },\n    );\n\n    return {\n      args: {\n        ...baseArgs,\n        tools: anthropicTools,\n        tool_choice: anthropicToolChoice,\n      },\n      warnings: [...warnings, ...toolWarnings],\n      betas: new Set([...messagesBetas, ...toolsBetas]),\n      usesJsonResponseTool: jsonResponseTool != null,\n    };\n  }\n\n  private async getHeaders({\n    betas,\n    headers,\n  }: {\n    betas: Set<string>;\n    headers: Record<string, string | undefined> | undefined;\n  }) {\n    return combineHeaders(\n      await resolve(this.config.headers),\n      betas.size > 0 ? { 'anthropic-beta': Array.from(betas).join(',') } : {},\n      headers,\n    );\n  }\n\n  private buildRequestUrl(isStreaming: boolean): string {\n    return (\n      this.config.buildRequestUrl?.(this.config.baseURL, isStreaming) ??\n      `${this.config.baseURL}/messages`\n    );\n  }\n\n  private transformRequestBody(args: Record<string, any>): Record<string, any> {\n    return this.config.transformRequestBody?.(args) ?? args;\n  }\n\n  private extractCitationDocuments(prompt: LanguageModelV2Prompt): Array<{\n    title: string;\n    filename?: string;\n    mediaType: string;\n  }> {\n    const isCitationPart = (part: {\n      type: string;\n      mediaType?: string;\n      providerOptions?: { anthropic?: { citations?: { enabled?: boolean } } };\n    }) => {\n      if (part.type !== 'file') {\n        return false;\n      }\n\n      if (\n        part.mediaType !== 'application/pdf' &&\n        part.mediaType !== 'text/plain'\n      ) {\n        return false;\n      }\n\n      const anthropic = part.providerOptions?.anthropic;\n      const citationsConfig = anthropic?.citations as\n        | { enabled?: boolean }\n        | undefined;\n      return citationsConfig?.enabled ?? false;\n    };\n\n    return prompt\n      .filter(message => message.role === 'user')\n      .flatMap(message => message.content)\n      .filter(isCitationPart)\n      .map(part => {\n        // TypeScript knows this is a file part due to our filter\n        const filePart = part as Extract<typeof part, { type: 'file' }>;\n        return {\n          title: filePart.filename ?? 'Untitled Document',\n          filename: filePart.filename,\n          mediaType: filePart.mediaType,\n        };\n      });\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doGenerate']>>> {\n    const { args, warnings, betas, usesJsonResponseTool } =\n      await this.getArgs(options);\n\n    // Extract citation documents for response processing\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse,\n    } = await postJsonToApi({\n      url: this.buildRequestUrl(false),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(args),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        anthropicMessagesResponseSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    const content: Array<LanguageModelV2Content> = [];\n\n    // map response content to content array\n    for (const part of response.content) {\n      switch (part.type) {\n        case 'text': {\n          // when a json response tool is used, the tool call is returned as text,\n          // so we ignore the text content:\n          if (!usesJsonResponseTool) {\n            content.push({ type: 'text', text: part.text });\n\n            // Process citations if present\n            if (part.citations) {\n              for (const citation of part.citations) {\n                processCitation(\n                  citation,\n                  citationDocuments,\n                  this.generateId,\n                  source => content.push(source),\n                );\n              }\n            }\n          }\n          break;\n        }\n        case 'thinking': {\n          content.push({\n            type: 'reasoning',\n            text: part.thinking,\n            providerMetadata: {\n              anthropic: {\n                signature: part.signature,\n              } satisfies AnthropicReasoningMetadata,\n            },\n          });\n          break;\n        }\n        case 'redacted_thinking': {\n          content.push({\n            type: 'reasoning',\n            text: '',\n            providerMetadata: {\n              anthropic: {\n                redactedData: part.data,\n              } satisfies AnthropicReasoningMetadata,\n            },\n          });\n          break;\n        }\n        case 'tool_use': {\n          content.push(\n            // when a json response tool is used, the tool call becomes the text:\n            usesJsonResponseTool\n              ? {\n                  type: 'text',\n                  text: JSON.stringify(part.input),\n                }\n              : {\n                  type: 'tool-call',\n                  toolCallId: part.id,\n                  toolName: part.name,\n                  input: JSON.stringify(part.input),\n                },\n          );\n\n          break;\n        }\n        case 'server_tool_use': {\n          if (part.name === 'web_search' || part.name === 'code_execution') {\n            content.push({\n              type: 'tool-call',\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input),\n              providerExecuted: true,\n            });\n          }\n\n          break;\n        }\n        case 'web_search_tool_result': {\n          if (Array.isArray(part.content)) {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'web_search',\n              result: part.content.map(result => ({\n                url: result.url,\n                title: result.title,\n                pageAge: result.page_age ?? null,\n                encryptedContent: result.encrypted_content,\n                type: result.type,\n              })),\n              providerExecuted: true,\n            });\n\n            for (const result of part.content) {\n              content.push({\n                type: 'source',\n                sourceType: 'url',\n                id: this.generateId(),\n                url: result.url,\n                title: result.title,\n                providerMetadata: {\n                  anthropic: {\n                    pageAge: result.page_age ?? null,\n                  },\n                },\n              });\n            }\n          } else {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'web_search',\n              isError: true,\n              result: {\n                type: 'web_search_tool_result_error',\n                errorCode: part.content.error_code,\n              },\n              providerExecuted: true,\n            });\n          }\n          break;\n        }\n        case 'code_execution_tool_result': {\n          if (part.content.type === 'code_execution_result') {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'code_execution',\n              result: {\n                type: part.content.type,\n                stdout: part.content.stdout,\n                stderr: part.content.stderr,\n                return_code: part.content.return_code,\n              },\n              providerExecuted: true,\n            });\n          } else if (part.content.type === 'code_execution_tool_result_error') {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'code_execution',\n              isError: true,\n              result: {\n                type: 'code_execution_tool_result_error',\n                errorCode: part.content.error_code,\n              },\n              providerExecuted: true,\n            });\n          }\n          break;\n        }\n      }\n    }\n\n    return {\n      content,\n      finishReason: mapAnthropicStopReason({\n        finishReason: response.stop_reason,\n        isJsonResponseFromTool: usesJsonResponseTool,\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        cachedInputTokens: response.usage.cache_read_input_tokens ?? undefined,\n      },\n      request: { body: args },\n      response: {\n        id: response.id ?? undefined,\n        modelId: response.model ?? undefined,\n        headers: responseHeaders,\n        body: rawResponse,\n      },\n      warnings,\n      providerMetadata: {\n        anthropic: {\n          usage: response.usage as JSONObject,\n          cacheCreationInputTokens:\n            response.usage.cache_creation_input_tokens ?? null,\n        },\n      },\n    };\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV2['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doStream']>>> {\n    const { args, warnings, betas, usesJsonResponseTool } =\n      await this.getArgs(options);\n\n    // Extract citation documents for response processing\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n\n    const body = { ...args, stream: true };\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      url: this.buildRequestUrl(true),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(body),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: createEventSourceResponseHandler(\n        anthropicMessagesChunkSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    let finishReason: LanguageModelV2FinishReason = 'unknown';\n    const usage: LanguageModelV2Usage = {\n      inputTokens: undefined,\n      outputTokens: undefined,\n      totalTokens: undefined,\n    };\n\n    const contentBlocks: Record<\n      number,\n      | {\n          type: 'tool-call';\n          toolCallId: string;\n          toolName: string;\n          input: string;\n          providerExecuted?: boolean;\n        }\n      | { type: 'text' | 'reasoning' }\n    > = {};\n\n    let providerMetadata: AnthropicProviderMetadata | undefined = undefined;\n\n    let blockType:\n      | 'text'\n      | 'thinking'\n      | 'tool_use'\n      | 'redacted_thinking'\n      | 'server_tool_use'\n      | 'web_search_tool_result'\n      | 'code_execution_tool_result'\n      | undefined = undefined;\n\n    const generateId = this.generateId;\n\n    return {\n      stream: response.pipeThrough(\n        new TransformStream<\n          ParseResult<z.infer<typeof anthropicMessagesChunkSchema>>,\n          LanguageModelV2StreamPart\n        >({\n          start(controller) {\n            controller.enqueue({ type: 'stream-start', warnings });\n          },\n\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: 'raw', rawValue: chunk.rawValue });\n            }\n\n            if (!chunk.success) {\n              controller.enqueue({ type: 'error', error: chunk.error });\n              return;\n            }\n\n            const value = chunk.value;\n\n            switch (value.type) {\n              case 'ping': {\n                return; // ignored\n              }\n\n              case 'content_block_start': {\n                const contentBlockType = value.content_block.type;\n\n                blockType = contentBlockType;\n\n                switch (contentBlockType) {\n                  case 'text': {\n                    contentBlocks[value.index] = { type: 'text' };\n                    controller.enqueue({\n                      type: 'text-start',\n                      id: String(value.index),\n                    });\n                    return;\n                  }\n\n                  case 'thinking': {\n                    contentBlocks[value.index] = { type: 'reasoning' };\n                    controller.enqueue({\n                      type: 'reasoning-start',\n                      id: String(value.index),\n                    });\n                    return;\n                  }\n\n                  case 'redacted_thinking': {\n                    contentBlocks[value.index] = { type: 'reasoning' };\n                    controller.enqueue({\n                      type: 'reasoning-start',\n                      id: String(value.index),\n                      providerMetadata: {\n                        anthropic: {\n                          redactedData: value.content_block.data,\n                        } satisfies AnthropicReasoningMetadata,\n                      },\n                    });\n                    return;\n                  }\n\n                  case 'tool_use': {\n                    contentBlocks[value.index] = usesJsonResponseTool\n                      ? { type: 'text' }\n                      : {\n                          type: 'tool-call',\n                          toolCallId: value.content_block.id,\n                          toolName: value.content_block.name,\n                          input: '',\n                        };\n\n                    controller.enqueue(\n                      usesJsonResponseTool\n                        ? { type: 'text-start', id: String(value.index) }\n                        : {\n                            type: 'tool-input-start',\n                            id: value.content_block.id,\n                            toolName: value.content_block.name,\n                          },\n                    );\n                    return;\n                  }\n\n                  case 'server_tool_use': {\n                    if (\n                      value.content_block.name === 'web_search' ||\n                      value.content_block.name === 'code_execution'\n                    ) {\n                      contentBlocks[value.index] = {\n                        type: 'tool-call',\n                        toolCallId: value.content_block.id,\n                        toolName: value.content_block.name,\n                        input: '',\n                        providerExecuted: true,\n                      };\n                      controller.enqueue({\n                        type: 'tool-input-start',\n                        id: value.content_block.id,\n                        toolName: value.content_block.name,\n                        providerExecuted: true,\n                      });\n                    }\n\n                    return;\n                  }\n\n                  case 'web_search_tool_result': {\n                    const part = value.content_block;\n\n                    if (Array.isArray(part.content)) {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'web_search',\n                        result: part.content.map(result => ({\n                          url: result.url,\n                          title: result.title,\n                          pageAge: result.page_age ?? null,\n                          encryptedContent: result.encrypted_content,\n                          type: result.type,\n                        })),\n                        providerExecuted: true,\n                      });\n\n                      for (const result of part.content) {\n                        controller.enqueue({\n                          type: 'source',\n                          sourceType: 'url',\n                          id: generateId(),\n                          url: result.url,\n                          title: result.title,\n                          providerMetadata: {\n                            anthropic: {\n                              pageAge: result.page_age ?? null,\n                            },\n                          },\n                        });\n                      }\n                    } else {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'web_search',\n                        isError: true,\n                        result: {\n                          type: 'web_search_tool_result_error',\n                          errorCode: part.content.error_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    }\n                    return;\n                  }\n\n                  case 'code_execution_tool_result': {\n                    const part = value.content_block;\n\n                    if (part.content.type === 'code_execution_result') {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'code_execution',\n                        result: {\n                          type: part.content.type,\n                          stdout: part.content.stdout,\n                          stderr: part.content.stderr,\n                          return_code: part.content.return_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    } else if (\n                      part.content.type === 'code_execution_tool_result_error'\n                    ) {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'code_execution',\n                        isError: true,\n                        result: {\n                          type: 'code_execution_tool_result_error',\n                          errorCode: part.content.error_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    }\n\n                    return;\n                  }\n\n                  default: {\n                    const _exhaustiveCheck: never = contentBlockType;\n                    throw new Error(\n                      `Unsupported content block type: ${_exhaustiveCheck}`,\n                    );\n                  }\n                }\n              }\n\n              case 'content_block_stop': {\n                // when finishing a tool call block, send the full tool call:\n                if (contentBlocks[value.index] != null) {\n                  const contentBlock = contentBlocks[value.index];\n\n                  switch (contentBlock.type) {\n                    case 'text': {\n                      controller.enqueue({\n                        type: 'text-end',\n                        id: String(value.index),\n                      });\n                      break;\n                    }\n\n                    case 'reasoning': {\n                      controller.enqueue({\n                        type: 'reasoning-end',\n                        id: String(value.index),\n                      });\n                      break;\n                    }\n\n                    case 'tool-call':\n                      // when a json response tool is used, the tool call is returned as text,\n                      // so we ignore the tool call content:\n                      if (!usesJsonResponseTool) {\n                        controller.enqueue({\n                          type: 'tool-input-end',\n                          id: contentBlock.toolCallId,\n                        });\n                        controller.enqueue(contentBlock);\n                      }\n                      break;\n                  }\n\n                  delete contentBlocks[value.index];\n                }\n\n                blockType = undefined; // reset block type\n\n                return;\n              }\n\n              case 'content_block_delta': {\n                const deltaType = value.delta.type;\n                switch (deltaType) {\n                  case 'text_delta': {\n                    // when a json response tool is used, the tool call is returned as text,\n                    // so we ignore the text content:\n                    if (usesJsonResponseTool) {\n                      return;\n                    }\n\n                    controller.enqueue({\n                      type: 'text-delta',\n                      id: String(value.index),\n                      delta: value.delta.text,\n                    });\n\n                    return;\n                  }\n\n                  case 'thinking_delta': {\n                    controller.enqueue({\n                      type: 'reasoning-delta',\n                      id: String(value.index),\n                      delta: value.delta.thinking,\n                    });\n\n                    return;\n                  }\n\n                  case 'signature_delta': {\n                    // signature are only supported on thinking blocks:\n                    if (blockType === 'thinking') {\n                      controller.enqueue({\n                        type: 'reasoning-delta',\n                        id: String(value.index),\n                        delta: '',\n                        providerMetadata: {\n                          anthropic: {\n                            signature: value.delta.signature,\n                          } satisfies AnthropicReasoningMetadata,\n                        },\n                      });\n                    }\n\n                    return;\n                  }\n\n                  case 'input_json_delta': {\n                    const contentBlock = contentBlocks[value.index];\n                    const delta = value.delta.partial_json;\n\n                    if (usesJsonResponseTool) {\n                      if (contentBlock?.type !== 'text') {\n                        return;\n                      }\n\n                      controller.enqueue({\n                        type: 'text-delta',\n                        id: String(value.index),\n                        delta,\n                      });\n                    } else {\n                      if (contentBlock?.type !== 'tool-call') {\n                        return;\n                      }\n\n                      controller.enqueue({\n                        type: 'tool-input-delta',\n                        id: contentBlock.toolCallId,\n                        delta,\n                      });\n\n                      contentBlock.input += delta;\n                    }\n\n                    return;\n                  }\n\n                  case 'citations_delta': {\n                    const citation = value.delta.citation;\n\n                    processCitation(\n                      citation,\n                      citationDocuments,\n                      generateId,\n                      source => controller.enqueue(source),\n                    );\n                    // Web search citations are handled in web_search_tool_result content block\n                    return;\n                  }\n\n                  default: {\n                    const _exhaustiveCheck: never = deltaType;\n                    throw new Error(\n                      `Unsupported delta type: ${_exhaustiveCheck}`,\n                    );\n                  }\n                }\n              }\n\n              case 'message_start': {\n                usage.inputTokens = value.message.usage.input_tokens;\n                usage.cachedInputTokens =\n                  value.message.usage.cache_read_input_tokens ?? undefined;\n\n                providerMetadata = {\n                  anthropic: {\n                    usage: value.message.usage as JSONObject,\n                    cacheCreationInputTokens:\n                      value.message.usage.cache_creation_input_tokens ?? null,\n                  },\n                };\n\n                controller.enqueue({\n                  type: 'response-metadata',\n                  id: value.message.id ?? undefined,\n                  modelId: value.message.model ?? undefined,\n                });\n\n                return;\n              }\n\n              case 'message_delta': {\n                usage.outputTokens = value.usage.output_tokens;\n                usage.totalTokens =\n                  (usage.inputTokens ?? 0) + (value.usage.output_tokens ?? 0);\n\n                finishReason = mapAnthropicStopReason({\n                  finishReason: value.delta.stop_reason,\n                  isJsonResponseFromTool: usesJsonResponseTool,\n                });\n                return;\n              }\n\n              case 'message_stop': {\n                controller.enqueue({\n                  type: 'finish',\n                  finishReason,\n                  usage,\n                  providerMetadata,\n                });\n                return;\n              }\n\n              case 'error': {\n                controller.enqueue({ type: 'error', error: value.error });\n                return;\n              }\n\n              default: {\n                const _exhaustiveCheck: never = value;\n                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n              }\n            }\n          },\n        }),\n      ),\n      request: { body },\n      response: { headers: responseHeaders },\n    };\n  }\n}\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst anthropicMessagesResponseSchema = z.object({\n  type: z.literal('message'),\n  id: z.string().nullish(),\n  model: z.string().nullish(),\n  content: z.array(\n    z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('text'),\n        text: z.string(),\n        citations: z.array(citationSchema).optional(),\n      }),\n      z.object({\n        type: z.literal('thinking'),\n        thinking: z.string(),\n        signature: z.string(),\n      }),\n      z.object({\n        type: z.literal('redacted_thinking'),\n        data: z.string(),\n      }),\n      z.object({\n        type: z.literal('tool_use'),\n        id: z.string(),\n        name: z.string(),\n        input: z.unknown(),\n      }),\n      z.object({\n        type: z.literal('server_tool_use'),\n        id: z.string(),\n        name: z.string(),\n        input: z.record(z.string(), z.unknown()).nullish(),\n      }),\n      z.object({\n        type: z.literal('web_search_tool_result'),\n        tool_use_id: z.string(),\n        content: z.union([\n          z.array(\n            z.object({\n              type: z.literal('web_search_result'),\n              url: z.string(),\n              title: z.string(),\n              encrypted_content: z.string(),\n              page_age: z.string().nullish(),\n            }),\n          ),\n          z.object({\n            type: z.literal('web_search_tool_result_error'),\n            error_code: z.string(),\n          }),\n        ]),\n      }),\n      z.object({\n        type: z.literal('code_execution_tool_result'),\n        tool_use_id: z.string(),\n        content: z.union([\n          z.object({\n            type: z.literal('code_execution_result'),\n            stdout: z.string(),\n            stderr: z.string(),\n            return_code: z.number(),\n          }),\n          z.object({\n            type: z.literal('code_execution_tool_result_error'),\n            error_code: z.string(),\n          }),\n        ]),\n      }),\n    ]),\n  ),\n  stop_reason: z.string().nullish(),\n  usage: z.looseObject({\n    input_tokens: z.number(),\n    output_tokens: z.number(),\n    cache_creation_input_tokens: z.number().nullish(),\n    cache_read_input_tokens: z.number().nullish(),\n  }),\n});\n\n// limited version of the schema, focused on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst anthropicMessagesChunkSchema = z.discriminatedUnion('type', [\n  z.object({\n    type: z.literal('message_start'),\n    message: z.object({\n      id: z.string().nullish(),\n      model: z.string().nullish(),\n      usage: z.looseObject({\n        input_tokens: z.number(),\n        output_tokens: z.number(),\n        cache_creation_input_tokens: z.number().nullish(),\n        cache_read_input_tokens: z.number().nullish(),\n      }),\n    }),\n  }),\n  z.object({\n    type: z.literal('content_block_start'),\n    index: z.number(),\n    content_block: z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('text'),\n        text: z.string(),\n      }),\n      z.object({\n        type: z.literal('thinking'),\n        thinking: z.string(),\n      }),\n      z.object({\n        type: z.literal('tool_use'),\n        id: z.string(),\n        name: z.string(),\n      }),\n      z.object({\n        type: z.literal('redacted_thinking'),\n        data: z.string(),\n      }),\n      z.object({\n        type: z.literal('server_tool_use'),\n        id: z.string(),\n        name: z.string(),\n        input: z.record(z.string(), z.unknown()).nullish(),\n      }),\n      z.object({\n        type: z.literal('web_search_tool_result'),\n        tool_use_id: z.string(),\n        content: z.union([\n          z.array(\n            z.object({\n              type: z.literal('web_search_result'),\n              url: z.string(),\n              title: z.string(),\n              encrypted_content: z.string(),\n              page_age: z.string().nullish(),\n            }),\n          ),\n          z.object({\n            type: z.literal('web_search_tool_result_error'),\n            error_code: z.string(),\n          }),\n        ]),\n      }),\n      z.object({\n        type: z.literal('code_execution_tool_result'),\n        tool_use_id: z.string(),\n        content: z.union([\n          z.object({\n            type: z.literal('code_execution_result'),\n            stdout: z.string(),\n            stderr: z.string(),\n            return_code: z.number(),\n          }),\n          z.object({\n            type: z.literal('code_execution_tool_result_error'),\n            error_code: z.string(),\n          }),\n        ]),\n      }),\n    ]),\n  }),\n  z.object({\n    type: z.literal('content_block_delta'),\n    index: z.number(),\n    delta: z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('input_json_delta'),\n        partial_json: z.string(),\n      }),\n      z.object({\n        type: z.literal('text_delta'),\n        text: z.string(),\n      }),\n      z.object({\n        type: z.literal('thinking_delta'),\n        thinking: z.string(),\n      }),\n      z.object({\n        type: z.literal('signature_delta'),\n        signature: z.string(),\n      }),\n      z.object({\n        type: z.literal('citations_delta'),\n        citation: citationSchema,\n      }),\n    ]),\n  }),\n  z.object({\n    type: z.literal('content_block_stop'),\n    index: z.number(),\n  }),\n  z.object({\n    type: z.literal('error'),\n    error: z.object({\n      type: z.string(),\n      message: z.string(),\n    }),\n  }),\n  z.object({\n    type: z.literal('message_delta'),\n    delta: z.object({ stop_reason: z.string().nullish() }),\n    usage: z.object({ output_tokens: z.number() }),\n  }),\n  z.object({\n    type: z.literal('message_stop'),\n  }),\n  z.object({\n    type: z.literal('ping'),\n  }),\n]);\n\nexport const anthropicReasoningMetadataSchema = z.object({\n  signature: z.string().optional(),\n  redactedData: z.string().optional(),\n});\n\nexport type AnthropicReasoningMetadata = z.infer<\n  typeof anthropicReasoningMetadataSchema\n>;\n","import { createJsonErrorResponseHandler } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const anthropicErrorDataSchema = z.object({\n  type: z.literal('error'),\n  error: z.object({\n    type: z.string(),\n    message: z.string(),\n  }),\n});\n\nexport type AnthropicErrorData = z.infer<typeof anthropicErrorDataSchema>;\n\nexport const anthropicFailedResponseHandler = createJsonErrorResponseHandler({\n  errorSchema: anthropicErrorDataSchema,\n  errorToMessage: data => data.error.message,\n});\n","import { z } from 'zod/v4';\n\n// https://docs.anthropic.com/claude/docs/models-overview\nexport type AnthropicMessagesModelId =\n  | 'claude-opus-4-20250514'\n  | 'claude-sonnet-4-20250514'\n  | 'claude-3-7-sonnet-20250219'\n  | 'claude-3-5-sonnet-latest'\n  | 'claude-3-5-sonnet-20241022'\n  | 'claude-3-5-sonnet-20240620'\n  | 'claude-3-5-haiku-latest'\n  | 'claude-3-5-haiku-20241022'\n  | 'claude-3-opus-latest'\n  | 'claude-3-opus-20240229'\n  | 'claude-3-sonnet-20240229'\n  | 'claude-3-haiku-20240307'\n  | (string & {});\n\n/**\n * Anthropic file part provider options for document-specific features.\n * These options apply to individual file parts (documents).\n */\nexport const anthropicFilePartProviderOptions = z.object({\n  /**\n   * Citation configuration for this document.\n   * When enabled, this document will generate citations in the response.\n   */\n  citations: z\n    .object({\n      /**\n       * Enable citations for this document\n       */\n      enabled: z.boolean(),\n    })\n    .optional(),\n\n  /**\n   * Custom title for the document.\n   * If not provided, the filename will be used.\n   */\n  title: z.string().optional(),\n\n  /**\n   * Context about the document that will be passed to the model\n   * but not used towards cited content.\n   * Useful for storing document metadata as text or stringified JSON.\n   */\n  context: z.string().optional(),\n});\n\nexport type AnthropicFilePartProviderOptions = z.infer<\n  typeof anthropicFilePartProviderOptions\n>;\n\nexport const anthropicProviderOptions = z.object({\n  sendReasoning: z.boolean().optional(),\n\n  thinking: z\n    .object({\n      type: z.union([z.literal('enabled'), z.literal('disabled')]),\n      budgetTokens: z.number().optional(),\n    })\n    .optional(),\n\n  /**\n   * Whether to disable parallel function calling during tool use. Default is false.\n   * When set to true, Claude will use at most one tool per response.\n   */\n  disableParallelToolUse: z.boolean().optional(),\n});\n\nexport type AnthropicProviderOptions = z.infer<typeof anthropicProviderOptions>;\n","import {\n  LanguageModelV2CallOptions,\n  LanguageModelV2CallWarning,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { AnthropicTool, AnthropicToolChoice } from './anthropic-api-types';\nimport { getCacheControl } from './get-cache-control';\nimport { webSearch_20250305ArgsSchema } from './tool/web-search_20250305';\n\nfunction isWebSearchTool(\n  tool: unknown,\n): tool is Extract<AnthropicTool, { type: 'web_search_20250305' }> {\n  return (\n    typeof tool === 'object' &&\n    tool !== null &&\n    'type' in tool &&\n    tool.type === 'web_search_20250305'\n  );\n}\n\nexport function prepareTools({\n  tools,\n  toolChoice,\n  disableParallelToolUse,\n}: {\n  tools: LanguageModelV2CallOptions['tools'];\n  toolChoice?: LanguageModelV2CallOptions['toolChoice'];\n  disableParallelToolUse?: boolean;\n}): {\n  tools: Array<AnthropicTool> | undefined;\n  toolChoice: AnthropicToolChoice | undefined;\n  toolWarnings: LanguageModelV2CallWarning[];\n  betas: Set<string>;\n} {\n  // when the tools array is empty, change it to undefined to prevent errors:\n  tools = tools?.length ? tools : undefined;\n\n  const toolWarnings: LanguageModelV2CallWarning[] = [];\n  const betas = new Set<string>();\n\n  if (tools == null) {\n    return { tools: undefined, toolChoice: undefined, toolWarnings, betas };\n  }\n\n  const anthropicTools: AnthropicTool[] = [];\n\n  for (const tool of tools) {\n    // handle direct web search tool objects passed from provider options\n    if (isWebSearchTool(tool)) {\n      anthropicTools.push(tool);\n      continue;\n    }\n\n    switch (tool.type) {\n      case 'function':\n        const cacheControl = getCacheControl(tool.providerOptions);\n\n        anthropicTools.push({\n          name: tool.name,\n          description: tool.description,\n          input_schema: tool.inputSchema,\n          cache_control: cacheControl,\n        });\n        break;\n      case 'provider-defined':\n        switch (tool.id) {\n          case 'anthropic.computer_20250124':\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'computer',\n              type: 'computer_20250124',\n              display_width_px: tool.args.displayWidthPx as number,\n              display_height_px: tool.args.displayHeightPx as number,\n              display_number: tool.args.displayNumber as number,\n            });\n            break;\n          case 'anthropic.computer_20241022':\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'computer',\n              type: 'computer_20241022',\n              display_width_px: tool.args.displayWidthPx as number,\n              display_height_px: tool.args.displayHeightPx as number,\n              display_number: tool.args.displayNumber as number,\n            });\n            break;\n          case 'anthropic.text_editor_20250124':\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'str_replace_editor',\n              type: 'text_editor_20250124',\n            });\n            break;\n          case 'anthropic.text_editor_20241022':\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'str_replace_editor',\n              type: 'text_editor_20241022',\n            });\n            break;\n          case 'anthropic.text_editor_20250429':\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'str_replace_based_edit_tool',\n              type: 'text_editor_20250429',\n            });\n            break;\n          case 'anthropic.bash_20250124':\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'bash',\n              type: 'bash_20250124',\n            });\n            break;\n          case 'anthropic.bash_20241022':\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'bash',\n              type: 'bash_20241022',\n            });\n            break;\n          case 'anthropic.web_search_20250305': {\n            const args = webSearch_20250305ArgsSchema.parse(tool.args);\n            anthropicTools.push({\n              type: 'web_search_20250305',\n              name: 'web_search',\n              max_uses: args.maxUses,\n              allowed_domains: args.allowedDomains,\n              blocked_domains: args.blockedDomains,\n              user_location: args.userLocation,\n            });\n            break;\n          }\n          case 'anthropic.code_execution_20250522': {\n            betas.add('code-execution-2025-05-22');\n            anthropicTools.push({\n              type: 'code_execution_20250522',\n              name: 'code_execution',\n            });\n            break;\n          }\n          default:\n            toolWarnings.push({ type: 'unsupported-tool', tool });\n            break;\n        }\n        break;\n      default:\n        toolWarnings.push({ type: 'unsupported-tool', tool });\n        break;\n    }\n  }\n\n  if (toolChoice == null) {\n    return {\n      tools: anthropicTools,\n      toolChoice: disableParallelToolUse\n        ? { type: 'auto', disable_parallel_tool_use: disableParallelToolUse }\n        : undefined,\n      toolWarnings,\n      betas,\n    };\n  }\n\n  const type = toolChoice.type;\n\n  switch (type) {\n    case 'auto':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'auto',\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    case 'required':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'any',\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    case 'none':\n      // Anthropic does not support 'none' tool choice, so we remove the tools:\n      return { tools: undefined, toolChoice: undefined, toolWarnings, betas };\n    case 'tool':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'tool',\n          name: toolChoice.toolName,\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    default: {\n      const _exhaustiveCheck: never = type;\n      throw new UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`,\n      });\n    }\n  }\n}\n","import { SharedV2ProviderMetadata } from '@ai-sdk/provider';\nimport { AnthropicCacheControl } from './anthropic-api-types';\n\nexport function getCacheControl(\n  providerMetadata: SharedV2ProviderMetadata | undefined,\n): AnthropicCacheControl | undefined {\n  const anthropic = providerMetadata?.anthropic;\n\n  // allow both cacheControl and cache_control:\n  const cacheControlValue = anthropic?.cacheControl ?? anthropic?.cache_control;\n\n  // Pass through value assuming it is of the correct type.\n  // The Anthropic API will validate the value.\n  return cacheControlValue as AnthropicCacheControl | undefined;\n}\n","import { createProviderDefinedToolFactoryWithOutputSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n// Args validation schema\nexport const webSearch_20250305ArgsSchema = z.object({\n  /**\n   * Maximum number of web searches Claude can perform during the conversation.\n   */\n  maxUses: z.number().optional(),\n\n  /**\n   * Optional list of domains that Claude is allowed to search.\n   */\n  allowedDomains: z.array(z.string()).optional(),\n\n  /**\n   * Optional list of domains that Claude should avoid when searching.\n   */\n  blockedDomains: z.array(z.string()).optional(),\n\n  /**\n   * Optional user location information to provide geographically relevant search results.\n   */\n  userLocation: z\n    .object({\n      type: z.literal('approximate'),\n      city: z.string().optional(),\n      region: z.string().optional(),\n      country: z.string().optional(),\n      timezone: z.string().optional(),\n    })\n    .optional(),\n});\n\nexport const webSearch_20250305OutputSchema = z.array(\n  z.object({\n    url: z.string(),\n    title: z.string(),\n    pageAge: z.string().nullable(),\n    encryptedContent: z.string(),\n    type: z.string(),\n  }),\n);\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    /**\n     * The search query to execute.\n     */\n    query: string;\n  },\n  Array<{\n    url: string;\n    title: string;\n    pageAge: string | null;\n    encryptedContent: string;\n    type: string;\n  }>,\n  {\n    /**\n     * Maximum number of web searches Claude can perform during the conversation.\n     */\n    maxUses?: number;\n\n    /**\n     * Optional list of domains that Claude is allowed to search.\n     */\n    allowedDomains?: string[];\n\n    /**\n     * Optional list of domains that Claude should avoid when searching.\n     */\n    blockedDomains?: string[];\n\n    /**\n     * Optional user location information to provide geographically relevant search results.\n     */\n    userLocation?: {\n      type: 'approximate';\n      city?: string;\n      region?: string;\n      country?: string;\n      timezone?: string;\n    };\n  }\n>({\n  id: 'anthropic.web_search_20250305',\n  name: 'web_search',\n  inputSchema: z.object({\n    query: z.string(),\n  }),\n  outputSchema: webSearch_20250305OutputSchema,\n});\n\nexport const webSearch_20250305 = (\n  args: Parameters<typeof factory>[0] = {}, // default\n) => {\n  return factory(args);\n};\n","import {\n  LanguageModelV2CallWarning,\n  LanguageModelV2DataContent,\n  LanguageModelV2Message,\n  LanguageModelV2Prompt,\n  SharedV2ProviderMetadata,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { convertToBase64, parseProviderOptions } from '@ai-sdk/provider-utils';\nimport {\n  AnthropicAssistantMessage,\n  AnthropicMessagesPrompt,\n  AnthropicToolResultContent,\n  AnthropicUserMessage,\n} from './anthropic-api-types';\nimport { anthropicReasoningMetadataSchema } from './anthropic-messages-language-model';\nimport { anthropicFilePartProviderOptions } from './anthropic-messages-options';\nimport { getCacheControl } from './get-cache-control';\nimport { webSearch_20250305OutputSchema } from './tool/web-search_20250305';\nimport { codeExecution_20250522OutputSchema } from './tool/code-execution_20250522';\n\nfunction convertToString(data: LanguageModelV2DataContent): string {\n  if (typeof data === 'string') {\n    return Buffer.from(data, 'base64').toString('utf-8');\n  }\n\n  if (data instanceof Uint8Array) {\n    return new TextDecoder().decode(data);\n  }\n\n  if (data instanceof URL) {\n    throw new UnsupportedFunctionalityError({\n      functionality: 'URL-based text documents are not supported for citations',\n    });\n  }\n\n  throw new UnsupportedFunctionalityError({\n    functionality: `unsupported data type for text documents: ${typeof data}`,\n  });\n}\n\nexport async function convertToAnthropicMessagesPrompt({\n  prompt,\n  sendReasoning,\n  warnings,\n}: {\n  prompt: LanguageModelV2Prompt;\n  sendReasoning: boolean;\n  warnings: LanguageModelV2CallWarning[];\n}): Promise<{\n  prompt: AnthropicMessagesPrompt;\n  betas: Set<string>;\n}> {\n  const betas = new Set<string>();\n  const blocks = groupIntoBlocks(prompt);\n\n  let system: AnthropicMessagesPrompt['system'] = undefined;\n  const messages: AnthropicMessagesPrompt['messages'] = [];\n\n  async function shouldEnableCitations(\n    providerMetadata: SharedV2ProviderMetadata | undefined,\n  ): Promise<boolean> {\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions,\n    });\n\n    return anthropicOptions?.citations?.enabled ?? false;\n  }\n\n  async function getDocumentMetadata(\n    providerMetadata: SharedV2ProviderMetadata | undefined,\n  ): Promise<{ title?: string; context?: string }> {\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions,\n    });\n\n    return {\n      title: anthropicOptions?.title,\n      context: anthropicOptions?.context,\n    };\n  }\n\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    const isLastBlock = i === blocks.length - 1;\n    const type = block.type;\n\n    switch (type) {\n      case 'system': {\n        if (system != null) {\n          throw new UnsupportedFunctionalityError({\n            functionality:\n              'Multiple system messages that are separated by user/assistant messages',\n          });\n        }\n\n        system = block.messages.map(({ content, providerOptions }) => ({\n          type: 'text',\n          text: content,\n          cache_control: getCacheControl(providerOptions),\n        }));\n\n        break;\n      }\n\n      case 'user': {\n        // combines all user and tool messages in this block into a single message:\n        const anthropicContent: AnthropicUserMessage['content'] = [];\n\n        for (const message of block.messages) {\n          const { role, content } = message;\n          switch (role) {\n            case 'user': {\n              for (let j = 0; j < content.length; j++) {\n                const part = content[j];\n\n                // cache control: first add cache control from part.\n                // for the last part of a message,\n                // check also if the message has cache control.\n                const isLastPart = j === content.length - 1;\n\n                const cacheControl =\n                  getCacheControl(part.providerOptions) ??\n                  (isLastPart\n                    ? getCacheControl(message.providerOptions)\n                    : undefined);\n\n                switch (part.type) {\n                  case 'text': {\n                    anthropicContent.push({\n                      type: 'text',\n                      text: part.text,\n                      cache_control: cacheControl,\n                    });\n                    break;\n                  }\n\n                  case 'file': {\n                    if (part.mediaType.startsWith('image/')) {\n                      anthropicContent.push({\n                        type: 'image',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'base64',\n                                media_type:\n                                  part.mediaType === 'image/*'\n                                    ? 'image/jpeg'\n                                    : part.mediaType,\n                                data: convertToBase64(part.data),\n                              },\n                        cache_control: cacheControl,\n                      });\n                    } else if (part.mediaType === 'application/pdf') {\n                      betas.add('pdfs-2024-09-25');\n\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions,\n                      );\n\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions,\n                      );\n\n                      anthropicContent.push({\n                        type: 'document',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'base64',\n                                media_type: 'application/pdf',\n                                data: convertToBase64(part.data),\n                              },\n                        title: metadata.title ?? part.filename,\n                        ...(metadata.context && { context: metadata.context }),\n                        ...(enableCitations && {\n                          citations: { enabled: true },\n                        }),\n                        cache_control: cacheControl,\n                      });\n                    } else if (part.mediaType === 'text/plain') {\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions,\n                      );\n\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions,\n                      );\n\n                      anthropicContent.push({\n                        type: 'document',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'text',\n                                media_type: 'text/plain',\n                                data: convertToString(part.data),\n                              },\n                        title: metadata.title ?? part.filename,\n                        ...(metadata.context && { context: metadata.context }),\n                        ...(enableCitations && {\n                          citations: { enabled: true },\n                        }),\n                        cache_control: cacheControl,\n                      });\n                    } else {\n                      throw new UnsupportedFunctionalityError({\n                        functionality: `media type: ${part.mediaType}`,\n                      });\n                    }\n\n                    break;\n                  }\n                }\n              }\n\n              break;\n            }\n            case 'tool': {\n              for (let i = 0; i < content.length; i++) {\n                const part = content[i];\n\n                // cache control: first add cache control from part.\n                // for the last part of a message,\n                // check also if the message has cache control.\n                const isLastPart = i === content.length - 1;\n\n                const cacheControl =\n                  getCacheControl(part.providerOptions) ??\n                  (isLastPart\n                    ? getCacheControl(message.providerOptions)\n                    : undefined);\n\n                const output = part.output;\n                let contentValue: AnthropicToolResultContent['content'];\n                switch (output.type) {\n                  case 'content':\n                    contentValue = output.value.map(contentPart => {\n                      switch (contentPart.type) {\n                        case 'text':\n                          return {\n                            type: 'text',\n                            text: contentPart.text,\n                            cache_control: undefined,\n                          };\n                        case 'media': {\n                          if (contentPart.mediaType.startsWith('image/')) {\n                            return {\n                              type: 'image',\n                              source: {\n                                type: 'base64',\n                                media_type: contentPart.mediaType,\n                                data: contentPart.data,\n                              },\n                              cache_control: undefined,\n                            };\n                          }\n\n                          throw new UnsupportedFunctionalityError({\n                            functionality: `media type: ${contentPart.mediaType}`,\n                          });\n                        }\n                      }\n                    });\n                    break;\n                  case 'text':\n                  case 'error-text':\n                    contentValue = output.value;\n                    break;\n                  case 'json':\n                  case 'error-json':\n                  default:\n                    contentValue = JSON.stringify(output.value);\n                    break;\n                }\n\n                anthropicContent.push({\n                  type: 'tool_result',\n                  tool_use_id: part.toolCallId,\n                  content: contentValue,\n                  is_error:\n                    output.type === 'error-text' || output.type === 'error-json'\n                      ? true\n                      : undefined,\n                  cache_control: cacheControl,\n                });\n              }\n\n              break;\n            }\n            default: {\n              const _exhaustiveCheck: never = role;\n              throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n            }\n          }\n        }\n\n        messages.push({ role: 'user', content: anthropicContent });\n\n        break;\n      }\n\n      case 'assistant': {\n        // combines multiple assistant messages in this block into a single message:\n        const anthropicContent: AnthropicAssistantMessage['content'] = [];\n\n        for (let j = 0; j < block.messages.length; j++) {\n          const message = block.messages[j];\n          const isLastMessage = j === block.messages.length - 1;\n          const { content } = message;\n\n          for (let k = 0; k < content.length; k++) {\n            const part = content[k];\n            const isLastContentPart = k === content.length - 1;\n\n            // cache control: first add cache control from part.\n            // for the last part of a message,\n            // check also if the message has cache control.\n            const cacheControl =\n              getCacheControl(part.providerOptions) ??\n              (isLastContentPart\n                ? getCacheControl(message.providerOptions)\n                : undefined);\n\n            switch (part.type) {\n              case 'text': {\n                anthropicContent.push({\n                  type: 'text',\n                  text:\n                    // trim the last text part if it's the last message in the block\n                    // because Anthropic does not allow trailing whitespace\n                    // in pre-filled assistant responses\n                    isLastBlock && isLastMessage && isLastContentPart\n                      ? part.text.trim()\n                      : part.text,\n\n                  cache_control: cacheControl,\n                });\n                break;\n              }\n\n              case 'reasoning': {\n                if (sendReasoning) {\n                  const reasoningMetadata = await parseProviderOptions({\n                    provider: 'anthropic',\n                    providerOptions: part.providerOptions,\n                    schema: anthropicReasoningMetadataSchema,\n                  });\n\n                  if (reasoningMetadata != null) {\n                    if (reasoningMetadata.signature != null) {\n                      anthropicContent.push({\n                        type: 'thinking',\n                        thinking: part.text,\n                        signature: reasoningMetadata.signature,\n                        cache_control: cacheControl,\n                      });\n                    } else if (reasoningMetadata.redactedData != null) {\n                      anthropicContent.push({\n                        type: 'redacted_thinking',\n                        data: reasoningMetadata.redactedData,\n                        cache_control: cacheControl,\n                      });\n                    } else {\n                      warnings.push({\n                        type: 'other',\n                        message: 'unsupported reasoning metadata',\n                      });\n                    }\n                  } else {\n                    warnings.push({\n                      type: 'other',\n                      message: 'unsupported reasoning metadata',\n                    });\n                  }\n                } else {\n                  warnings.push({\n                    type: 'other',\n                    message:\n                      'sending reasoning content is disabled for this model',\n                  });\n                }\n                break;\n              }\n\n              case 'tool-call': {\n                if (part.providerExecuted) {\n                  if (part.toolName === 'web_search') {\n                    anthropicContent.push({\n                      type: 'server_tool_use',\n                      id: part.toolCallId,\n                      name: 'web_search',\n                      input: part.input,\n                      cache_control: cacheControl,\n                    });\n\n                    break;\n                  }\n\n                  if (part.toolName === 'code_execution') {\n                    anthropicContent.push({\n                      type: 'server_tool_use',\n                      id: part.toolCallId,\n                      name: 'code_execution',\n                      input: part.input,\n                      cache_control: cacheControl,\n                    });\n\n                    break;\n                  }\n\n                  warnings.push({\n                    type: 'other',\n                    message: `provider executed tool call for tool ${part.toolName} is not supported`,\n                  });\n\n                  break;\n                }\n\n                anthropicContent.push({\n                  type: 'tool_use',\n                  id: part.toolCallId,\n                  name: part.toolName,\n                  input: part.input,\n                  cache_control: cacheControl,\n                });\n                break;\n              }\n\n              case 'tool-result': {\n                if (part.toolName === 'web_search') {\n                  const output = part.output;\n\n                  if (output.type !== 'json') {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`,\n                    });\n\n                    break;\n                  }\n\n                  const webSearchOutput = webSearch_20250305OutputSchema.parse(\n                    output.value,\n                  );\n\n                  anthropicContent.push({\n                    type: 'web_search_tool_result',\n                    tool_use_id: part.toolCallId,\n                    content: webSearchOutput.map(result => ({\n                      url: result.url,\n                      title: result.title,\n                      page_age: result.pageAge,\n                      encrypted_content: result.encryptedContent,\n                      type: result.type,\n                    })),\n                    cache_control: cacheControl,\n                  });\n\n                  break;\n                }\n\n                if (part.toolName === 'code_execution') {\n                  const output = part.output;\n\n                  if (output.type !== 'json') {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`,\n                    });\n\n                    break;\n                  }\n\n                  const codeExecutionOutput =\n                    codeExecution_20250522OutputSchema.parse(output.value);\n\n                  anthropicContent.push({\n                    type: 'code_execution_tool_result',\n                    tool_use_id: part.toolCallId,\n                    content: {\n                      type: codeExecutionOutput.type,\n                      stdout: codeExecutionOutput.stdout,\n                      stderr: codeExecutionOutput.stderr,\n                      return_code: codeExecutionOutput.return_code,\n                    },\n                    cache_control: cacheControl,\n                  });\n\n                  break;\n                }\n\n                warnings.push({\n                  type: 'other',\n                  message: `provider executed tool result for tool ${part.toolName} is not supported`,\n                });\n\n                break;\n              }\n            }\n          }\n        }\n\n        messages.push({ role: 'assistant', content: anthropicContent });\n\n        break;\n      }\n\n      default: {\n        const _exhaustiveCheck: never = type;\n        throw new Error(`content type: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  return {\n    prompt: { system, messages },\n    betas,\n  };\n}\n\ntype SystemBlock = {\n  type: 'system';\n  messages: Array<LanguageModelV2Message & { role: 'system' }>;\n};\ntype AssistantBlock = {\n  type: 'assistant';\n  messages: Array<LanguageModelV2Message & { role: 'assistant' }>;\n};\ntype UserBlock = {\n  type: 'user';\n  messages: Array<LanguageModelV2Message & { role: 'user' | 'tool' }>;\n};\n\nfunction groupIntoBlocks(\n  prompt: LanguageModelV2Prompt,\n): Array<SystemBlock | AssistantBlock | UserBlock> {\n  const blocks: Array<SystemBlock | AssistantBlock | UserBlock> = [];\n  let currentBlock: SystemBlock | AssistantBlock | UserBlock | undefined =\n    undefined;\n\n  for (const message of prompt) {\n    const { role } = message;\n    switch (role) {\n      case 'system': {\n        if (currentBlock?.type !== 'system') {\n          currentBlock = { type: 'system', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'assistant': {\n        if (currentBlock?.type !== 'assistant') {\n          currentBlock = { type: 'assistant', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'user': {\n        if (currentBlock?.type !== 'user') {\n          currentBlock = { type: 'user', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'tool': {\n        if (currentBlock?.type !== 'user') {\n          currentBlock = { type: 'user', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      default: {\n        const _exhaustiveCheck: never = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  return blocks;\n}\n","import { createProviderDefinedToolFactoryWithOutputSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const codeExecution_20250522OutputSchema = z.object({\n  type: z.literal('code_execution_result'),\n  stdout: z.string(),\n  stderr: z.string(),\n  return_code: z.number(),\n});\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    /**\n     * The Python code to execute.\n     */\n    code: string;\n  },\n  {\n    type: 'code_execution_result';\n    stdout: string;\n    stderr: string;\n    return_code: number;\n  },\n  {}\n>({\n  id: 'anthropic.code_execution_20250522',\n  name: 'code_execution',\n  inputSchema: z.object({\n    code: z.string(),\n  }),\n  outputSchema: codeExecution_20250522OutputSchema,\n});\n\nexport const codeExecution_20250522 = (\n  args: Parameters<typeof factory>[0] = {},\n) => {\n  return factory(args);\n};\n","import { LanguageModelV2FinishReason } from '@ai-sdk/provider';\n\n/**\n * @see https://docs.anthropic.com/en/api/messages#response-stop-reason\n */\nexport function mapAnthropicStopReason({\n  finishReason,\n  isJsonResponseFromTool,\n}: {\n  finishReason: string | null | undefined;\n  isJsonResponseFromTool?: boolean;\n}): LanguageModelV2FinishReason {\n  switch (finishReason) {\n    case 'pause_turn':\n    case 'end_turn':\n    case 'stop_sequence':\n      return 'stop';\n    case 'refusal':\n      return 'content-filter';\n    case 'tool_use':\n      return isJsonResponseFromTool ? 'stop' : 'tool-calls';\n    case 'max_tokens':\n      return 'length';\n    default:\n      return 'unknown';\n  }\n}\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport z from 'zod/v4';\n\nexport const bash_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The bash command to run. Required unless the tool is being restarted.\n     */\n    command: string;\n\n    /**\n     * Specifying true will restart this tool. Otherwise, leave this unspecified.\n     */\n    restart?: boolean;\n  },\n  {}\n>({\n  id: 'anthropic.bash_20241022',\n  name: 'bash',\n  inputSchema: z.object({\n    command: z.string(),\n    restart: z.boolean().optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport z from 'zod/v4';\n\nexport const bash_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The bash command to run. Required unless the tool is being restarted.\n     */\n    command: string;\n\n    /**\n     * Specifying true will restart this tool. Otherwise, leave this unspecified.\n     */\n    restart?: boolean;\n  },\n  {}\n>({\n  id: 'anthropic.bash_20250124',\n  name: 'bash',\n  inputSchema: z.object({\n    command: z.string(),\n    restart: z.boolean().optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const computer_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The action to perform. The available actions are:\n     * - `key`: Press a key or key-combination on the keyboard.\n     *   - This supports xdotool's `key` syntax.\n     *   - Examples: \"a\", \"Return\", \"alt+Tab\", \"ctrl+s\", \"Up\", \"KP_0\" (for the numpad 0 key).\n     * - `type`: Type a string of text on the keyboard.\n     * - `cursor_position`: Get the current (x, y) pixel coordinate of the cursor on the screen.\n     * - `mouse_move`: Move the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `left_click`: Click the left mouse button.\n     * - `left_click_drag`: Click and drag the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `right_click`: Click the right mouse button.\n     * - `middle_click`: Click the middle mouse button.\n     * - `double_click`: Double-click the left mouse button.\n     * - `screenshot`: Take a screenshot of the screen.\n     */\n    action:\n      | 'key'\n      | 'type'\n      | 'mouse_move'\n      | 'left_click'\n      | 'left_click_drag'\n      | 'right_click'\n      | 'middle_click'\n      | 'double_click'\n      | 'screenshot'\n      | 'cursor_position';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to move the mouse to. Required only by `action=mouse_move` and `action=left_click_drag`.\n     */\n    coordinate?: number[];\n\n    /**\n     * Required only by `action=type` and `action=key`.\n     */\n    text?: string;\n  },\n  {\n    /**\n     * The width of the display being controlled by the model in pixels.\n     */\n    displayWidthPx: number;\n\n    /**\n     * The height of the display being controlled by the model in pixels.\n     */\n    displayHeightPx: number;\n\n    /**\n     * The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n     */\n    displayNumber?: number;\n  }\n>({\n  id: 'anthropic.computer_20241022',\n  name: 'computer',\n  inputSchema: z.object({\n    action: z.enum([\n      'key',\n      'type',\n      'mouse_move',\n      'left_click',\n      'left_click_drag',\n      'right_click',\n      'middle_click',\n      'double_click',\n      'screenshot',\n      'cursor_position',\n    ]),\n    coordinate: z.array(z.number().int()).optional(),\n    text: z.string().optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const computer_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * - `key`: Press a key or key-combination on the keyboard.\n     *   - This supports xdotool's `key` syntax.\n     *   - Examples: \"a\", \"Return\", \"alt+Tab\", \"ctrl+s\", \"Up\", \"KP_0\" (for the numpad 0 key).\n     * - `hold_key`: Hold down a key or multiple keys for a specified duration (in seconds). Supports the same syntax as `key`.\n     * - `type`: Type a string of text on the keyboard.\n     * - `cursor_position`: Get the current (x, y) pixel coordinate of the cursor on the screen.\n     * - `mouse_move`: Move the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `left_mouse_down`: Press the left mouse button.\n     * - `left_mouse_up`: Release the left mouse button.\n     * - `left_click`: Click the left mouse button at the specified (x, y) pixel coordinate on the screen. You can also include a key combination to hold down while clicking using the `text` parameter.\n     * - `left_click_drag`: Click and drag the cursor from `start_coordinate` to a specified (x, y) pixel coordinate on the screen.\n     * - `right_click`: Click the right mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `middle_click`: Click the middle mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `double_click`: Double-click the left mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `triple_click`: Triple-click the left mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `scroll`: Scroll the screen in a specified direction by a specified amount of clicks of the scroll wheel, at the specified (x, y) pixel coordinate. DO NOT use PageUp/PageDown to scroll.\n     * - `wait`: Wait for a specified duration (in seconds).\n     * - `screenshot`: Take a screenshot of the screen.\n     */\n    action:\n      | 'key'\n      | 'hold_key'\n      | 'type'\n      | 'cursor_position'\n      | 'mouse_move'\n      | 'left_mouse_down'\n      | 'left_mouse_up'\n      | 'left_click'\n      | 'left_click_drag'\n      | 'right_click'\n      | 'middle_click'\n      | 'double_click'\n      | 'triple_click'\n      | 'scroll'\n      | 'wait'\n      | 'screenshot';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to move the mouse to. Required only by `action=mouse_move` and `action=left_click_drag`.\n     */\n    coordinate?: [number, number];\n\n    /**\n     * The duration to hold the key down for. Required only by `action=hold_key` and `action=wait`.\n     */\n    duration?: number;\n\n    /**\n     * The number of 'clicks' to scroll. Required only by `action=scroll`.\n     */\n    scroll_amount?: number;\n\n    /**\n     * The direction to scroll the screen. Required only by `action=scroll`.\n     */\n    scroll_direction?: 'up' | 'down' | 'left' | 'right';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to start the drag from. Required only by `action=left_click_drag`.\n     */\n    start_coordinate?: [number, number];\n\n    /**\n     * Required only by `action=type`, `action=key`, and `action=hold_key`. Can also be used by click or scroll actions to hold down keys while clicking or scrolling.\n     */\n    text?: string;\n  },\n  {\n    /**\n     * The width of the display being controlled by the model in pixels.\n     */\n    displayWidthPx: number;\n\n    /**\n     * The height of the display being controlled by the model in pixels.\n     */\n    displayHeightPx: number;\n\n    /**\n     * The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n     */\n    displayNumber?: number;\n  }\n>({\n  id: 'anthropic.computer_20250124',\n  name: 'computer',\n  inputSchema: z.object({\n    action: z.enum([\n      'key',\n      'hold_key',\n      'type',\n      'cursor_position',\n      'mouse_move',\n      'left_mouse_down',\n      'left_mouse_up',\n      'left_click',\n      'left_click_drag',\n      'right_click',\n      'middle_click',\n      'double_click',\n      'triple_click',\n      'scroll',\n      'wait',\n      'screenshot',\n    ]),\n    coordinate: z.tuple([z.number().int(), z.number().int()]).optional(),\n    duration: z.number().optional(),\n    scroll_amount: z.number().optional(),\n    scroll_direction: z.enum(['up', 'down', 'left', 'right']).optional(),\n    start_coordinate: z.tuple([z.number().int(), z.number().int()]).optional(),\n    text: z.string().optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const textEditor_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert' | 'undo_edit';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20241022',\n  name: 'str_replace_editor',\n  inputSchema: z.object({\n    command: z.enum(['view', 'create', 'str_replace', 'insert', 'undo_edit']),\n    path: z.string(),\n    file_text: z.string().optional(),\n    insert_line: z.number().int().optional(),\n    new_str: z.string().optional(),\n    old_str: z.string().optional(),\n    view_range: z.array(z.number().int()).optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const textEditor_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert' | 'undo_edit';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20250124',\n  name: 'str_replace_editor',\n  inputSchema: z.object({\n    command: z.enum(['view', 'create', 'str_replace', 'insert', 'undo_edit']),\n    path: z.string(),\n    file_text: z.string().optional(),\n    insert_line: z.number().int().optional(),\n    new_str: z.string().optional(),\n    old_str: z.string().optional(),\n    view_range: z.array(z.number().int()).optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const textEditor_20250429 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`.\n     * Note: `undo_edit` is not supported in Claude 4 models.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20250429',\n  name: 'str_replace_based_edit_tool',\n  inputSchema: z.object({\n    command: z.enum(['view', 'create', 'str_replace', 'insert']),\n    path: z.string(),\n    file_text: z.string().optional(),\n    insert_line: z.number().int().optional(),\n    new_str: z.string().optional(),\n    old_str: z.string().optional(),\n    view_range: z.array(z.number().int()).optional(),\n  }),\n});\n","import { bash_20241022 } from './tool/bash_20241022';\nimport { bash_20250124 } from './tool/bash_20250124';\nimport { computer_20241022 } from './tool/computer_20241022';\nimport { computer_20250124 } from './tool/computer_20250124';\nimport { textEditor_20241022 } from './tool/text-editor_20241022';\nimport { textEditor_20250124 } from './tool/text-editor_20250124';\nimport { textEditor_20250429 } from './tool/text-editor_20250429';\nimport { webSearch_20250305 } from './tool/web-search_20250305';\nimport { codeExecution_20250522 } from './tool/code-execution_20250522';\n\nexport const anthropicTools = {\n  /**\n   * Creates a tool for running a bash command. Must have name \"bash\".\n   *\n   * Image results are supported.\n   *\n   * @param execute - The function to execute the tool. Optional.\n   */\n  bash_20241022,\n\n  /**\n   * Creates a tool for running a bash command. Must have name \"bash\".\n   *\n   * Image results are supported.\n   *\n   * @param execute - The function to execute the tool. Optional.\n   */\n  bash_20250124,\n\n  /**\n   * Creates a tool for editing text. Must have name \"str_replace_editor\".\n   */\n  textEditor_20241022,\n\n  /**\n   * Creates a tool for editing text. Must have name \"str_replace_editor\".\n   */\n  textEditor_20250124,\n\n  /**\n   * Creates a tool for editing text. Must have name \"str_replace_based_edit_tool\".\n   * Note: This version does not support the \"undo_edit\" command.\n   */\n  textEditor_20250429,\n\n  /**\n   * Creates a tool for executing actions on a computer. Must have name \"computer\".\n   *\n   * Image results are supported.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20241022,\n\n  /**\n   * Creates a tool for executing actions on a computer. Must have name \"computer\".\n   *\n   * Image results are supported.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   * @param execute - The function to execute the tool. Optional.\n   */\n  computer_20250124,\n\n  /**\n   * Creates a web search tool that gives Claude direct access to real-time web content.\n   * Must have name \"web_search\".\n   *\n   * @param maxUses - Maximum number of web searches Claude can perform during the conversation.\n   * @param allowedDomains - Optional list of domains that Claude is allowed to search.\n   * @param blockedDomains - Optional list of domains that Claude should avoid when searching.\n   * @param userLocation - Optional user location information to provide geographically relevant search results.\n   */\n  webSearch_20250305,\n\n  /**\n   * Creates a tool for executing Python code. Must have name \"code_execution\".\n   */\n  codeExecution_20250522,\n};\n"],"names":["generateId","UnsupportedFunctionalityError","parseProviderOptions","z","z","anthropic","z","anthropicTools","UnsupportedFunctionalityError","createProviderDefinedToolFactoryWithOutputSchema","z","factory","UnsupportedFunctionalityError","_a","_b","i","z","generateId","parseProviderOptions","UnsupportedFunctionalityError","anthropicTools","anthropic","_a","z","createProviderDefinedToolFactory","z","createProviderDefinedToolFactory","z","createProviderDefinedToolFactory","z","createProviderDefinedToolFactory","z","createProviderDefinedToolFactory","z","createProviderDefinedToolFactory","z","_a","generateId"],"mappings":"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","debugId":null}}]
}