{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/ai-sdk-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/api-call-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/empty-response-body-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/get-error-message.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/invalid-argument-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/invalid-prompt-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/invalid-response-data-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/json-parse-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/load-api-key-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/load-setting-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/no-content-generated-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/no-such-model-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/too-many-embedding-values-for-call-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/type-validation-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/errors/unsupported-functionality-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider/src/json-value/is-json.ts"],"sourcesContent":["/**\n * Symbol used for identifying AI SDK Error instances.\n * Enables checking if an error is an instance of AISDKError across package versions.\n */\nconst marker = 'vercel.ai.error';\nconst symbol = Symbol.for(marker);\n\n/**\n * Custom error class for AI SDK related errors.\n * @extends Error\n */\nexport class AISDKError extends Error {\n  private readonly [symbol] = true; // used in isInstance\n\n  /**\n   * The underlying cause of the error, if any.\n   */\n  readonly cause?: unknown;\n\n  /**\n   * Creates an AI SDK Error.\n   *\n   * @param {Object} params - The parameters for creating the error.\n   * @param {string} params.name - The name of the error.\n   * @param {string} params.message - The error message.\n   * @param {unknown} [params.cause] - The underlying cause of the error.\n   */\n  constructor({\n    name,\n    message,\n    cause,\n  }: {\n    name: string;\n    message: string;\n    cause?: unknown;\n  }) {\n    super(message);\n\n    this.name = name;\n    this.cause = cause;\n  }\n\n  /**\n   * Checks if the given error is an AI SDK Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is an AI SDK Error, false otherwise.\n   */\n  static isInstance(error: unknown): error is AISDKError {\n    return AISDKError.hasMarker(error, marker);\n  }\n\n  protected static hasMarker(error: unknown, marker: string): boolean {\n    const markerSymbol = Symbol.for(marker);\n    return (\n      error != null &&\n      typeof error === 'object' &&\n      markerSymbol in error &&\n      typeof error[markerSymbol] === 'boolean' &&\n      error[markerSymbol] === true\n    );\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_APICallError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class APICallError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly url: string;\n  readonly requestBodyValues: unknown;\n  readonly statusCode?: number;\n\n  readonly responseHeaders?: Record<string, string>;\n  readonly responseBody?: string;\n\n  readonly isRetryable: boolean;\n  readonly data?: unknown;\n\n  constructor({\n    message,\n    url,\n    requestBodyValues,\n    statusCode,\n    responseHeaders,\n    responseBody,\n    cause,\n    isRetryable = statusCode != null &&\n      (statusCode === 408 || // request timeout\n        statusCode === 409 || // conflict\n        statusCode === 429 || // too many requests\n        statusCode >= 500), // server error\n    data,\n  }: {\n    message: string;\n    url: string;\n    requestBodyValues: unknown;\n    statusCode?: number;\n    responseHeaders?: Record<string, string>;\n    responseBody?: string;\n    cause?: unknown;\n    isRetryable?: boolean;\n    data?: unknown;\n  }) {\n    super({ name, message, cause });\n\n    this.url = url;\n    this.requestBodyValues = requestBodyValues;\n    this.statusCode = statusCode;\n    this.responseHeaders = responseHeaders;\n    this.responseBody = responseBody;\n    this.isRetryable = isRetryable;\n    this.data = data;\n  }\n\n  static isInstance(error: unknown): error is APICallError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_EmptyResponseBodyError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class EmptyResponseBodyError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  constructor({ message = 'Empty response body' }: { message?: string } = {}) {\n    super({ name, message });\n  }\n\n  static isInstance(error: unknown): error is EmptyResponseBodyError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","export function getErrorMessage(error: unknown | undefined) {\n  if (error == null) {\n    return 'unknown error';\n  }\n\n  if (typeof error === 'string') {\n    return error;\n  }\n\n  if (error instanceof Error) {\n    return error.message;\n  }\n\n  return JSON.stringify(error);\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_InvalidArgumentError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * A function argument is invalid.\n */\nexport class InvalidArgumentError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly argument: string;\n\n  constructor({\n    message,\n    cause,\n    argument,\n  }: {\n    argument: string;\n    message: string;\n    cause?: unknown;\n  }) {\n    super({ name, message, cause });\n\n    this.argument = argument;\n  }\n\n  static isInstance(error: unknown): error is InvalidArgumentError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_InvalidPromptError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * A prompt is invalid. This error should be thrown by providers when they cannot\n * process a prompt.\n */\nexport class InvalidPromptError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly prompt: unknown;\n\n  constructor({\n    prompt,\n    message,\n    cause,\n  }: {\n    prompt: unknown;\n    message: string;\n    cause?: unknown;\n  }) {\n    super({ name, message: `Invalid prompt: ${message}`, cause });\n\n    this.prompt = prompt;\n  }\n\n  static isInstance(error: unknown): error is InvalidPromptError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_InvalidResponseDataError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * Server returned a response with invalid data content.\n * This should be thrown by providers when they cannot parse the response from the API.\n */\nexport class InvalidResponseDataError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly data: unknown;\n\n  constructor({\n    data,\n    message = `Invalid response data: ${JSON.stringify(data)}.`,\n  }: {\n    data: unknown;\n    message?: string;\n  }) {\n    super({ name, message });\n\n    this.data = data;\n  }\n\n  static isInstance(error: unknown): error is InvalidResponseDataError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\nimport { getErrorMessage } from './get-error-message';\n\nconst name = 'AI_JSONParseError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n// TODO v5: rename to ParseError\nexport class JSONParseError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly text: string;\n\n  constructor({ text, cause }: { text: string; cause: unknown }) {\n    super({\n      name,\n      message:\n        `JSON parsing failed: ` +\n        `Text: ${text}.\\n` +\n        `Error message: ${getErrorMessage(cause)}`,\n      cause,\n    });\n\n    this.text = text;\n  }\n\n  static isInstance(error: unknown): error is JSONParseError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_LoadAPIKeyError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class LoadAPIKeyError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  constructor({ message }: { message: string }) {\n    super({ name, message });\n  }\n\n  static isInstance(error: unknown): error is LoadAPIKeyError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_LoadSettingError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class LoadSettingError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  constructor({ message }: { message: string }) {\n    super({ name, message });\n  }\n\n  static isInstance(error: unknown): error is LoadSettingError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_NoContentGeneratedError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\nThrown when the AI provider fails to generate any content.\n */\nexport class NoContentGeneratedError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  constructor({\n    message = 'No content generated.',\n  }: { message?: string } = {}) {\n    super({ name, message });\n  }\n\n  static isInstance(error: unknown): error is NoContentGeneratedError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_NoSuchModelError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class NoSuchModelError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly modelId: string;\n  readonly modelType:\n    | 'languageModel'\n    | 'textEmbeddingModel'\n    | 'imageModel'\n    | 'transcriptionModel'\n    | 'speechModel';\n\n  constructor({\n    errorName = name,\n    modelId,\n    modelType,\n    message = `No such ${modelType}: ${modelId}`,\n  }: {\n    errorName?: string;\n    modelId: string;\n    modelType:\n      | 'languageModel'\n      | 'textEmbeddingModel'\n      | 'imageModel'\n      | 'transcriptionModel'\n      | 'speechModel';\n    message?: string;\n  }) {\n    super({ name: errorName, message });\n\n    this.modelId = modelId;\n    this.modelType = modelType;\n  }\n\n  static isInstance(error: unknown): error is NoSuchModelError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_TooManyEmbeddingValuesForCallError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class TooManyEmbeddingValuesForCallError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly provider: string;\n  readonly modelId: string;\n  readonly maxEmbeddingsPerCall: number;\n  readonly values: Array<unknown>;\n\n  constructor(options: {\n    provider: string;\n    modelId: string;\n    maxEmbeddingsPerCall: number;\n    values: Array<unknown>;\n  }) {\n    super({\n      name,\n      message:\n        `Too many values for a single embedding call. ` +\n        `The ${options.provider} model \"${options.modelId}\" can only embed up to ` +\n        `${options.maxEmbeddingsPerCall} values per call, but ${options.values.length} values were provided.`,\n    });\n\n    this.provider = options.provider;\n    this.modelId = options.modelId;\n    this.maxEmbeddingsPerCall = options.maxEmbeddingsPerCall;\n    this.values = options.values;\n  }\n\n  static isInstance(\n    error: unknown,\n  ): error is TooManyEmbeddingValuesForCallError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\nimport { getErrorMessage } from './get-error-message';\n\nconst name = 'AI_TypeValidationError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class TypeValidationError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly value: unknown;\n\n  constructor({ value, cause }: { value: unknown; cause: unknown }) {\n    super({\n      name,\n      message:\n        `Type validation failed: ` +\n        `Value: ${JSON.stringify(value)}.\\n` +\n        `Error message: ${getErrorMessage(cause)}`,\n      cause,\n    });\n\n    this.value = value;\n  }\n\n  static isInstance(error: unknown): error is TypeValidationError {\n    return AISDKError.hasMarker(error, marker);\n  }\n\n  /**\n   * Wraps an error into a TypeValidationError.\n   * If the cause is already a TypeValidationError with the same value, it returns the cause.\n   * Otherwise, it creates a new TypeValidationError.\n   *\n   * @param {Object} params - The parameters for wrapping the error.\n   * @param {unknown} params.value - The value that failed validation.\n   * @param {unknown} params.cause - The original error or cause of the validation failure.\n   * @returns {TypeValidationError} A TypeValidationError instance.\n   */\n  static wrap({\n    value,\n    cause,\n  }: {\n    value: unknown;\n    cause: unknown;\n  }): TypeValidationError {\n    return TypeValidationError.isInstance(cause) && cause.value === value\n      ? cause\n      : new TypeValidationError({ value, cause });\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_UnsupportedFunctionalityError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class UnsupportedFunctionalityError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly functionality: string;\n\n  constructor({\n    functionality,\n    message = `'${functionality}' functionality not supported.`,\n  }: {\n    functionality: string;\n    message?: string;\n  }) {\n    super({ name, message });\n    this.functionality = functionality;\n  }\n\n  static isInstance(error: unknown): error is UnsupportedFunctionalityError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { JSONArray, JSONObject, JSONValue } from './json-value';\n\nexport function isJSONValue(value: unknown): value is JSONValue {\n  if (\n    value === null ||\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean'\n  ) {\n    return true;\n  }\n\n  if (Array.isArray(value)) {\n    return value.every(isJSONValue);\n  }\n\n  if (typeof value === 'object') {\n    return Object.entries(value).every(\n      ([key, val]) => typeof key === 'string' && isJSONValue(val),\n    );\n  }\n\n  return false;\n}\n\nexport function isJSONArray(value: unknown): value is JSONArray {\n  return Array.isArray(value) && value.every(isJSONValue);\n}\n\nexport function isJSONObject(value: unknown): value is JSONObject {\n  return (\n    value != null &&\n    typeof value === 'object' &&\n    Object.entries(value).every(\n      ([key, val]) => typeof key === 'string' && isJSONValue(val),\n    )\n  );\n}\n"],"names":["name","marker","marker","symbol","_a","name","marker","symbol","_a","name","marker","symbol","_a","name","marker","symbol","_a","name","marker","symbol","_a","name","marker","symbol","_a","name","marker","symbol","_a","name","marker","symbol","_a","name","marker","symbol","_a","name","marker","symbol","_a","name","marker","symbol","_a","name","marker","symbol","_a","name","marker","symbol","_a"],"mappings":"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","debugId":null}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/eventsource-parser/dist/index.js","sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/eventsource-parser/src/errors.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/eventsource-parser/src/parse.ts"],"sourcesContent":["/**\n * The type of error that occurred.\n * @public\n */\nexport type ErrorType = 'invalid-retry' | 'unknown-field'\n\n/**\n * Error thrown when encountering an issue during parsing.\n *\n * @public\n */\nexport class ParseError extends Error {\n  /**\n   * The type of error that occurred.\n   */\n  type: ErrorType\n\n  /**\n   * In the case of an unknown field encountered in the stream, this will be the field name.\n   */\n  field?: string | undefined\n\n  /**\n   * In the case of an unknown field encountered in the stream, this will be the value of the field.\n   */\n  value?: string | undefined\n\n  /**\n   * The line that caused the error, if available.\n   */\n  line?: string | undefined\n\n  constructor(\n    message: string,\n    options: {type: ErrorType; field?: string; value?: string; line?: string},\n  ) {\n    super(message)\n    this.name = 'ParseError'\n    this.type = options.type\n    this.field = options.field\n    this.value = options.value\n    this.line = options.line\n  }\n}\n","/**\n * EventSource/Server-Sent Events parser\n * @see https://html.spec.whatwg.org/multipage/server-sent-events.html\n */\nimport {ParseError} from './errors.ts'\nimport type {EventSourceParser, ParserCallbacks} from './types.ts'\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction noop(_arg: unknown) {\n  // intentional noop\n}\n\n/**\n * Creates a new EventSource parser.\n *\n * @param callbacks - Callbacks to invoke on different parsing events:\n *   - `onEvent` when a new event is parsed\n *   - `onError` when an error occurs\n *   - `onRetry` when a new reconnection interval has been sent from the server\n *   - `onComment` when a comment is encountered in the stream\n *\n * @returns A new EventSource parser, with `parse` and `reset` methods.\n * @public\n */\nexport function createParser(callbacks: ParserCallbacks): EventSourceParser {\n  if (typeof callbacks === 'function') {\n    throw new TypeError(\n      '`callbacks` must be an object, got a function instead. Did you mean `{onEvent: fn}`?',\n    )\n  }\n\n  const {onEvent = noop, onError = noop, onRetry = noop, onComment} = callbacks\n\n  let incompleteLine = ''\n\n  let isFirstChunk = true\n  let id: string | undefined\n  let data = ''\n  let eventType = ''\n\n  function feed(newChunk: string) {\n    // Strip any UTF8 byte order mark (BOM) at the start of the stream\n    const chunk = isFirstChunk ? newChunk.replace(/^\\xEF\\xBB\\xBF/, '') : newChunk\n\n    // If there was a previous incomplete line, append it to the new chunk,\n    // so we may process it together as a new (hopefully complete) chunk.\n    const [complete, incomplete] = splitLines(`${incompleteLine}${chunk}`)\n\n    for (const line of complete) {\n      parseLine(line)\n    }\n\n    incompleteLine = incomplete\n    isFirstChunk = false\n  }\n\n  function parseLine(line: string) {\n    // If the line is empty (a blank line), dispatch the event\n    if (line === '') {\n      dispatchEvent()\n      return\n    }\n\n    // If the line starts with a U+003A COLON character (:), ignore the line.\n    if (line.startsWith(':')) {\n      if (onComment) {\n        onComment(line.slice(line.startsWith(': ') ? 2 : 1))\n      }\n      return\n    }\n\n    // If the line contains a U+003A COLON character (:)\n    const fieldSeparatorIndex = line.indexOf(':')\n    if (fieldSeparatorIndex !== -1) {\n      // Collect the characters on the line before the first U+003A COLON character (:),\n      // and let `field` be that string.\n      const field = line.slice(0, fieldSeparatorIndex)\n\n      // Collect the characters on the line after the first U+003A COLON character (:),\n      // and let `value` be that string. If value starts with a U+0020 SPACE character,\n      // remove it from value.\n      const offset = line[fieldSeparatorIndex + 1] === ' ' ? 2 : 1\n      const value = line.slice(fieldSeparatorIndex + offset)\n\n      processField(field, value, line)\n      return\n    }\n\n    // Otherwise, the string is not empty but does not contain a U+003A COLON character (:)\n    // Process the field using the whole line as the field name, and an empty string as the field value.\n    // 👆 This is according to spec. That means that a line that has the value `data` will result in\n    // a newline being added to the current `data` buffer, for instance.\n    processField(line, '', line)\n  }\n\n  function processField(field: string, value: string, line: string) {\n    // Field names must be compared literally, with no case folding performed.\n    switch (field) {\n      case 'event':\n        // Set the `event type` buffer to field value\n        eventType = value\n        break\n      case 'data':\n        // Append the field value to the `data` buffer, then append a single U+000A LINE FEED(LF)\n        // character to the `data` buffer.\n        data = `${data}${value}\\n`\n        break\n      case 'id':\n        // If the field value does not contain U+0000 NULL, then set the `ID` buffer to\n        // the field value. Otherwise, ignore the field.\n        id = value.includes('\\0') ? undefined : value\n        break\n      case 'retry':\n        // If the field value consists of only ASCII digits, then interpret the field value as an\n        // integer in base ten, and set the event stream's reconnection time to that integer.\n        // Otherwise, ignore the field.\n        if (/^\\d+$/.test(value)) {\n          onRetry(parseInt(value, 10))\n        } else {\n          onError(\n            new ParseError(`Invalid \\`retry\\` value: \"${value}\"`, {\n              type: 'invalid-retry',\n              value,\n              line,\n            }),\n          )\n        }\n        break\n      default:\n        // Otherwise, the field is ignored.\n        onError(\n          new ParseError(\n            `Unknown field \"${field.length > 20 ? `${field.slice(0, 20)}…` : field}\"`,\n            {type: 'unknown-field', field, value, line},\n          ),\n        )\n        break\n    }\n  }\n\n  function dispatchEvent() {\n    const shouldDispatch = data.length > 0\n    if (shouldDispatch) {\n      onEvent({\n        id,\n        event: eventType || undefined,\n        // If the data buffer's last character is a U+000A LINE FEED (LF) character,\n        // then remove the last character from the data buffer.\n        data: data.endsWith('\\n') ? data.slice(0, -1) : data,\n      })\n    }\n\n    // Reset for the next event\n    id = undefined\n    data = ''\n    eventType = ''\n  }\n\n  function reset(options: {consume?: boolean} = {}) {\n    if (incompleteLine && options.consume) {\n      parseLine(incompleteLine)\n    }\n\n    isFirstChunk = true\n    id = undefined\n    data = ''\n    eventType = ''\n    incompleteLine = ''\n  }\n\n  return {feed, reset}\n}\n\n/**\n * For the given `chunk`, split it into lines according to spec, and return any remaining incomplete line.\n *\n * @param chunk - The chunk to split into lines\n * @returns A tuple containing an array of complete lines, and any remaining incomplete line\n * @internal\n */\nfunction splitLines(chunk: string): [complete: Array<string>, incomplete: string] {\n  /**\n   * According to the spec, a line is terminated by either:\n   * - U+000D CARRIAGE RETURN U+000A LINE FEED (CRLF) character pair\n   * - a single U+000A LINE FEED(LF) character not preceded by a U+000D CARRIAGE RETURN(CR) character\n   * - a single U+000D CARRIAGE RETURN(CR) character not followed by a U+000A LINE FEED(LF) character\n   */\n  const lines: Array<string> = []\n  let incompleteLine = ''\n  let searchIndex = 0\n\n  while (searchIndex < chunk.length) {\n    // Find next line terminator\n    const crIndex = chunk.indexOf('\\r', searchIndex)\n    const lfIndex = chunk.indexOf('\\n', searchIndex)\n\n    // Determine line end\n    let lineEnd = -1\n    if (crIndex !== -1 && lfIndex !== -1) {\n      // CRLF case\n      lineEnd = Math.min(crIndex, lfIndex)\n    } else if (crIndex !== -1) {\n      // CR at the end of a chunk might be part of a CRLF sequence that spans chunks,\n      // so we shouldn't treat it as a line terminator (yet)\n      if (crIndex === chunk.length - 1) {\n        lineEnd = -1\n      } else {\n        lineEnd = crIndex\n      }\n    } else if (lfIndex !== -1) {\n      lineEnd = lfIndex\n    }\n\n    // Extract line if terminator found\n    if (lineEnd === -1) {\n      // No terminator found, rest is incomplete\n      incompleteLine = chunk.slice(searchIndex)\n      break\n    } else {\n      const line = chunk.slice(searchIndex, lineEnd)\n      lines.push(line)\n\n      // Move past line terminator\n      searchIndex = lineEnd + 1\n      if (chunk[searchIndex - 1] === '\\r' && chunk[searchIndex] === '\\n') {\n        searchIndex++\n      }\n    }\n  }\n\n  return [lines, incompleteLine]\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 508, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/eventsource-parser/dist/stream.js","sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/eventsource-parser/src/stream.ts"],"sourcesContent":["import {createParser} from './parse.ts'\nimport type {EventSourceMessage, EventSourceParser} from './types.ts'\n\n/**\n * Options for the EventSourceParserStream.\n *\n * @public\n */\nexport interface StreamOptions {\n  /**\n   * Behavior when a parsing error occurs.\n   *\n   * - A custom function can be provided to handle the error.\n   * - `'terminate'` will error the stream and stop parsing.\n   * - Any other value will ignore the error and continue parsing.\n   *\n   * @defaultValue `undefined`\n   */\n  onError?: ('terminate' | ((error: Error) => void)) | undefined\n\n  /**\n   * Callback for when a reconnection interval is sent from the server.\n   *\n   * @param retry - The number of milliseconds to wait before reconnecting.\n   */\n  onRetry?: ((retry: number) => void) | undefined\n\n  /**\n   * Callback for when a comment is encountered in the stream.\n   *\n   * @param comment - The comment encountered in the stream.\n   */\n  onComment?: ((comment: string) => void) | undefined\n}\n\n/**\n * A TransformStream that ingests a stream of strings and produces a stream of `EventSourceMessage`.\n *\n * @example Basic usage\n * ```\n * const eventStream =\n *   response.body\n *     .pipeThrough(new TextDecoderStream())\n *     .pipeThrough(new EventSourceParserStream())\n * ```\n *\n * @example Terminate stream on parsing errors\n * ```\n * const eventStream =\n *  response.body\n *   .pipeThrough(new TextDecoderStream())\n *   .pipeThrough(new EventSourceParserStream({terminateOnError: true}))\n * ```\n *\n * @public\n */\nexport class EventSourceParserStream extends TransformStream<string, EventSourceMessage> {\n  constructor({onError, onRetry, onComment}: StreamOptions = {}) {\n    let parser!: EventSourceParser\n\n    super({\n      start(controller) {\n        parser = createParser({\n          onEvent: (event) => {\n            controller.enqueue(event)\n          },\n          onError(error) {\n            if (onError === 'terminate') {\n              controller.error(error)\n            } else if (typeof onError === 'function') {\n              onError(error)\n            }\n\n            // Ignore by default\n          },\n          onRetry,\n          onComment,\n        })\n      },\n      transform(chunk) {\n        parser.feed(chunk)\n      },\n    })\n  }\n}\n\nexport {type ErrorType, ParseError} from './errors.ts'\nexport type {EventSourceMessage} from './types.ts'\n"],"names":[],"mappings":";;;;;;;AAwDO,MAAM,gCAAgC,gBAA4C;IACvF,YAAY,EAAC,OAAA,EAAS,OAAA,EAAS,SAAA,CAAA,CAAA,GAA4B,CAAA,CAAA,CAAI;QAC7D,IAAI;QAEJ,KAAA,CAAM;YACJ,OAAM,UAAA,EAAY;gBAChB,aAAS,wKAAA,EAAa;oBACpB,SAAS,CAAC,UAAU;wBAClB,WAAW,OAAA,CAAQ,KAAK;oBAC1B;oBACA,SAAQ,KAAA,EAAO;wBACT,YAAY,cACd,WAAW,KAAA,CAAM,KAAK,IACb,OAAO,WAAY,cAC5B,QAAQ,KAAK;oBAIjB;oBACA;oBACA;gBAAA,CACD;YACH;YACA,WAAU,KAAA,EAAO;gBACf,OAAO,IAAA,CAAK,KAAK;YACnB;QAAA,CACD;IACH;AACF","debugId":null}},
    {"offset": {"line": 543, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/combine-headers.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/convert-async-iterator-to-readable-stream.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/delay.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/extract-response-headers.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/generate-id.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/get-error-message.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/get-from-api.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/handle-fetch-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/is-abort-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/remove-undefined-entries.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/inject-json-instruction.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/is-url-supported.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/load-api-key.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/load-optional-setting.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/load-setting.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/media-type-to-extension.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/parse-json.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/secure-json-parse.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/validate-types.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/validator.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/parse-json-event-stream.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/parse-provider-options.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/post-to-api.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/types/tool.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/provider-defined-tool-factory.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/resolve.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/response-handler.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-schema.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/get-relative-path.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/options.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/select-parser.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/any.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/array.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/bigint.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/boolean.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/branded.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/catch.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/date.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/default.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/effects.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/enum.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/intersection.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/literal.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/record.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/string.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/map.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/native-enum.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/never.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/null.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/union.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/nullable.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/number.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/object.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/optional.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/pipeline.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/promise.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/set.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/tuple.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/undefined.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/unknown.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parsers/readonly.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/parse-def.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/refs.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/zod-to-json-schema.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/zod-to-json-schema/index.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/schema.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/uint8-utils.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/without-trailing-slash.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/is-async-iterable.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/types/execute-tool.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/provider-utils/src/index.ts"],"sourcesContent":["export function combineHeaders(\n  ...headers: Array<Record<string, string | undefined> | undefined>\n): Record<string, string | undefined> {\n  return headers.reduce(\n    (combinedHeaders, currentHeaders) => ({\n      ...combinedHeaders,\n      ...(currentHeaders ?? {}),\n    }),\n    {},\n  ) as Record<string, string | undefined>;\n}\n","/**\n * Converts an AsyncIterator to a ReadableStream.\n *\n * @template T - The type of elements produced by the AsyncIterator.\n * @param { <T>} iterator - The AsyncIterator to convert.\n * @returns {ReadableStream<T>} - A ReadableStream that provides the same data as the AsyncIterator.\n */\nexport function convertAsyncIteratorToReadableStream<T>(\n  iterator: AsyncIterator<T>,\n): ReadableStream<T> {\n  return new ReadableStream<T>({\n    /**\n     * Called when the consumer wants to pull more data from the stream.\n     *\n     * @param {ReadableStreamDefaultController<T>} controller - The controller to enqueue data into the stream.\n     * @returns {Promise<void>}\n     */\n    async pull(controller) {\n      try {\n        const { value, done } = await iterator.next();\n        if (done) {\n          controller.close();\n        } else {\n          controller.enqueue(value);\n        }\n      } catch (error) {\n        controller.error(error);\n      }\n    },\n    /**\n     * Called when the consumer cancels the stream.\n     */\n    cancel() {},\n  });\n}\n","/**\n * Creates a Promise that resolves after a specified delay\n * @param delayInMs - The delay duration in milliseconds. If null or undefined, resolves immediately.\n * @param signal - Optional AbortSignal to cancel the delay\n * @returns A Promise that resolves after the specified delay\n * @throws {DOMException} When the signal is aborted\n */\nexport async function delay(\n  delayInMs?: number | null,\n  options?: {\n    abortSignal?: AbortSignal;\n  },\n): Promise<void> {\n  if (delayInMs == null) {\n    return Promise.resolve();\n  }\n\n  const signal = options?.abortSignal;\n\n  return new Promise<void>((resolve, reject) => {\n    if (signal?.aborted) {\n      reject(createAbortError());\n      return;\n    }\n\n    const timeoutId = setTimeout(() => {\n      cleanup();\n      resolve();\n    }, delayInMs);\n\n    const cleanup = () => {\n      clearTimeout(timeoutId);\n      signal?.removeEventListener('abort', onAbort);\n    };\n\n    const onAbort = () => {\n      cleanup();\n      reject(createAbortError());\n    };\n\n    signal?.addEventListener('abort', onAbort);\n  });\n}\n\nfunction createAbortError(): DOMException {\n  return new DOMException('Delay was aborted', 'AbortError');\n}\n","/**\nExtracts the headers from a response object and returns them as a key-value object.\n\n@param response - The response object to extract headers from.\n@returns The headers as a key-value object.\n*/\nexport function extractResponseHeaders(response: Response) {\n  return Object.fromEntries<string>([...response.headers]);\n}\n","import { InvalidArgumentError } from '@ai-sdk/provider';\n\n/**\nCreates an ID generator.\nThe total length of the ID is the sum of the prefix, separator, and random part length.\nNot cryptographically secure.\n\n@param alphabet - The alphabet to use for the ID. Default: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.\n@param prefix - The prefix of the ID to generate. Optional.\n@param separator - The separator between the prefix and the random part of the ID. Default: '-'.\n@param size - The size of the random part of the ID to generate. Default: 16.\n */\nexport const createIdGenerator = ({\n  prefix,\n  size = 16,\n  alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n  separator = '-',\n}: {\n  prefix?: string;\n  separator?: string;\n  size?: number;\n  alphabet?: string;\n} = {}): IdGenerator => {\n  const generator = () => {\n    const alphabetLength = alphabet.length;\n    const chars = new Array(size);\n    for (let i = 0; i < size; i++) {\n      chars[i] = alphabet[(Math.random() * alphabetLength) | 0];\n    }\n    return chars.join('');\n  };\n\n  if (prefix == null) {\n    return generator;\n  }\n\n  // check that the prefix is not part of the alphabet (otherwise prefix checking can fail randomly)\n  if (alphabet.includes(separator)) {\n    throw new InvalidArgumentError({\n      argument: 'separator',\n      message: `The separator \"${separator}\" must not be part of the alphabet \"${alphabet}\".`,\n    });\n  }\n\n  return () => `${prefix}${separator}${generator()}`;\n};\n\n/**\nA function that generates an ID.\n */\nexport type IdGenerator = () => string;\n\n/**\nGenerates a 16-character random string to use for IDs.\nNot cryptographically secure.\n */\nexport const generateId = createIdGenerator();\n","export function getErrorMessage(error: unknown | undefined) {\n  if (error == null) {\n    return 'unknown error';\n  }\n\n  if (typeof error === 'string') {\n    return error;\n  }\n\n  if (error instanceof Error) {\n    return error.message;\n  }\n\n  return JSON.stringify(error);\n}\n","import { APICallError } from '@ai-sdk/provider';\nimport { extractResponseHeaders } from './extract-response-headers';\nimport { FetchFunction } from './fetch-function';\nimport { handleFetchError } from './handle-fetch-error';\nimport { isAbortError } from './is-abort-error';\nimport { removeUndefinedEntries } from './remove-undefined-entries';\nimport { ResponseHandler } from './response-handler';\n\n// use function to allow for mocking in tests:\nconst getOriginalFetch = () => globalThis.fetch;\n\nexport const getFromApi = async <T>({\n  url,\n  headers = {},\n  successfulResponseHandler,\n  failedResponseHandler,\n  abortSignal,\n  fetch = getOriginalFetch(),\n}: {\n  url: string;\n  headers?: Record<string, string | undefined>;\n  failedResponseHandler: ResponseHandler<Error>;\n  successfulResponseHandler: ResponseHandler<T>;\n  abortSignal?: AbortSignal;\n  fetch?: FetchFunction;\n}) => {\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: removeUndefinedEntries(headers),\n      signal: abortSignal,\n    });\n\n    const responseHeaders = extractResponseHeaders(response);\n\n    if (!response.ok) {\n      let errorInformation: {\n        value: Error;\n        responseHeaders?: Record<string, string> | undefined;\n      };\n\n      try {\n        errorInformation = await failedResponseHandler({\n          response,\n          url,\n          requestBodyValues: {},\n        });\n      } catch (error) {\n        if (isAbortError(error) || APICallError.isInstance(error)) {\n          throw error;\n        }\n\n        throw new APICallError({\n          message: 'Failed to process error response',\n          cause: error,\n          statusCode: response.status,\n          url,\n          responseHeaders,\n          requestBodyValues: {},\n        });\n      }\n\n      throw errorInformation.value;\n    }\n\n    try {\n      return await successfulResponseHandler({\n        response,\n        url,\n        requestBodyValues: {},\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        if (isAbortError(error) || APICallError.isInstance(error)) {\n          throw error;\n        }\n      }\n\n      throw new APICallError({\n        message: 'Failed to process successful response',\n        cause: error,\n        statusCode: response.status,\n        url,\n        responseHeaders,\n        requestBodyValues: {},\n      });\n    }\n  } catch (error) {\n    throw handleFetchError({ error, url, requestBodyValues: {} });\n  }\n};\n","import { APICallError } from '@ai-sdk/provider';\nimport { isAbortError } from './is-abort-error';\n\nconst FETCH_FAILED_ERROR_MESSAGES = ['fetch failed', 'failed to fetch'];\n\nexport function handleFetchError({\n  error,\n  url,\n  requestBodyValues,\n}: {\n  error: unknown;\n  url: string;\n  requestBodyValues: unknown;\n}) {\n  if (isAbortError(error)) {\n    return error;\n  }\n\n  // unwrap original error when fetch failed (for easier debugging):\n  if (\n    error instanceof TypeError &&\n    FETCH_FAILED_ERROR_MESSAGES.includes(error.message.toLowerCase())\n  ) {\n    const cause = (error as any).cause;\n\n    if (cause != null) {\n      // Failed to connect to server:\n      return new APICallError({\n        message: `Cannot connect to API: ${cause.message}`,\n        cause,\n        url,\n        requestBodyValues,\n        isRetryable: true, // retry when network error\n      });\n    }\n  }\n\n  return error;\n}\n","export function isAbortError(error: unknown): error is Error {\n  return (\n    (error instanceof Error || error instanceof DOMException) &&\n    (error.name === 'AbortError' ||\n      error.name === 'ResponseAborted' || // Next.js\n      error.name === 'TimeoutError')\n  );\n}\n","/**\n * Removes entries from a record where the value is null or undefined.\n * @param record - The input object whose entries may be null or undefined.\n * @returns A new object containing only entries with non-null and non-undefined values.\n */\nexport function removeUndefinedEntries<T>(\n  record: Record<string, T | undefined>,\n): Record<string, T> {\n  return Object.fromEntries(\n    Object.entries(record).filter(([_key, value]) => value != null),\n  ) as Record<string, T>;\n}\n","import {\n  JSONSchema7,\n  LanguageModelV2Message,\n  LanguageModelV2Prompt,\n} from '@ai-sdk/provider';\n\nconst DEFAULT_SCHEMA_PREFIX = 'JSON schema:';\nconst DEFAULT_SCHEMA_SUFFIX =\n  'You MUST answer with a JSON object that matches the JSON schema above.';\nconst DEFAULT_GENERIC_SUFFIX = 'You MUST answer with JSON.';\n\nexport function injectJsonInstruction({\n  prompt,\n  schema,\n  schemaPrefix = schema != null ? DEFAULT_SCHEMA_PREFIX : undefined,\n  schemaSuffix = schema != null\n    ? DEFAULT_SCHEMA_SUFFIX\n    : DEFAULT_GENERIC_SUFFIX,\n}: {\n  prompt?: string;\n  schema?: JSONSchema7;\n  schemaPrefix?: string;\n  schemaSuffix?: string;\n}): string {\n  return [\n    prompt != null && prompt.length > 0 ? prompt : undefined,\n    prompt != null && prompt.length > 0 ? '' : undefined, // add a newline if prompt is not null\n    schemaPrefix,\n    schema != null ? JSON.stringify(schema) : undefined,\n    schemaSuffix,\n  ]\n    .filter(line => line != null)\n    .join('\\n');\n}\n\nexport function injectJsonInstructionIntoMessages({\n  messages,\n  schema,\n  schemaPrefix,\n  schemaSuffix,\n}: {\n  messages: LanguageModelV2Prompt;\n  schema?: JSONSchema7;\n  schemaPrefix?: string;\n  schemaSuffix?: string;\n}): LanguageModelV2Prompt {\n  const systemMessage: LanguageModelV2Message =\n    messages[0]?.role === 'system'\n      ? { ...messages[0] }\n      : { role: 'system', content: '' };\n\n  systemMessage.content = injectJsonInstruction({\n    prompt: systemMessage.content,\n    schema,\n    schemaPrefix,\n    schemaSuffix,\n  });\n\n  return [\n    systemMessage,\n    ...(messages[0]?.role === 'system' ? messages.slice(1) : messages),\n  ];\n}\n","/**\n * Checks if the given URL is supported natively by the model.\n *\n * @param mediaType - The media type of the URL. Case-sensitive.\n * @param url - The URL to check.\n * @param supportedUrls - A record where keys are case-sensitive media types (or '*')\n *                        and values are arrays of RegExp patterns for URLs.\n *\n * @returns `true` if the URL matches a pattern under the specific media type\n *          or the wildcard '*', `false` otherwise.\n */\nexport function isUrlSupported({\n  mediaType,\n  url,\n  supportedUrls,\n}: {\n  mediaType: string;\n  url: string;\n  supportedUrls: Record<string, RegExp[]>;\n}): boolean {\n  // standardize media type and url to lower case\n  url = url.toLowerCase();\n  mediaType = mediaType.toLowerCase();\n\n  return (\n    Object.entries(supportedUrls)\n      // standardize supported url map into lowercase prefixes:\n      .map(([key, value]) => {\n        const mediaType = key.toLowerCase();\n        return mediaType === '*' || mediaType === '*/*'\n          ? { mediaTypePrefix: '', regexes: value }\n          : { mediaTypePrefix: mediaType.replace(/\\*/, ''), regexes: value };\n      })\n      // gather all regexp pattern from matched media type prefixes:\n      .filter(({ mediaTypePrefix }) => mediaType.startsWith(mediaTypePrefix))\n      .flatMap(({ regexes }) => regexes)\n      // check if any pattern matches the url:\n      .some(pattern => pattern.test(url))\n  );\n}\n","import { LoadAPIKeyError } from '@ai-sdk/provider';\n\nexport function loadApiKey({\n  apiKey,\n  environmentVariableName,\n  apiKeyParameterName = 'apiKey',\n  description,\n}: {\n  apiKey: string | undefined;\n  environmentVariableName: string;\n  apiKeyParameterName?: string;\n  description: string;\n}): string {\n  if (typeof apiKey === 'string') {\n    return apiKey;\n  }\n\n  if (apiKey != null) {\n    throw new LoadAPIKeyError({\n      message: `${description} API key must be a string.`,\n    });\n  }\n\n  if (typeof process === 'undefined') {\n    throw new LoadAPIKeyError({\n      message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter. Environment variables is not supported in this environment.`,\n    });\n  }\n\n  apiKey = process.env[environmentVariableName];\n\n  if (apiKey == null) {\n    throw new LoadAPIKeyError({\n      message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter or the ${environmentVariableName} environment variable.`,\n    });\n  }\n\n  if (typeof apiKey !== 'string') {\n    throw new LoadAPIKeyError({\n      message: `${description} API key must be a string. The value of the ${environmentVariableName} environment variable is not a string.`,\n    });\n  }\n\n  return apiKey;\n}\n","/**\n * Loads an optional `string` setting from the environment or a parameter.\n *\n * @param settingValue - The setting value.\n * @param environmentVariableName - The environment variable name.\n * @returns The setting value.\n */\nexport function loadOptionalSetting({\n  settingValue,\n  environmentVariableName,\n}: {\n  settingValue: string | undefined;\n  environmentVariableName: string;\n}): string | undefined {\n  if (typeof settingValue === 'string') {\n    return settingValue;\n  }\n\n  if (settingValue != null || typeof process === 'undefined') {\n    return undefined;\n  }\n\n  settingValue = process.env[environmentVariableName];\n\n  if (settingValue == null || typeof settingValue !== 'string') {\n    return undefined;\n  }\n\n  return settingValue;\n}\n","import { LoadSettingError } from '@ai-sdk/provider';\n\n/**\n * Loads a `string` setting from the environment or a parameter.\n *\n * @param settingValue - The setting value.\n * @param environmentVariableName - The environment variable name.\n * @param settingName - The setting name.\n * @param description - The description of the setting.\n * @returns The setting value.\n */\nexport function loadSetting({\n  settingValue,\n  environmentVariableName,\n  settingName,\n  description,\n}: {\n  settingValue: string | undefined;\n  environmentVariableName: string;\n  settingName: string;\n  description: string;\n}): string {\n  if (typeof settingValue === 'string') {\n    return settingValue;\n  }\n\n  if (settingValue != null) {\n    throw new LoadSettingError({\n      message: `${description} setting must be a string.`,\n    });\n  }\n\n  if (typeof process === 'undefined') {\n    throw new LoadSettingError({\n      message:\n        `${description} setting is missing. ` +\n        `Pass it using the '${settingName}' parameter. ` +\n        `Environment variables is not supported in this environment.`,\n    });\n  }\n\n  settingValue = process.env[environmentVariableName];\n\n  if (settingValue == null) {\n    throw new LoadSettingError({\n      message:\n        `${description} setting is missing. ` +\n        `Pass it using the '${settingName}' parameter ` +\n        `or the ${environmentVariableName} environment variable.`,\n    });\n  }\n\n  if (typeof settingValue !== 'string') {\n    throw new LoadSettingError({\n      message:\n        `${description} setting must be a string. ` +\n        `The value of the ${environmentVariableName} environment variable is not a string.`,\n    });\n  }\n\n  return settingValue;\n}\n","/**\n * Maps a media type to its corresponding file extension.\n * It was originally introduced to set a filename for audio file uploads\n * in https://github.com/vercel/ai/pull/8159.\n *\n * @param mediaType The media type to map.\n * @returns The corresponding file extension\n * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/MIME_types/Common_types\n */\nexport function mediaTypeToExtension(mediaType: string) {\n  const [_type, subtype = ''] = mediaType.toLowerCase().split('/');\n\n  return (\n    {\n      mpeg: 'mp3',\n      'x-wav': 'wav',\n      opus: 'ogg',\n      mp4: 'm4a',\n      'x-m4a': 'm4a',\n    }[subtype] ?? subtype\n  );\n}\n","import {\n  JSONParseError,\n  JSONValue,\n  TypeValidationError,\n} from '@ai-sdk/provider';\nimport * as z3 from 'zod/v3';\nimport * as z4 from 'zod/v4';\nimport { secureJsonParse } from './secure-json-parse';\nimport { safeValidateTypes, validateTypes } from './validate-types';\nimport { Validator } from './validator';\n\n/**\n * Parses a JSON string into an unknown object.\n *\n * @param text - The JSON string to parse.\n * @returns {JSONValue} - The parsed JSON object.\n */\nexport async function parseJSON(options: {\n  text: string;\n  schema?: undefined;\n}): Promise<JSONValue>;\n/**\n * Parses a JSON string into a strongly-typed object using the provided schema.\n *\n * @template T - The type of the object to parse the JSON into.\n * @param {string} text - The JSON string to parse.\n * @param {Validator<T>} schema - The schema to use for parsing the JSON.\n * @returns {Promise<T>} - The parsed object.\n */\nexport async function parseJSON<T>(options: {\n  text: string;\n  schema: z4.core.$ZodType<T> | z3.Schema<T> | Validator<T>;\n}): Promise<T>;\nexport async function parseJSON<T>({\n  text,\n  schema,\n}: {\n  text: string;\n  schema?: z4.core.$ZodType<T> | z3.Schema<T> | Validator<T>;\n}): Promise<T> {\n  try {\n    const value = secureJsonParse(text);\n\n    if (schema == null) {\n      return value;\n    }\n\n    return validateTypes<T>({ value, schema });\n  } catch (error) {\n    if (\n      JSONParseError.isInstance(error) ||\n      TypeValidationError.isInstance(error)\n    ) {\n      throw error;\n    }\n\n    throw new JSONParseError({ text, cause: error });\n  }\n}\n\nexport type ParseResult<T> =\n  | { success: true; value: T; rawValue: unknown }\n  | {\n      success: false;\n      error: JSONParseError | TypeValidationError;\n      rawValue: unknown;\n    };\n\n/**\n * Safely parses a JSON string and returns the result as an object of type `unknown`.\n *\n * @param text - The JSON string to parse.\n * @returns {Promise<object>} Either an object with `success: true` and the parsed data, or an object with `success: false` and the error that occurred.\n */\nexport async function safeParseJSON(options: {\n  text: string;\n  schema?: undefined;\n}): Promise<ParseResult<JSONValue>>;\n/**\n * Safely parses a JSON string into a strongly-typed object, using a provided schema to validate the object.\n *\n * @template T - The type of the object to parse the JSON into.\n * @param {string} text - The JSON string to parse.\n * @param {Validator<T>} schema - The schema to use for parsing the JSON.\n * @returns An object with either a `success` flag and the parsed and typed data, or a `success` flag and an error object.\n */\nexport async function safeParseJSON<T>(options: {\n  text: string;\n  schema: z4.core.$ZodType<T> | z3.Schema<T> | Validator<T>;\n}): Promise<ParseResult<T>>;\nexport async function safeParseJSON<T>({\n  text,\n  schema,\n}: {\n  text: string;\n  schema?: z4.core.$ZodType<T> | z3.Schema<T> | Validator<T>;\n}): Promise<ParseResult<T>> {\n  try {\n    const value = secureJsonParse(text);\n\n    if (schema == null) {\n      return { success: true, value: value as T, rawValue: value };\n    }\n\n    return await safeValidateTypes<T>({ value, schema });\n  } catch (error) {\n    return {\n      success: false,\n      error: JSONParseError.isInstance(error)\n        ? error\n        : new JSONParseError({ text, cause: error }),\n      rawValue: undefined,\n    };\n  }\n}\n\nexport function isParsableJson(input: string): boolean {\n  try {\n    secureJsonParse(input);\n    return true;\n  } catch {\n    return false;\n  }\n}\n","// Licensed under BSD-3-Clause (this file only)\n// Code adapted from https://github.com/fastify/secure-json-parse/blob/783fcb1b5434709466759847cec974381939673a/index.js\n//\n// Copyright (c) Vercel, Inc. (https://vercel.com)\n// Copyright (c) 2019 The Fastify Team\n// Copyright (c) 2019, Sideway Inc, and project contributors\n// All rights reserved.\n//\n// The complete list of contributors can be found at:\n// - https://github.com/hapijs/bourne/graphs/contributors\n// - https://github.com/fastify/secure-json-parse/graphs/contributors\n// - https://github.com/vercel/ai/commits/main/packages/provider-utils/src/secure-parse-json.ts\n//\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n//\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n//\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n//\n// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nconst suspectProtoRx = /\"__proto__\"\\s*:/;\nconst suspectConstructorRx = /\"constructor\"\\s*:/;\n\nfunction _parse(text: string) {\n  // Parse normally\n  const obj = JSON.parse(text);\n\n  // Ignore null and non-objects\n  if (obj === null || typeof obj !== 'object') {\n    return obj;\n  }\n\n  if (\n    suspectProtoRx.test(text) === false &&\n    suspectConstructorRx.test(text) === false\n  ) {\n    return obj;\n  }\n\n  // Scan result for proto keys\n  return filter(obj);\n}\n\nfunction filter(obj: any) {\n  let next = [obj];\n\n  while (next.length) {\n    const nodes = next;\n    next = [];\n\n    for (const node of nodes) {\n      if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {\n        throw new SyntaxError('Object contains forbidden prototype property');\n      }\n\n      if (\n        Object.prototype.hasOwnProperty.call(node, 'constructor') &&\n        Object.prototype.hasOwnProperty.call(node.constructor, 'prototype')\n      ) {\n        throw new SyntaxError('Object contains forbidden prototype property');\n      }\n\n      for (const key in node) {\n        const value = node[key];\n        if (value && typeof value === 'object') {\n          next.push(value);\n        }\n      }\n    }\n  }\n  return obj;\n}\n\nexport function secureJsonParse(text: string) {\n  // Performance optimization, see https://github.com/fastify/secure-json-parse/pull/90\n  const { stackTraceLimit } = Error;\n  Error.stackTraceLimit = 0;\n  try {\n    return _parse(text);\n  } finally {\n    Error.stackTraceLimit = stackTraceLimit;\n  }\n}\n","import { TypeValidationError } from '@ai-sdk/provider';\nimport type { StandardSchemaV1 } from '@standard-schema/spec';\nimport { Validator, asValidator } from './validator';\n\n/**\n * Validates the types of an unknown object using a schema and\n * return a strongly-typed object.\n *\n * @template T - The type of the object to validate.\n * @param {string} options.value - The object to validate.\n * @param {Validator<T>} options.schema - The schema to use for validating the JSON.\n * @returns {Promise<T>} - The typed object.\n */\nexport async function validateTypes<OBJECT>({\n  value,\n  schema,\n}: {\n  value: unknown;\n  schema: StandardSchemaV1<unknown, OBJECT> | Validator<OBJECT>;\n}): Promise<OBJECT> {\n  const result = await safeValidateTypes({ value, schema });\n\n  if (!result.success) {\n    throw TypeValidationError.wrap({ value, cause: result.error });\n  }\n\n  return result.value;\n}\n\n/**\n * Safely validates the types of an unknown object using a schema and\n * return a strongly-typed object.\n *\n * @template T - The type of the object to validate.\n * @param {string} options.value - The JSON object to validate.\n * @param {Validator<T>} options.schema - The schema to use for validating the JSON.\n * @returns An object with either a `success` flag and the parsed and typed data, or a `success` flag and an error object.\n */\nexport async function safeValidateTypes<OBJECT>({\n  value,\n  schema,\n}: {\n  value: unknown;\n  schema: StandardSchemaV1<unknown, OBJECT> | Validator<OBJECT>;\n}): Promise<\n  | {\n      success: true;\n      value: OBJECT;\n      rawValue: unknown;\n    }\n  | {\n      success: false;\n      error: TypeValidationError;\n      rawValue: unknown;\n    }\n> {\n  const validator = asValidator(schema);\n\n  try {\n    if (validator.validate == null) {\n      return { success: true, value: value as OBJECT, rawValue: value };\n    }\n\n    const result = await validator.validate(value);\n\n    if (result.success) {\n      return { success: true, value: result.value, rawValue: value };\n    }\n\n    return {\n      success: false,\n      error: TypeValidationError.wrap({ value, cause: result.error }),\n      rawValue: value,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: TypeValidationError.wrap({ value, cause: error }),\n      rawValue: value,\n    };\n  }\n}\n","import { TypeValidationError } from '@ai-sdk/provider';\nimport { StandardSchemaV1 } from '@standard-schema/spec';\n\n/**\n * Used to mark validator functions so we can support both Zod and custom schemas.\n */\nexport const validatorSymbol = Symbol.for('vercel.ai.validator');\n\nexport type ValidationResult<OBJECT> =\n  | { success: true; value: OBJECT }\n  | { success: false; error: Error };\n\nexport type Validator<OBJECT = unknown> = {\n  /**\n   * Used to mark validator functions so we can support both Zod and custom schemas.\n   */\n  [validatorSymbol]: true;\n\n  /**\n   * Optional. Validates that the structure of a value matches this schema,\n   * and returns a typed version of the value if it does.\n   */\n  readonly validate?: (\n    value: unknown,\n  ) => ValidationResult<OBJECT> | PromiseLike<ValidationResult<OBJECT>>;\n};\n\n/**\n * Create a validator.\n *\n * @param validate A validation function for the schema.\n */\nexport function validator<OBJECT>(\n  validate?:\n    | undefined\n    | ((\n        value: unknown,\n      ) => ValidationResult<OBJECT> | PromiseLike<ValidationResult<OBJECT>>),\n): Validator<OBJECT> {\n  return { [validatorSymbol]: true, validate };\n}\n\nexport function isValidator(value: unknown): value is Validator {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    validatorSymbol in value &&\n    value[validatorSymbol] === true &&\n    'validate' in value\n  );\n}\n\nexport function asValidator<OBJECT>(\n  value: Validator<OBJECT> | StandardSchemaV1<unknown, OBJECT>,\n): Validator<OBJECT> {\n  return isValidator(value) ? value : standardSchemaValidator(value);\n}\n\nexport function standardSchemaValidator<OBJECT>(\n  standardSchema: StandardSchemaV1<unknown, OBJECT>,\n): Validator<OBJECT> {\n  return validator(async value => {\n    const result = await standardSchema['~standard'].validate(value);\n\n    return result.issues == null\n      ? { success: true, value: result.value }\n      : {\n          success: false,\n          error: new TypeValidationError({\n            value,\n            cause: result.issues,\n          }),\n        };\n  });\n}\n","import {\n  EventSourceMessage,\n  EventSourceParserStream,\n} from 'eventsource-parser/stream';\nimport { ZodType } from 'zod/v4';\nimport { ParseResult, safeParseJSON } from './parse-json';\n\n/**\n * Parses a JSON event stream into a stream of parsed JSON objects.\n */\nexport function parseJsonEventStream<T>({\n  stream,\n  schema,\n}: {\n  stream: ReadableStream<Uint8Array>;\n  schema: ZodType<T>;\n}): ReadableStream<ParseResult<T>> {\n  return stream\n    .pipeThrough(new TextDecoderStream())\n    .pipeThrough(new EventSourceParserStream())\n    .pipeThrough(\n      new TransformStream<EventSourceMessage, ParseResult<T>>({\n        async transform({ data }, controller) {\n          // ignore the 'DONE' event that e.g. OpenAI sends:\n          if (data === '[DONE]') {\n            return;\n          }\n\n          controller.enqueue(await safeParseJSON({ text: data, schema }));\n        },\n      }),\n    );\n}\n","import { InvalidArgumentError } from '@ai-sdk/provider';\nimport { safeValidateTypes } from './validate-types';\nimport { z } from 'zod/v4';\n\nexport async function parseProviderOptions<T>({\n  provider,\n  providerOptions,\n  schema,\n}: {\n  provider: string;\n  providerOptions: Record<string, unknown> | undefined;\n  schema: z.core.$ZodType<T, any>;\n}): Promise<T | undefined> {\n  if (providerOptions?.[provider] == null) {\n    return undefined;\n  }\n\n  const parsedProviderOptions = await safeValidateTypes<T | undefined>({\n    value: providerOptions[provider],\n    schema,\n  });\n\n  if (!parsedProviderOptions.success) {\n    throw new InvalidArgumentError({\n      argument: 'providerOptions',\n      message: `invalid ${provider} provider options`,\n      cause: parsedProviderOptions.error,\n    });\n  }\n\n  return parsedProviderOptions.value;\n}\n","import { APICallError } from '@ai-sdk/provider';\nimport { extractResponseHeaders } from './extract-response-headers';\nimport { FetchFunction } from './fetch-function';\nimport { handleFetchError } from './handle-fetch-error';\nimport { isAbortError } from './is-abort-error';\nimport { removeUndefinedEntries } from './remove-undefined-entries';\nimport { ResponseHandler } from './response-handler';\n\n// use function to allow for mocking in tests:\nconst getOriginalFetch = () => globalThis.fetch;\n\nexport const postJsonToApi = async <T>({\n  url,\n  headers,\n  body,\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch,\n}: {\n  url: string;\n  headers?: Record<string, string | undefined>;\n  body: unknown;\n  failedResponseHandler: ResponseHandler<APICallError>;\n  successfulResponseHandler: ResponseHandler<T>;\n  abortSignal?: AbortSignal;\n  fetch?: FetchFunction;\n}) =>\n  postToApi({\n    url,\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n    body: {\n      content: JSON.stringify(body),\n      values: body,\n    },\n    failedResponseHandler,\n    successfulResponseHandler,\n    abortSignal,\n    fetch,\n  });\n\nexport const postFormDataToApi = async <T>({\n  url,\n  headers,\n  formData,\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch,\n}: {\n  url: string;\n  headers?: Record<string, string | undefined>;\n  formData: FormData;\n  failedResponseHandler: ResponseHandler<APICallError>;\n  successfulResponseHandler: ResponseHandler<T>;\n  abortSignal?: AbortSignal;\n  fetch?: FetchFunction;\n}) =>\n  postToApi({\n    url,\n    headers,\n    body: {\n      content: formData,\n      values: Object.fromEntries((formData as any).entries()),\n    },\n    failedResponseHandler,\n    successfulResponseHandler,\n    abortSignal,\n    fetch,\n  });\n\nexport const postToApi = async <T>({\n  url,\n  headers = {},\n  body,\n  successfulResponseHandler,\n  failedResponseHandler,\n  abortSignal,\n  fetch = getOriginalFetch(),\n}: {\n  url: string;\n  headers?: Record<string, string | undefined>;\n  body: {\n    content: string | FormData | Uint8Array;\n    values: unknown;\n  };\n  failedResponseHandler: ResponseHandler<Error>;\n  successfulResponseHandler: ResponseHandler<T>;\n  abortSignal?: AbortSignal;\n  fetch?: FetchFunction;\n}) => {\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: removeUndefinedEntries(headers),\n      body: body.content,\n      signal: abortSignal,\n    });\n\n    const responseHeaders = extractResponseHeaders(response);\n\n    if (!response.ok) {\n      let errorInformation: {\n        value: Error;\n        responseHeaders?: Record<string, string> | undefined;\n      };\n\n      try {\n        errorInformation = await failedResponseHandler({\n          response,\n          url,\n          requestBodyValues: body.values,\n        });\n      } catch (error) {\n        if (isAbortError(error) || APICallError.isInstance(error)) {\n          throw error;\n        }\n\n        throw new APICallError({\n          message: 'Failed to process error response',\n          cause: error,\n          statusCode: response.status,\n          url,\n          responseHeaders,\n          requestBodyValues: body.values,\n        });\n      }\n\n      throw errorInformation.value;\n    }\n\n    try {\n      return await successfulResponseHandler({\n        response,\n        url,\n        requestBodyValues: body.values,\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        if (isAbortError(error) || APICallError.isInstance(error)) {\n          throw error;\n        }\n      }\n\n      throw new APICallError({\n        message: 'Failed to process successful response',\n        cause: error,\n        statusCode: response.status,\n        url,\n        responseHeaders,\n        requestBodyValues: body.values,\n      });\n    }\n  } catch (error) {\n    throw handleFetchError({ error, url, requestBodyValues: body.values });\n  }\n};\n","import { JSONValue, LanguageModelV2ToolResultPart } from '@ai-sdk/provider';\nimport { FlexibleSchema } from '../schema';\nimport { ModelMessage } from './model-message';\nimport { ProviderOptions } from './provider-options';\n\n/**\n * Additional options that are sent into each tool call.\n */\n// TODO AI SDK 6: rename to ToolExecutionOptions\nexport interface ToolCallOptions {\n  /**\n   * The ID of the tool call. You can use it e.g. when sending tool-call related information with stream data.\n   */\n  toolCallId: string;\n\n  /**\n   * Messages that were sent to the language model to initiate the response that contained the tool call.\n   * The messages **do not** include the system prompt nor the assistant response that contained the tool call.\n   */\n  messages: ModelMessage[];\n\n  /**\n   * An optional abort signal that indicates that the overall operation should be aborted.\n   */\n  abortSignal?: AbortSignal;\n\n  /**\n   * Additional context.\n   *\n   * Experimental (can break in patch releases).\n   */\n  experimental_context?: unknown;\n}\n\nexport type ToolExecuteFunction<INPUT, OUTPUT> = (\n  input: INPUT,\n  options: ToolCallOptions,\n) => AsyncIterable<OUTPUT> | PromiseLike<OUTPUT> | OUTPUT;\n\n// 0 extends 1 & N checks for any\n// [N] extends [never] checks for never\ntype NeverOptional<N, T> = 0 extends 1 & N\n  ? Partial<T>\n  : [N] extends [never]\n    ? Partial<Record<keyof T, undefined>>\n    : T;\n\ntype ToolOutputProperties<INPUT, OUTPUT> = NeverOptional<\n  OUTPUT,\n  | {\n      /**\nAn async function that is called with the arguments from the tool call and produces a result.\nIf not provided, the tool will not be executed automatically.\n\n@args is the input of the tool call.\n@options.abortSignal is a signal that can be used to abort the tool call.\n    */\n      execute: ToolExecuteFunction<INPUT, OUTPUT>;\n\n      outputSchema?: FlexibleSchema<OUTPUT>;\n    }\n  | {\n      outputSchema: FlexibleSchema<OUTPUT>;\n\n      execute?: never;\n    }\n>;\n\n/**\nA tool contains the description and the schema of the input that the tool expects.\nThis enables the language model to generate the input.\n\nThe tool can also contain an optional execute function for the actual execution function of the tool.\n */\nexport type Tool<\n  INPUT extends JSONValue | unknown | never = any,\n  OUTPUT extends JSONValue | unknown | never = any,\n> = {\n  /**\nAn optional description of what the tool does.\nWill be used by the language model to decide whether to use the tool.\nNot used for provider-defined tools.\n   */\n  description?: string;\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n   */\n  providerOptions?: ProviderOptions;\n\n  /**\nThe schema of the input that the tool expects. The language model will use this to generate the input.\nIt is also used to validate the output of the language model.\nUse descriptions to make the input understandable for the language model.\n   */\n  inputSchema: FlexibleSchema<INPUT>;\n\n  /**\n   * Optional function that is called when the argument streaming starts.\n   * Only called when the tool is used in a streaming context.\n   */\n  onInputStart?: (options: ToolCallOptions) => void | PromiseLike<void>;\n\n  /**\n   * Optional function that is called when an argument streaming delta is available.\n   * Only called when the tool is used in a streaming context.\n   */\n  onInputDelta?: (\n    options: { inputTextDelta: string } & ToolCallOptions,\n  ) => void | PromiseLike<void>;\n\n  /**\n   * Optional function that is called when a tool call can be started,\n   * even if the execute function is not provided.\n   */\n  onInputAvailable?: (\n    options: {\n      input: [INPUT] extends [never] ? undefined : INPUT;\n    } & ToolCallOptions,\n  ) => void | PromiseLike<void>;\n} & ToolOutputProperties<INPUT, OUTPUT> & {\n    /**\nOptional conversion function that maps the tool result to an output that can be used by the language model.\n\nIf not provided, the tool result will be sent as a JSON object.\n  */\n    toModelOutput?: (\n      output: 0 extends 1 & OUTPUT\n        ? any\n        : [OUTPUT] extends [never]\n          ? any\n          : NoInfer<OUTPUT>,\n    ) => LanguageModelV2ToolResultPart['output'];\n  } & (\n    | {\n        /**\nTool with user-defined input and output schemas.\n     */\n        type?: undefined | 'function';\n      }\n    | {\n        /**\nTool that is defined at runtime (e.g. an MCP tool).\nThe types of input and output are not known at development time.\n       */\n        type: 'dynamic';\n      }\n    | {\n        /**\nTool with provider-defined input and output schemas.\n     */\n        type: 'provider-defined';\n\n        /**\nThe ID of the tool. Should follow the format `<provider-name>.<unique-tool-name>`.\n   */\n        id: `${string}.${string}`;\n\n        /**\nThe name of the tool that the user must use in the tool set.\n */\n        name: string;\n\n        /**\nThe arguments for configuring the tool. Must match the expected arguments defined by the provider for this tool.\n     */\n        args: Record<string, unknown>;\n      }\n  );\n\n/**\n * Infer the input type of a tool.\n */\nexport type InferToolInput<TOOL extends Tool> =\n  TOOL extends Tool<infer INPUT, any> ? INPUT : never;\n\n/**\n * Infer the output type of a tool.\n */\nexport type InferToolOutput<TOOL extends Tool> =\n  TOOL extends Tool<any, infer OUTPUT> ? OUTPUT : never;\n\n/**\nHelper function for inferring the execute args of a tool.\n */\n// Note: overload order is important for auto-completion\nexport function tool<INPUT, OUTPUT>(\n  tool: Tool<INPUT, OUTPUT>,\n): Tool<INPUT, OUTPUT>;\nexport function tool<INPUT>(tool: Tool<INPUT, never>): Tool<INPUT, never>;\nexport function tool<OUTPUT>(tool: Tool<never, OUTPUT>): Tool<never, OUTPUT>;\nexport function tool(tool: Tool<never, never>): Tool<never, never>;\nexport function tool(tool: any): any {\n  return tool;\n}\n\n/**\nHelper function for defining a dynamic tool.\n */\nexport function dynamicTool(tool: {\n  description?: string;\n  providerOptions?: ProviderOptions;\n  inputSchema: FlexibleSchema<unknown>;\n  execute: ToolExecuteFunction<unknown, unknown>;\n  toModelOutput?: (output: unknown) => LanguageModelV2ToolResultPart['output'];\n}): Tool<unknown, unknown> & {\n  type: 'dynamic';\n} {\n  return { ...tool, type: 'dynamic' };\n}\n","import { tool, Tool, ToolExecuteFunction } from './types/tool';\nimport { FlexibleSchema } from './schema';\n\nexport type ProviderDefinedToolFactory<INPUT, ARGS extends object> = <OUTPUT>(\n  options: ARGS & {\n    execute?: ToolExecuteFunction<INPUT, OUTPUT>;\n    toModelOutput?: Tool<INPUT, OUTPUT>['toModelOutput'];\n    onInputStart?: Tool<INPUT, OUTPUT>['onInputStart'];\n    onInputDelta?: Tool<INPUT, OUTPUT>['onInputDelta'];\n    onInputAvailable?: Tool<INPUT, OUTPUT>['onInputAvailable'];\n  },\n) => Tool<INPUT, OUTPUT>;\n\nexport function createProviderDefinedToolFactory<INPUT, ARGS extends object>({\n  id,\n  name,\n  inputSchema,\n}: {\n  id: `${string}.${string}`;\n  name: string;\n  inputSchema: FlexibleSchema<INPUT>;\n}): ProviderDefinedToolFactory<INPUT, ARGS> {\n  return <OUTPUT>({\n    execute,\n    outputSchema,\n    toModelOutput,\n    onInputStart,\n    onInputDelta,\n    onInputAvailable,\n    ...args\n  }: ARGS & {\n    execute?: ToolExecuteFunction<INPUT, OUTPUT>;\n    outputSchema?: FlexibleSchema<OUTPUT>;\n    toModelOutput?: Tool<INPUT, OUTPUT>['toModelOutput'];\n    onInputStart?: Tool<INPUT, OUTPUT>['onInputStart'];\n    onInputDelta?: Tool<INPUT, OUTPUT>['onInputDelta'];\n    onInputAvailable?: Tool<INPUT, OUTPUT>['onInputAvailable'];\n  }): Tool<INPUT, OUTPUT> =>\n    tool({\n      type: 'provider-defined',\n      id,\n      name,\n      args,\n      inputSchema,\n      outputSchema,\n      execute,\n      toModelOutput,\n      onInputStart,\n      onInputDelta,\n      onInputAvailable,\n    });\n}\n\nexport type ProviderDefinedToolFactoryWithOutputSchema<\n  INPUT,\n  OUTPUT,\n  ARGS extends object,\n> = (\n  options: ARGS & {\n    execute?: ToolExecuteFunction<INPUT, OUTPUT>;\n    toModelOutput?: Tool<INPUT, OUTPUT>['toModelOutput'];\n    onInputStart?: Tool<INPUT, OUTPUT>['onInputStart'];\n    onInputDelta?: Tool<INPUT, OUTPUT>['onInputDelta'];\n    onInputAvailable?: Tool<INPUT, OUTPUT>['onInputAvailable'];\n  },\n) => Tool<INPUT, OUTPUT>;\n\nexport function createProviderDefinedToolFactoryWithOutputSchema<\n  INPUT,\n  OUTPUT,\n  ARGS extends object,\n>({\n  id,\n  name,\n  inputSchema,\n  outputSchema,\n}: {\n  id: `${string}.${string}`;\n  name: string;\n  inputSchema: FlexibleSchema<INPUT>;\n  outputSchema: FlexibleSchema<OUTPUT>;\n}): ProviderDefinedToolFactoryWithOutputSchema<INPUT, OUTPUT, ARGS> {\n  return ({\n    execute,\n    toModelOutput,\n    onInputStart,\n    onInputDelta,\n    onInputAvailable,\n    ...args\n  }: ARGS & {\n    execute?: ToolExecuteFunction<INPUT, OUTPUT>;\n    toModelOutput?: Tool<INPUT, OUTPUT>['toModelOutput'];\n    onInputStart?: Tool<INPUT, OUTPUT>['onInputStart'];\n    onInputDelta?: Tool<INPUT, OUTPUT>['onInputDelta'];\n    onInputAvailable?: Tool<INPUT, OUTPUT>['onInputAvailable'];\n  }): Tool<INPUT, OUTPUT> =>\n    tool({\n      type: 'provider-defined',\n      id,\n      name,\n      args,\n      inputSchema,\n      outputSchema,\n      execute,\n      toModelOutput,\n      onInputStart,\n      onInputDelta,\n      onInputAvailable,\n    });\n}\n","export type Resolvable<T> =\n  | T // Raw value\n  | Promise<T> // Promise of value\n  | (() => T) // Function returning value\n  | (() => Promise<T>); // Function returning promise of value\n\n/**\n * Resolves a value that could be a raw value, a Promise, a function returning a value,\n * or a function returning a Promise.\n */\nexport async function resolve<T>(value: Resolvable<T>): Promise<T> {\n  // If it's a function, call it to get the value/promise\n  if (typeof value === 'function') {\n    value = (value as Function)();\n  }\n\n  // Otherwise just resolve whatever we got (value or promise)\n  return Promise.resolve(value as T);\n}\n","import { APICallError, EmptyResponseBodyError } from '@ai-sdk/provider';\nimport { ZodType } from 'zod/v4';\nimport { extractResponseHeaders } from './extract-response-headers';\nimport { parseJSON, ParseResult, safeParseJSON } from './parse-json';\nimport { parseJsonEventStream } from './parse-json-event-stream';\n\nexport type ResponseHandler<RETURN_TYPE> = (options: {\n  url: string;\n  requestBodyValues: unknown;\n  response: Response;\n}) => PromiseLike<{\n  value: RETURN_TYPE;\n  rawValue?: unknown;\n  responseHeaders?: Record<string, string>;\n}>;\n\nexport const createJsonErrorResponseHandler =\n  <T>({\n    errorSchema,\n    errorToMessage,\n    isRetryable,\n  }: {\n    errorSchema: ZodType<T>;\n    errorToMessage: (error: T) => string;\n    isRetryable?: (response: Response, error?: T) => boolean;\n  }): ResponseHandler<APICallError> =>\n  async ({ response, url, requestBodyValues }) => {\n    const responseBody = await response.text();\n    const responseHeaders = extractResponseHeaders(response);\n\n    // Some providers return an empty response body for some errors:\n    if (responseBody.trim() === '') {\n      return {\n        responseHeaders,\n        value: new APICallError({\n          message: response.statusText,\n          url,\n          requestBodyValues,\n          statusCode: response.status,\n          responseHeaders,\n          responseBody,\n          isRetryable: isRetryable?.(response),\n        }),\n      };\n    }\n\n    // resilient parsing in case the response is not JSON or does not match the schema:\n    try {\n      const parsedError = await parseJSON({\n        text: responseBody,\n        schema: errorSchema,\n      });\n\n      return {\n        responseHeaders,\n        value: new APICallError({\n          message: errorToMessage(parsedError),\n          url,\n          requestBodyValues,\n          statusCode: response.status,\n          responseHeaders,\n          responseBody,\n          data: parsedError,\n          isRetryable: isRetryable?.(response, parsedError),\n        }),\n      };\n    } catch (parseError) {\n      return {\n        responseHeaders,\n        value: new APICallError({\n          message: response.statusText,\n          url,\n          requestBodyValues,\n          statusCode: response.status,\n          responseHeaders,\n          responseBody,\n          isRetryable: isRetryable?.(response),\n        }),\n      };\n    }\n  };\n\nexport const createEventSourceResponseHandler =\n  <T>(\n    chunkSchema: ZodType<T>,\n  ): ResponseHandler<ReadableStream<ParseResult<T>>> =>\n  async ({ response }: { response: Response }) => {\n    const responseHeaders = extractResponseHeaders(response);\n\n    if (response.body == null) {\n      throw new EmptyResponseBodyError({});\n    }\n\n    return {\n      responseHeaders,\n      value: parseJsonEventStream({\n        stream: response.body,\n        schema: chunkSchema,\n      }),\n    };\n  };\n\nexport const createJsonStreamResponseHandler =\n  <T>(\n    chunkSchema: ZodType<T>,\n  ): ResponseHandler<ReadableStream<ParseResult<T>>> =>\n  async ({ response }: { response: Response }) => {\n    const responseHeaders = extractResponseHeaders(response);\n\n    if (response.body == null) {\n      throw new EmptyResponseBodyError({});\n    }\n\n    let buffer = '';\n\n    return {\n      responseHeaders,\n      value: response.body.pipeThrough(new TextDecoderStream()).pipeThrough(\n        new TransformStream<string, ParseResult<T>>({\n          async transform(chunkText, controller) {\n            if (chunkText.endsWith('\\n')) {\n              controller.enqueue(\n                await safeParseJSON({\n                  text: buffer + chunkText,\n                  schema: chunkSchema,\n                }),\n              );\n              buffer = '';\n            } else {\n              buffer += chunkText;\n            }\n          },\n        }),\n      ),\n    };\n  };\n\nexport const createJsonResponseHandler =\n  <T>(responseSchema: ZodType<T>): ResponseHandler<T> =>\n  async ({ response, url, requestBodyValues }) => {\n    const responseBody = await response.text();\n\n    const parsedResult = await safeParseJSON({\n      text: responseBody,\n      schema: responseSchema,\n    });\n\n    const responseHeaders = extractResponseHeaders(response);\n\n    if (!parsedResult.success) {\n      throw new APICallError({\n        message: 'Invalid JSON response',\n        cause: parsedResult.error,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody,\n        url,\n        requestBodyValues,\n      });\n    }\n\n    return {\n      responseHeaders,\n      value: parsedResult.value,\n      rawValue: parsedResult.rawValue,\n    };\n  };\n\nexport const createBinaryResponseHandler =\n  (): ResponseHandler<Uint8Array> =>\n  async ({ response, url, requestBodyValues }) => {\n    const responseHeaders = extractResponseHeaders(response);\n\n    if (!response.body) {\n      throw new APICallError({\n        message: 'Response body is empty',\n        url,\n        requestBodyValues,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody: undefined,\n      });\n    }\n\n    try {\n      const buffer = await response.arrayBuffer();\n      return {\n        responseHeaders,\n        value: new Uint8Array(buffer),\n      };\n    } catch (error) {\n      throw new APICallError({\n        message: 'Failed to read response as array buffer',\n        url,\n        requestBodyValues,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody: undefined,\n        cause: error,\n      });\n    }\n  };\n\nexport const createStatusCodeErrorResponseHandler =\n  (): ResponseHandler<APICallError> =>\n  async ({ response, url, requestBodyValues }) => {\n    const responseHeaders = extractResponseHeaders(response);\n    const responseBody = await response.text();\n\n    return {\n      responseHeaders,\n      value: new APICallError({\n        message: response.statusText,\n        url,\n        requestBodyValues: requestBodyValues as Record<string, unknown>,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody,\n      }),\n    };\n  };\n","import { JSONSchema7 } from '@ai-sdk/provider';\nimport * as z3 from 'zod/v3';\nimport * as z4 from 'zod/v4';\nimport zodToJsonSchema from './zod-to-json-schema';\nimport { jsonSchema, Schema } from './schema';\n\nexport function zod3Schema<OBJECT>(\n  zodSchema: z3.Schema<OBJECT, z3.ZodTypeDef, any>,\n  options?: {\n    /**\n     * Enables support for references in the schema.\n     * This is required for recursive schemas, e.g. with `z.lazy`.\n     * However, not all language models and providers support such references.\n     * Defaults to `false`.\n     */\n    useReferences?: boolean;\n  },\n): Schema<OBJECT> {\n  // default to no references (to support openapi conversion for google)\n  const useReferences = options?.useReferences ?? false;\n\n  return jsonSchema(\n    zodToJsonSchema(zodSchema, {\n      $refStrategy: useReferences ? 'root' : 'none',\n    }) as JSONSchema7,\n    {\n      validate: async value => {\n        const result = await zodSchema.safeParseAsync(value);\n        return result.success\n          ? { success: true, value: result.data }\n          : { success: false, error: result.error };\n      },\n    },\n  );\n}\n\nexport function zod4Schema<OBJECT>(\n  zodSchema: z4.core.$ZodType<OBJECT, any>,\n  options?: {\n    /**\n     * Enables support for references in the schema.\n     * This is required for recursive schemas, e.g. with `z.lazy`.\n     * However, not all language models and providers support such references.\n     * Defaults to `false`.\n     */\n    useReferences?: boolean;\n  },\n): Schema<OBJECT> {\n  // default to no references (to support openapi conversion for google)\n  const useReferences = options?.useReferences ?? false;\n\n  const z4JSONSchema = z4.toJSONSchema(zodSchema, {\n    target: 'draft-7',\n    io: 'output',\n    reused: useReferences ? 'ref' : 'inline',\n  }) as JSONSchema7;\n\n  return jsonSchema(z4JSONSchema, {\n    validate: async value => {\n      const result = await z4.safeParseAsync(zodSchema, value);\n      return result.success\n        ? { success: true, value: result.data }\n        : { success: false, error: result.error };\n    },\n  });\n}\n\nexport function isZod4Schema(\n  zodSchema: z4.core.$ZodType<any, any> | z3.Schema<any, z3.ZodTypeDef, any>,\n): zodSchema is z4.core.$ZodType<any, any> {\n  // https://zod.dev/library-authors?id=how-to-support-zod-3-and-zod-4-simultaneously\n  return '_zod' in zodSchema;\n}\n\nexport function zodSchema<OBJECT>(\n  zodSchema:\n    | z4.core.$ZodType<OBJECT, any>\n    | z3.Schema<OBJECT, z3.ZodTypeDef, any>,\n  options?: {\n    /**\n     * Enables support for references in the schema.\n     * This is required for recursive schemas, e.g. with `z.lazy`.\n     * However, not all language models and providers support such references.\n     * Defaults to `false`.\n     */\n    useReferences?: boolean;\n  },\n): Schema<OBJECT> {\n  if (isZod4Schema(zodSchema)) {\n    return zod4Schema(zodSchema, options);\n  } else {\n    return zod3Schema(zodSchema, options);\n  }\n}\n","export const getRelativePath = (pathA: string[], pathB: string[]) => {\n  let i = 0;\n  for (; i < pathA.length && i < pathB.length; i++) {\n    if (pathA[i] !== pathB[i]) break;\n  }\n  return [(pathA.length - i).toString(), ...pathB.slice(i)].join('/');\n};\n","import { ZodSchema, ZodTypeDef } from 'zod/v3';\nimport { Refs, Seen } from './refs';\nimport { JsonSchema7Type } from './parse-types';\n\nexport type DateStrategy =\n  | 'format:date-time'\n  | 'format:date'\n  | 'string'\n  | 'integer';\n\nexport const ignoreOverride = Symbol(\n  'Let zodToJsonSchema decide on which parser to use',\n);\n\nexport type OverrideCallback = (\n  def: ZodTypeDef,\n  refs: Refs,\n  seen: Seen | undefined,\n  forceResolution?: boolean,\n) => JsonSchema7Type | undefined | typeof ignoreOverride;\n\nexport type PostProcessCallback = (\n  jsonSchema: JsonSchema7Type | undefined,\n  def: ZodTypeDef,\n  refs: Refs,\n) => JsonSchema7Type | undefined;\n\nexport const jsonDescription: PostProcessCallback = (jsonSchema, def) => {\n  if (def.description) {\n    try {\n      return {\n        ...jsonSchema,\n        ...JSON.parse(def.description),\n      };\n    } catch {}\n  }\n\n  return jsonSchema;\n};\n\nexport type Options = {\n  name: string | undefined;\n  $refStrategy: 'root' | 'relative' | 'none' | 'seen';\n  basePath: string[];\n  effectStrategy: 'input' | 'any';\n  pipeStrategy: 'input' | 'output' | 'all';\n  dateStrategy: DateStrategy | DateStrategy[];\n  mapStrategy: 'entries' | 'record';\n  removeAdditionalStrategy: 'passthrough' | 'strict';\n  allowedAdditionalProperties: true | undefined;\n  rejectedAdditionalProperties: false | undefined;\n  strictUnions: boolean;\n  definitionPath: string;\n  definitions: Record<string, ZodSchema>;\n  errorMessages: boolean;\n  patternStrategy: 'escape' | 'preserve';\n  applyRegexFlags: boolean;\n  emailStrategy: 'format:email' | 'format:idn-email' | 'pattern:zod';\n  base64Strategy: 'format:binary' | 'contentEncoding:base64' | 'pattern:zod';\n  nameStrategy: 'ref' | 'title';\n  override?: OverrideCallback;\n  postProcess?: PostProcessCallback;\n};\n\nexport const defaultOptions: Options = {\n  name: undefined,\n  $refStrategy: 'root',\n  basePath: ['#'],\n  effectStrategy: 'input',\n  pipeStrategy: 'all',\n  dateStrategy: 'format:date-time',\n  mapStrategy: 'entries',\n  removeAdditionalStrategy: 'passthrough',\n  allowedAdditionalProperties: true,\n  rejectedAdditionalProperties: false,\n  definitionPath: 'definitions',\n  strictUnions: false,\n  definitions: {},\n  errorMessages: false,\n  patternStrategy: 'escape',\n  applyRegexFlags: false,\n  emailStrategy: 'format:email',\n  base64Strategy: 'contentEncoding:base64',\n  nameStrategy: 'ref',\n};\n\nexport const getDefaultOptions = (\n  options: Partial<Options> | string | undefined,\n) =>\n  (typeof options === 'string'\n    ? {\n        ...defaultOptions,\n        name: options,\n      }\n    : {\n        ...defaultOptions,\n        ...options,\n      }) as Options;\n","import { ZodFirstPartyTypeKind } from 'zod/v3';\nimport { parseAnyDef } from './parsers/any';\nimport { parseArrayDef } from './parsers/array';\nimport { parseBigintDef } from './parsers/bigint';\nimport { parseBooleanDef } from './parsers/boolean';\nimport { parseBrandedDef } from './parsers/branded';\nimport { parseCatchDef } from './parsers/catch';\nimport { parseDateDef } from './parsers/date';\nimport { parseDefaultDef } from './parsers/default';\nimport { parseEffectsDef } from './parsers/effects';\nimport { parseEnumDef } from './parsers/enum';\nimport { parseIntersectionDef } from './parsers/intersection';\nimport { parseLiteralDef } from './parsers/literal';\nimport { parseMapDef } from './parsers/map';\nimport { parseNativeEnumDef } from './parsers/native-enum';\nimport { parseNeverDef } from './parsers/never';\nimport { parseNullDef } from './parsers/null';\nimport { parseNullableDef } from './parsers/nullable';\nimport { parseNumberDef } from './parsers/number';\nimport { parseObjectDef } from './parsers/object';\nimport { parseOptionalDef } from './parsers/optional';\nimport { parsePipelineDef } from './parsers/pipeline';\nimport { parsePromiseDef } from './parsers/promise';\nimport { parseRecordDef } from './parsers/record';\nimport { parseSetDef } from './parsers/set';\nimport { parseStringDef } from './parsers/string';\nimport { parseTupleDef } from './parsers/tuple';\nimport { parseUndefinedDef } from './parsers/undefined';\nimport { parseUnionDef } from './parsers/union';\nimport { parseUnknownDef } from './parsers/unknown';\nimport { Refs } from './refs';\nimport { parseReadonlyDef } from './parsers/readonly';\nimport { JsonSchema7Type } from './parse-types';\n\nexport type InnerDefGetter = () => any;\n\nexport const selectParser = (\n  def: any,\n  typeName: ZodFirstPartyTypeKind,\n  refs: Refs,\n): JsonSchema7Type | undefined | InnerDefGetter => {\n  switch (typeName) {\n    case ZodFirstPartyTypeKind.ZodString:\n      return parseStringDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodNumber:\n      return parseNumberDef(def);\n    case ZodFirstPartyTypeKind.ZodObject:\n      return parseObjectDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodBigInt:\n      return parseBigintDef(def);\n    case ZodFirstPartyTypeKind.ZodBoolean:\n      return parseBooleanDef();\n    case ZodFirstPartyTypeKind.ZodDate:\n      return parseDateDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodUndefined:\n      return parseUndefinedDef();\n    case ZodFirstPartyTypeKind.ZodNull:\n      return parseNullDef();\n    case ZodFirstPartyTypeKind.ZodArray:\n      return parseArrayDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodUnion:\n    case ZodFirstPartyTypeKind.ZodDiscriminatedUnion:\n      return parseUnionDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodIntersection:\n      return parseIntersectionDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodTuple:\n      return parseTupleDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodRecord:\n      return parseRecordDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodLiteral:\n      return parseLiteralDef(def);\n    case ZodFirstPartyTypeKind.ZodEnum:\n      return parseEnumDef(def);\n    case ZodFirstPartyTypeKind.ZodNativeEnum:\n      return parseNativeEnumDef(def);\n    case ZodFirstPartyTypeKind.ZodNullable:\n      return parseNullableDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodOptional:\n      return parseOptionalDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodMap:\n      return parseMapDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodSet:\n      return parseSetDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodLazy:\n      return () => (def as any).getter()._def;\n    case ZodFirstPartyTypeKind.ZodPromise:\n      return parsePromiseDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodNaN:\n    case ZodFirstPartyTypeKind.ZodNever:\n      return parseNeverDef();\n    case ZodFirstPartyTypeKind.ZodEffects:\n      return parseEffectsDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodAny:\n      return parseAnyDef();\n    case ZodFirstPartyTypeKind.ZodUnknown:\n      return parseUnknownDef();\n    case ZodFirstPartyTypeKind.ZodDefault:\n      return parseDefaultDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodBranded:\n      return parseBrandedDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodReadonly:\n      return parseReadonlyDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodCatch:\n      return parseCatchDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodPipeline:\n      return parsePipelineDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodFunction:\n    case ZodFirstPartyTypeKind.ZodVoid:\n    case ZodFirstPartyTypeKind.ZodSymbol:\n      return undefined;\n    default:\n      /* c8 ignore next */\n      return ((_: never) => undefined)(typeName);\n  }\n};\n","export type JsonSchema7AnyType = { $ref?: string };\n\nexport function parseAnyDef(): JsonSchema7AnyType {\n  return {};\n}\n","import { ZodArrayDef, ZodFirstPartyTypeKind } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { JsonSchema7Type } from '../parse-types';\nimport { Refs } from '../refs';\n\nexport type JsonSchema7ArrayType = {\n  type: 'array';\n  items?: JsonSchema7Type;\n  minItems?: number;\n  maxItems?: number;\n};\n\nexport function parseArrayDef(def: ZodArrayDef, refs: Refs) {\n  const res: JsonSchema7ArrayType = {\n    type: 'array',\n  };\n  if (\n    def.type?._def &&\n    def.type?._def?.typeName !== ZodFirstPartyTypeKind.ZodAny\n  ) {\n    res.items = parseDef(def.type._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, 'items'],\n    });\n  }\n\n  if (def.minLength) {\n    res.minItems = def.minLength.value;\n  }\n  if (def.maxLength) {\n    res.maxItems = def.maxLength.value;\n  }\n  if (def.exactLength) {\n    res.minItems = def.exactLength.value;\n    res.maxItems = def.exactLength.value;\n  }\n  return res;\n}\n","import { ZodBigIntDef } from 'zod/v3';\n\nexport type JsonSchema7BigintType = {\n  type: 'integer';\n  format: 'int64';\n  minimum?: BigInt;\n  exclusiveMinimum?: BigInt;\n  maximum?: BigInt;\n  exclusiveMaximum?: BigInt;\n  multipleOf?: BigInt;\n};\n\nexport function parseBigintDef(def: ZodBigIntDef): JsonSchema7BigintType {\n  const res: JsonSchema7BigintType = {\n    type: 'integer',\n    format: 'int64',\n  };\n\n  if (!def.checks) return res;\n\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case 'min':\n        if (check.inclusive) {\n          res.minimum = check.value;\n        } else {\n          res.exclusiveMinimum = check.value;\n        }\n        break;\n      case 'max':\n        if (check.inclusive) {\n          res.maximum = check.value;\n        } else {\n          res.exclusiveMaximum = check.value;\n        }\n\n        break;\n      case 'multipleOf':\n        res.multipleOf = check.value;\n        break;\n    }\n  }\n  return res;\n}\n","export type JsonSchema7BooleanType = {\n  type: 'boolean';\n};\n\nexport function parseBooleanDef(): JsonSchema7BooleanType {\n  return { type: 'boolean' };\n}\n","import { ZodBrandedDef } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { Refs } from '../refs';\n\nexport function parseBrandedDef(_def: ZodBrandedDef<any>, refs: Refs) {\n  return parseDef(_def.type._def, refs);\n}\n","import { ZodCatchDef } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { Refs } from '../refs';\n\nexport const parseCatchDef = (def: ZodCatchDef<any>, refs: Refs) => {\n  return parseDef(def.innerType._def, refs);\n};\n","import { ZodDateDef } from 'zod/v3';\nimport { Refs } from '../refs';\nimport { DateStrategy } from '../options';\n\nexport type JsonSchema7DateType =\n  | {\n      type: 'integer' | 'string';\n      format: 'unix-time' | 'date-time' | 'date';\n      minimum?: number;\n      maximum?: number;\n    }\n  | {\n      anyOf: JsonSchema7DateType[];\n    };\n\nexport function parseDateDef(\n  def: ZodDateDef,\n  refs: Refs,\n  overrideDateStrategy?: DateStrategy,\n): JsonSchema7DateType {\n  const strategy = overrideDateStrategy ?? refs.dateStrategy;\n\n  if (Array.isArray(strategy)) {\n    return {\n      anyOf: strategy.map((item, i) => parseDateDef(def, refs, item)),\n    };\n  }\n\n  switch (strategy) {\n    case 'string':\n    case 'format:date-time':\n      return {\n        type: 'string',\n        format: 'date-time',\n      };\n    case 'format:date':\n      return {\n        type: 'string',\n        format: 'date',\n      };\n    case 'integer':\n      return integerDateParser(def);\n  }\n}\n\nconst integerDateParser = (def: ZodDateDef) => {\n  const res: JsonSchema7DateType = {\n    type: 'integer',\n    format: 'unix-time',\n  };\n\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case 'min':\n        res.minimum = check.value;\n        break;\n      case 'max':\n        res.maximum = check.value;\n        break;\n    }\n  }\n\n  return res;\n};\n","import { ZodDefaultDef } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { JsonSchema7Type } from '../parse-types';\nimport { Refs } from '../refs';\n\nexport function parseDefaultDef(\n  _def: ZodDefaultDef,\n  refs: Refs,\n): JsonSchema7Type & { default: any } {\n  return {\n    ...parseDef(_def.innerType._def, refs),\n    default: _def.defaultValue(),\n  };\n}\n","import { ZodEffectsDef } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { JsonSchema7Type } from '../parse-types';\nimport { Refs } from '../refs';\nimport { parseAnyDef } from './any';\n\nexport function parseEffectsDef(\n  _def: ZodEffectsDef,\n  refs: Refs,\n): JsonSchema7Type | undefined {\n  return refs.effectStrategy === 'input'\n    ? parseDef(_def.schema._def, refs)\n    : parseAnyDef();\n}\n","import { ZodEnumDef } from 'zod/v3';\n\nexport type JsonSchema7EnumType = {\n  type: 'string';\n  enum: string[];\n};\n\nexport function parseEnumDef(def: ZodEnumDef): JsonSchema7EnumType {\n  return {\n    type: 'string',\n    enum: Array.from(def.values),\n  };\n}\n","import { ZodIntersectionDef } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { JsonSchema7Type } from '../parse-types';\nimport { Refs } from '../refs';\nimport { JsonSchema7StringType } from './string';\n\nexport type JsonSchema7AllOfType = {\n  allOf: JsonSchema7Type[];\n  unevaluatedProperties?: boolean;\n};\n\nconst isJsonSchema7AllOfType = (\n  type: JsonSchema7Type | JsonSchema7StringType,\n): type is JsonSchema7AllOfType => {\n  if ('type' in type && type.type === 'string') return false;\n  return 'allOf' in type;\n};\n\nexport function parseIntersectionDef(\n  def: ZodIntersectionDef,\n  refs: Refs,\n): JsonSchema7AllOfType | JsonSchema7Type | undefined {\n  const allOf = [\n    parseDef(def.left._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, 'allOf', '0'],\n    }),\n    parseDef(def.right._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, 'allOf', '1'],\n    }),\n  ].filter((x): x is JsonSchema7Type => !!x);\n\n  const mergedAllOf: JsonSchema7Type[] = [];\n  // If either of the schemas is an allOf, merge them into a single allOf\n  allOf.forEach(schema => {\n    if (isJsonSchema7AllOfType(schema)) {\n      mergedAllOf.push(...schema.allOf);\n    } else {\n      let nestedSchema: JsonSchema7Type = schema;\n      if (\n        'additionalProperties' in schema &&\n        schema.additionalProperties === false\n      ) {\n        const { additionalProperties, ...rest } = schema;\n        nestedSchema = rest;\n      }\n      mergedAllOf.push(nestedSchema);\n    }\n  });\n  return mergedAllOf.length ? { allOf: mergedAllOf } : undefined;\n}\n","import { ZodLiteralDef } from 'zod/v3';\n\nexport type JsonSchema7LiteralType =\n  | {\n      type: 'string' | 'number' | 'integer' | 'boolean';\n      const: string | number | boolean;\n    }\n  | {\n      type: 'object' | 'array';\n    };\n\nexport function parseLiteralDef(def: ZodLiteralDef): JsonSchema7LiteralType {\n  const parsedType = typeof def.value;\n  if (\n    parsedType !== 'bigint' &&\n    parsedType !== 'number' &&\n    parsedType !== 'boolean' &&\n    parsedType !== 'string'\n  ) {\n    return {\n      type: Array.isArray(def.value) ? 'array' : 'object',\n    };\n  }\n\n  return {\n    type: parsedType === 'bigint' ? 'integer' : parsedType,\n    const: def.value,\n  };\n}\n","import {\n  ZodFirstPartyTypeKind,\n  ZodMapDef,\n  ZodRecordDef,\n  ZodTypeAny,\n} from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { JsonSchema7Type } from '../parse-types';\nimport { Refs } from '../refs';\nimport { parseBrandedDef } from './branded';\nimport { JsonSchema7EnumType } from './enum';\nimport { JsonSchema7StringType, parseStringDef } from './string';\n\ntype JsonSchema7RecordPropertyNamesType =\n  | Omit<JsonSchema7StringType, 'type'>\n  | Omit<JsonSchema7EnumType, 'type'>;\n\nexport type JsonSchema7RecordType = {\n  type: 'object';\n  additionalProperties?: JsonSchema7Type | true;\n  propertyNames?: JsonSchema7RecordPropertyNamesType;\n};\n\nexport function parseRecordDef(\n  def: ZodRecordDef<ZodTypeAny, ZodTypeAny> | ZodMapDef,\n  refs: Refs,\n): JsonSchema7RecordType {\n  const schema: JsonSchema7RecordType = {\n    type: 'object',\n    additionalProperties:\n      parseDef(def.valueType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, 'additionalProperties'],\n      }) ?? refs.allowedAdditionalProperties,\n  };\n\n  if (\n    def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodString &&\n    def.keyType._def.checks?.length\n  ) {\n    const { type, ...keyType } = parseStringDef(def.keyType._def, refs);\n\n    return {\n      ...schema,\n      propertyNames: keyType,\n    };\n  } else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {\n    return {\n      ...schema,\n      propertyNames: {\n        enum: def.keyType._def.values,\n      },\n    };\n  } else if (\n    def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodBranded &&\n    def.keyType._def.type._def.typeName === ZodFirstPartyTypeKind.ZodString &&\n    def.keyType._def.type._def.checks?.length\n  ) {\n    const { type, ...keyType } = parseBrandedDef(\n      def.keyType._def,\n      refs,\n    ) as JsonSchema7StringType;\n\n    return {\n      ...schema,\n      propertyNames: keyType,\n    };\n  }\n\n  return schema;\n}\n","import { ZodStringDef } from 'zod/v3';\nimport { Refs } from '../refs';\n\nlet emojiRegex: RegExp | undefined = undefined;\n\n/**\n * Generated from the regular expressions found here as of 2024-05-22:\n * https://github.com/colinhacks/zod/blob/master/src/types.ts.\n *\n * Expressions with /i flag have been changed accordingly.\n */\nexport const zodPatterns = {\n  /**\n   * `c` was changed to `[cC]` to replicate /i flag\n   */\n  cuid: /^[cC][^\\s-]{8,}$/,\n  cuid2: /^[0-9a-z]+$/,\n  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,\n  /**\n   * `a-z` was added to replicate /i flag\n   */\n  email:\n    /^(?!\\.)(?!.*\\.\\.)([a-zA-Z0-9_'+\\-\\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\\-]*\\.)+[a-zA-Z]{2,}$/,\n  /**\n   * Constructed a valid Unicode RegExp\n   *\n   * Lazily instantiate since this type of regex isn't supported\n   * in all envs (e.g. React Native).\n   *\n   * See:\n   * https://github.com/colinhacks/zod/issues/2433\n   * Fix in Zod:\n   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b\n   */\n  emoji: () => {\n    if (emojiRegex === undefined) {\n      emojiRegex = RegExp(\n        '^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$',\n        'u',\n      );\n    }\n    return emojiRegex;\n  },\n  /**\n   * Unused\n   */\n  uuid: /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/,\n  /**\n   * Unused\n   */\n  ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,\n  ipv4Cidr:\n    /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/,\n  /**\n   * Unused\n   */\n  ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,\n  ipv6Cidr:\n    /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,\n  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,\n  base64url:\n    /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,\n  nanoid: /^[a-zA-Z0-9_-]{21}$/,\n  jwt: /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/,\n} as const;\n\nexport type JsonSchema7StringType = {\n  type: 'string';\n  minLength?: number;\n  maxLength?: number;\n  format?:\n    | 'email'\n    | 'idn-email'\n    | 'uri'\n    | 'uuid'\n    | 'date-time'\n    | 'ipv4'\n    | 'ipv6'\n    | 'date'\n    | 'time'\n    | 'duration';\n  pattern?: string;\n  allOf?: {\n    pattern: string;\n  }[];\n  anyOf?: {\n    format: string;\n  }[];\n  contentEncoding?: string;\n};\n\nexport function parseStringDef(\n  def: ZodStringDef,\n  refs: Refs,\n): JsonSchema7StringType {\n  const res: JsonSchema7StringType = {\n    type: 'string',\n  };\n\n  if (def.checks) {\n    for (const check of def.checks) {\n      switch (check.kind) {\n        case 'min':\n          res.minLength =\n            typeof res.minLength === 'number'\n              ? Math.max(res.minLength, check.value)\n              : check.value;\n          break;\n        case 'max':\n          res.maxLength =\n            typeof res.maxLength === 'number'\n              ? Math.min(res.maxLength, check.value)\n              : check.value;\n\n          break;\n        case 'email':\n          switch (refs.emailStrategy) {\n            case 'format:email':\n              addFormat(res, 'email', check.message, refs);\n              break;\n            case 'format:idn-email':\n              addFormat(res, 'idn-email', check.message, refs);\n              break;\n            case 'pattern:zod':\n              addPattern(res, zodPatterns.email, check.message, refs);\n              break;\n          }\n\n          break;\n        case 'url':\n          addFormat(res, 'uri', check.message, refs);\n          break;\n        case 'uuid':\n          addFormat(res, 'uuid', check.message, refs);\n          break;\n        case 'regex':\n          addPattern(res, check.regex, check.message, refs);\n          break;\n        case 'cuid':\n          addPattern(res, zodPatterns.cuid, check.message, refs);\n          break;\n        case 'cuid2':\n          addPattern(res, zodPatterns.cuid2, check.message, refs);\n          break;\n        case 'startsWith':\n          addPattern(\n            res,\n            RegExp(`^${escapeLiteralCheckValue(check.value, refs)}`),\n            check.message,\n            refs,\n          );\n          break;\n        case 'endsWith':\n          addPattern(\n            res,\n            RegExp(`${escapeLiteralCheckValue(check.value, refs)}$`),\n            check.message,\n            refs,\n          );\n          break;\n        case 'datetime':\n          addFormat(res, 'date-time', check.message, refs);\n          break;\n        case 'date':\n          addFormat(res, 'date', check.message, refs);\n          break;\n        case 'time':\n          addFormat(res, 'time', check.message, refs);\n          break;\n        case 'duration':\n          addFormat(res, 'duration', check.message, refs);\n          break;\n        case 'length':\n          res.minLength =\n            typeof res.minLength === 'number'\n              ? Math.max(res.minLength, check.value)\n              : check.value;\n          res.maxLength =\n            typeof res.maxLength === 'number'\n              ? Math.min(res.maxLength, check.value)\n              : check.value;\n          break;\n        case 'includes': {\n          addPattern(\n            res,\n            RegExp(escapeLiteralCheckValue(check.value, refs)),\n            check.message,\n            refs,\n          );\n          break;\n        }\n        case 'ip': {\n          if (check.version !== 'v6') {\n            addFormat(res, 'ipv4', check.message, refs);\n          }\n          if (check.version !== 'v4') {\n            addFormat(res, 'ipv6', check.message, refs);\n          }\n          break;\n        }\n        case 'base64url':\n          addPattern(res, zodPatterns.base64url, check.message, refs);\n          break;\n        case 'jwt':\n          addPattern(res, zodPatterns.jwt, check.message, refs);\n          break;\n        case 'cidr': {\n          if (check.version !== 'v6') {\n            addPattern(res, zodPatterns.ipv4Cidr, check.message, refs);\n          }\n          if (check.version !== 'v4') {\n            addPattern(res, zodPatterns.ipv6Cidr, check.message, refs);\n          }\n          break;\n        }\n        case 'emoji':\n          addPattern(res, zodPatterns.emoji(), check.message, refs);\n          break;\n        case 'ulid': {\n          addPattern(res, zodPatterns.ulid, check.message, refs);\n          break;\n        }\n        case 'base64': {\n          switch (refs.base64Strategy) {\n            case 'format:binary': {\n              addFormat(res, 'binary' as any, check.message, refs);\n              break;\n            }\n\n            case 'contentEncoding:base64': {\n              res.contentEncoding = 'base64';\n              break;\n            }\n\n            case 'pattern:zod': {\n              addPattern(res, zodPatterns.base64, check.message, refs);\n              break;\n            }\n          }\n          break;\n        }\n        case 'nanoid': {\n          addPattern(res, zodPatterns.nanoid, check.message, refs);\n        }\n        case 'toLowerCase':\n        case 'toUpperCase':\n        case 'trim':\n          break;\n        default:\n          /* c8 ignore next */\n          ((_: never) => {})(check);\n      }\n    }\n  }\n\n  return res;\n}\n\nfunction escapeLiteralCheckValue(literal: string, refs: Refs): string {\n  return refs.patternStrategy === 'escape'\n    ? escapeNonAlphaNumeric(literal)\n    : literal;\n}\n\nconst ALPHA_NUMERIC = new Set(\n  'ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789',\n);\n\nfunction escapeNonAlphaNumeric(source: string) {\n  let result = '';\n\n  for (let i = 0; i < source.length; i++) {\n    if (!ALPHA_NUMERIC.has(source[i])) {\n      result += '\\\\';\n    }\n\n    result += source[i];\n  }\n\n  return result;\n}\n\n// Adds a \"format\" keyword to the schema. If a format exists, both formats will be joined in an allOf-node, along with subsequent ones.\nfunction addFormat(\n  schema: JsonSchema7StringType,\n  value: Required<JsonSchema7StringType>['format'],\n  message: string | undefined,\n  refs: Refs,\n) {\n  if (schema.format || schema.anyOf?.some(x => x.format)) {\n    if (!schema.anyOf) {\n      schema.anyOf = [];\n    }\n\n    if (schema.format) {\n      schema.anyOf!.push({\n        format: schema.format,\n      });\n      delete schema.format;\n    }\n\n    schema.anyOf!.push({\n      format: value,\n      ...(message &&\n        refs.errorMessages && { errorMessage: { format: message } }),\n    });\n  } else {\n    schema.format = value;\n  }\n}\n\n// Adds a \"pattern\" keyword to the schema. If a pattern exists, both patterns will be joined in an allOf-node, along with subsequent ones.\nfunction addPattern(\n  schema: JsonSchema7StringType,\n  regex: RegExp,\n  message: string | undefined,\n  refs: Refs,\n) {\n  if (schema.pattern || schema.allOf?.some(x => x.pattern)) {\n    if (!schema.allOf) {\n      schema.allOf = [];\n    }\n\n    if (schema.pattern) {\n      schema.allOf!.push({\n        pattern: schema.pattern,\n      });\n      delete schema.pattern;\n    }\n\n    schema.allOf!.push({\n      pattern: stringifyRegExpWithFlags(regex, refs),\n      ...(message &&\n        refs.errorMessages && { errorMessage: { pattern: message } }),\n    });\n  } else {\n    schema.pattern = stringifyRegExpWithFlags(regex, refs);\n  }\n}\n\n// Mutate z.string.regex() in a best attempt to accommodate for regex flags when applyRegexFlags is true\nfunction stringifyRegExpWithFlags(regex: RegExp, refs: Refs): string {\n  if (!refs.applyRegexFlags || !regex.flags) {\n    return regex.source;\n  }\n\n  // Currently handled flags\n  const flags = {\n    i: regex.flags.includes('i'), // Case-insensitive\n    m: regex.flags.includes('m'), // `^` and `$` matches adjacent to newline characters\n    s: regex.flags.includes('s'), // `.` matches newlines\n  };\n\n  // The general principle here is to step through each character, one at a time, applying mutations as flags require. We keep track when the current character is escaped, and when it's inside a group /like [this]/ or (also) a range like /[a-z]/. The following is fairly brittle imperative code; edit at your peril!\n  const source = flags.i ? regex.source.toLowerCase() : regex.source;\n  let pattern = '';\n  let isEscaped = false;\n  let inCharGroup = false;\n  let inCharRange = false;\n\n  for (let i = 0; i < source.length; i++) {\n    if (isEscaped) {\n      pattern += source[i];\n      isEscaped = false;\n      continue;\n    }\n\n    if (flags.i) {\n      if (inCharGroup) {\n        if (source[i].match(/[a-z]/)) {\n          if (inCharRange) {\n            pattern += source[i];\n            pattern += `${source[i - 2]}-${source[i]}`.toUpperCase();\n            inCharRange = false;\n          } else if (source[i + 1] === '-' && source[i + 2]?.match(/[a-z]/)) {\n            pattern += source[i];\n            inCharRange = true;\n          } else {\n            pattern += `${source[i]}${source[i].toUpperCase()}`;\n          }\n          continue;\n        }\n      } else if (source[i].match(/[a-z]/)) {\n        pattern += `[${source[i]}${source[i].toUpperCase()}]`;\n        continue;\n      }\n    }\n\n    if (flags.m) {\n      if (source[i] === '^') {\n        pattern += `(^|(?<=[\\r\\n]))`;\n        continue;\n      } else if (source[i] === '$') {\n        pattern += `($|(?=[\\r\\n]))`;\n        continue;\n      }\n    }\n\n    if (flags.s && source[i] === '.') {\n      pattern += inCharGroup ? `${source[i]}\\r\\n` : `[${source[i]}\\r\\n]`;\n      continue;\n    }\n\n    pattern += source[i];\n    if (source[i] === '\\\\') {\n      isEscaped = true;\n    } else if (inCharGroup && source[i] === ']') {\n      inCharGroup = false;\n    } else if (!inCharGroup && source[i] === '[') {\n      inCharGroup = true;\n    }\n  }\n\n  try {\n    new RegExp(pattern);\n  } catch {\n    console.warn(\n      `Could not convert regex pattern at ${refs.currentPath.join(\n        '/',\n      )} to a flag-independent form! Falling back to the flag-ignorant source`,\n    );\n    return regex.source;\n  }\n\n  return pattern;\n}\n","import { ZodMapDef } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { JsonSchema7Type } from '../parse-types';\nimport { Refs } from '../refs';\nimport { parseAnyDef } from './any';\nimport { JsonSchema7RecordType, parseRecordDef } from './record';\n\nexport type JsonSchema7MapType = {\n  type: 'array';\n  maxItems: 125;\n  items: {\n    type: 'array';\n    items: [JsonSchema7Type, JsonSchema7Type];\n    minItems: 2;\n    maxItems: 2;\n  };\n};\n\nexport function parseMapDef(\n  def: ZodMapDef,\n  refs: Refs,\n): JsonSchema7MapType | JsonSchema7RecordType {\n  if (refs.mapStrategy === 'record') {\n    return parseRecordDef(def, refs);\n  }\n\n  const keys =\n    parseDef(def.keyType._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, 'items', 'items', '0'],\n    }) || parseAnyDef();\n  const values =\n    parseDef(def.valueType._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, 'items', 'items', '1'],\n    }) || parseAnyDef();\n  return {\n    type: 'array',\n    maxItems: 125,\n    items: {\n      type: 'array',\n      items: [keys, values],\n      minItems: 2,\n      maxItems: 2,\n    },\n  };\n}\n","import { ZodNativeEnumDef } from 'zod/v3';\n\nexport type JsonSchema7NativeEnumType = {\n  type: 'string' | 'number' | ['string', 'number'];\n  enum: (string | number)[];\n};\n\nexport function parseNativeEnumDef(\n  def: ZodNativeEnumDef,\n): JsonSchema7NativeEnumType {\n  const object = def.values;\n  const actualKeys = Object.keys(def.values).filter((key: string) => {\n    return typeof object[object[key]] !== 'number';\n  });\n\n  const actualValues = actualKeys.map((key: string) => object[key]);\n\n  const parsedTypes = Array.from(\n    new Set(actualValues.map((values: string | number) => typeof values)),\n  );\n\n  return {\n    type:\n      parsedTypes.length === 1\n        ? parsedTypes[0] === 'string'\n          ? 'string'\n          : 'number'\n        : ['string', 'number'],\n    enum: actualValues,\n  };\n}\n","import { JsonSchema7AnyType, parseAnyDef } from './any';\n\nexport type JsonSchema7NeverType = {\n  not: JsonSchema7AnyType;\n};\n\nexport function parseNeverDef(): JsonSchema7NeverType | undefined {\n  return { not: parseAnyDef() };\n}\n","export type JsonSchema7NullType = {\n  type: 'null';\n};\n\nexport function parseNullDef(): JsonSchema7NullType {\n  return {\n    type: 'null',\n  };\n}\n","import {\n  ZodDiscriminatedUnionDef,\n  ZodLiteralDef,\n  ZodTypeAny,\n  ZodUnionDef,\n} from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { JsonSchema7Type } from '../parse-types';\nimport { Refs } from '../refs';\n\nexport const primitiveMappings = {\n  ZodString: 'string',\n  ZodNumber: 'number',\n  ZodBigInt: 'integer',\n  ZodBoolean: 'boolean',\n  ZodNull: 'null',\n} as const;\ntype ZodPrimitive = keyof typeof primitiveMappings;\ntype JsonSchema7Primitive =\n  (typeof primitiveMappings)[keyof typeof primitiveMappings];\n\nexport type JsonSchema7UnionType =\n  | JsonSchema7PrimitiveUnionType\n  | JsonSchema7AnyOfType;\n\ntype JsonSchema7PrimitiveUnionType =\n  | {\n      type: JsonSchema7Primitive | JsonSchema7Primitive[];\n    }\n  | {\n      type: JsonSchema7Primitive | JsonSchema7Primitive[];\n      enum: (string | number | bigint | boolean | null)[];\n    };\n\ntype JsonSchema7AnyOfType = {\n  anyOf: JsonSchema7Type[];\n};\n\nexport function parseUnionDef(\n  def: ZodUnionDef | ZodDiscriminatedUnionDef<any, any>,\n  refs: Refs,\n): JsonSchema7PrimitiveUnionType | JsonSchema7AnyOfType | undefined {\n  const options: readonly ZodTypeAny[] =\n    def.options instanceof Map ? Array.from(def.options.values()) : def.options;\n\n  // This blocks tries to look ahead a bit to produce nicer looking schemas with type array instead of anyOf.\n  if (\n    options.every(\n      x =>\n        x._def.typeName in primitiveMappings &&\n        (!x._def.checks || !x._def.checks.length),\n    )\n  ) {\n    // all types in union are primitive and lack checks, so might as well squash into {type: [...]}\n\n    const types = options.reduce((types: JsonSchema7Primitive[], x) => {\n      const type = primitiveMappings[x._def.typeName as ZodPrimitive]; //Can be safely casted due to row 43\n      return type && !types.includes(type) ? [...types, type] : types;\n    }, []);\n\n    return {\n      type: types.length > 1 ? types : types[0],\n    };\n  } else if (\n    options.every(x => x._def.typeName === 'ZodLiteral' && !x.description)\n  ) {\n    // all options literals\n\n    const types = options.reduce(\n      (acc: JsonSchema7Primitive[], x: { _def: ZodLiteralDef }) => {\n        const type = typeof x._def.value;\n        switch (type) {\n          case 'string':\n          case 'number':\n          case 'boolean':\n            return [...acc, type];\n          case 'bigint':\n            return [...acc, 'integer' as const];\n          case 'object':\n            if (x._def.value === null) return [...acc, 'null' as const];\n          case 'symbol':\n          case 'undefined':\n          case 'function':\n          default:\n            return acc;\n        }\n      },\n      [],\n    );\n\n    if (types.length === options.length) {\n      // all the literals are primitive, as far as null can be considered primitive\n\n      const uniqueTypes = types.filter((x, i, a) => a.indexOf(x) === i);\n      return {\n        type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],\n        enum: options.reduce(\n          (acc, x) => {\n            return acc.includes(x._def.value) ? acc : [...acc, x._def.value];\n          },\n          [] as (string | number | bigint | boolean | null)[],\n        ),\n      };\n    }\n  } else if (options.every(x => x._def.typeName === 'ZodEnum')) {\n    return {\n      type: 'string',\n      enum: options.reduce(\n        (acc: string[], x) => [\n          ...acc,\n          ...x._def.values.filter((x: string) => !acc.includes(x)),\n        ],\n        [],\n      ),\n    };\n  }\n\n  return asAnyOf(def, refs);\n}\n\nconst asAnyOf = (\n  def: ZodUnionDef | ZodDiscriminatedUnionDef<any, any>,\n  refs: Refs,\n): JsonSchema7PrimitiveUnionType | JsonSchema7AnyOfType | undefined => {\n  const anyOf = (\n    (def.options instanceof Map\n      ? Array.from(def.options.values())\n      : def.options) as any[]\n  )\n    .map((x, i) =>\n      parseDef(x._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, 'anyOf', `${i}`],\n      }),\n    )\n    .filter(\n      (x): x is JsonSchema7Type =>\n        !!x &&\n        (!refs.strictUnions ||\n          (typeof x === 'object' && Object.keys(x).length > 0)),\n    );\n\n  return anyOf.length ? { anyOf } : undefined;\n};\n","import { ZodNullableDef } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { JsonSchema7Type } from '../parse-types';\nimport { Refs } from '../refs';\nimport { JsonSchema7NullType } from './null';\nimport { primitiveMappings } from './union';\n\nexport type JsonSchema7NullableType =\n  | {\n      anyOf: [JsonSchema7Type, JsonSchema7NullType];\n    }\n  | {\n      type: [string, 'null'];\n    };\n\nexport function parseNullableDef(\n  def: ZodNullableDef,\n  refs: Refs,\n): JsonSchema7NullableType | undefined {\n  if (\n    ['ZodString', 'ZodNumber', 'ZodBigInt', 'ZodBoolean', 'ZodNull'].includes(\n      def.innerType._def.typeName,\n    ) &&\n    (!def.innerType._def.checks || !def.innerType._def.checks.length)\n  ) {\n    return {\n      type: [\n        primitiveMappings[\n          def.innerType._def.typeName as keyof typeof primitiveMappings\n        ],\n        'null',\n      ],\n    };\n  }\n\n  const base = parseDef(def.innerType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, 'anyOf', '0'],\n  });\n\n  return base && { anyOf: [base, { type: 'null' }] };\n}\n","import { ZodNumberDef } from 'zod/v3';\n\nexport type JsonSchema7NumberType = {\n  type: 'number' | 'integer';\n  minimum?: number;\n  exclusiveMinimum?: number;\n  maximum?: number;\n  exclusiveMaximum?: number;\n  multipleOf?: number;\n};\n\nexport function parseNumberDef(def: ZodNumberDef): JsonSchema7NumberType {\n  const res: JsonSchema7NumberType = {\n    type: 'number',\n  };\n\n  if (!def.checks) return res;\n\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case 'int':\n        res.type = 'integer';\n        break;\n      case 'min':\n        if (check.inclusive) {\n          res.minimum = check.value;\n        } else {\n          res.exclusiveMinimum = check.value;\n        }\n        break;\n      case 'max':\n        if (check.inclusive) {\n          res.maximum = check.value;\n        } else {\n          res.exclusiveMaximum = check.value;\n        }\n        break;\n      case 'multipleOf':\n        res.multipleOf = check.value;\n        break;\n    }\n  }\n  return res;\n}\n","import { ZodObjectDef, ZodTypeAny } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { JsonSchema7Type } from '../parse-types';\nimport { Refs } from '../refs';\n\nexport type JsonSchema7ObjectType = {\n  type: 'object';\n  properties: Record<string, JsonSchema7Type>;\n  additionalProperties?: boolean | JsonSchema7Type;\n  required?: string[];\n};\n\nexport function parseObjectDef(def: ZodObjectDef, refs: Refs) {\n  const result: JsonSchema7ObjectType = {\n    type: 'object',\n    properties: {},\n  };\n\n  const required: string[] = [];\n\n  const shape = def.shape();\n\n  for (const propName in shape) {\n    let propDef = shape[propName];\n\n    if (propDef === undefined || propDef._def === undefined) {\n      continue;\n    }\n\n    const propOptional = safeIsOptional(propDef);\n\n    const parsedDef = parseDef(propDef._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, 'properties', propName],\n      propertyPath: [...refs.currentPath, 'properties', propName],\n    });\n\n    if (parsedDef === undefined) {\n      continue;\n    }\n\n    result.properties[propName] = parsedDef;\n\n    if (!propOptional) {\n      required.push(propName);\n    }\n  }\n\n  if (required.length) {\n    result.required = required;\n  }\n\n  const additionalProperties = decideAdditionalProperties(def, refs);\n\n  if (additionalProperties !== undefined) {\n    result.additionalProperties = additionalProperties;\n  }\n\n  return result;\n}\n\nfunction decideAdditionalProperties(def: ZodObjectDef, refs: Refs) {\n  if (def.catchall._def.typeName !== 'ZodNever') {\n    return parseDef(def.catchall._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, 'additionalProperties'],\n    });\n  }\n\n  switch (def.unknownKeys) {\n    case 'passthrough':\n      return refs.allowedAdditionalProperties;\n    case 'strict':\n      return refs.rejectedAdditionalProperties;\n    case 'strip':\n      return refs.removeAdditionalStrategy === 'strict'\n        ? refs.allowedAdditionalProperties\n        : refs.rejectedAdditionalProperties;\n  }\n}\n\nfunction safeIsOptional(schema: ZodTypeAny): boolean {\n  try {\n    return schema.isOptional();\n  } catch {\n    return true;\n  }\n}\n","import { ZodOptionalDef } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { JsonSchema7Type } from '../parse-types';\nimport { Refs } from '../refs';\nimport { parseAnyDef } from './any';\n\nexport const parseOptionalDef = (\n  def: ZodOptionalDef,\n  refs: Refs,\n): JsonSchema7Type | undefined => {\n  if (refs.currentPath.toString() === refs.propertyPath?.toString()) {\n    return parseDef(def.innerType._def, refs);\n  }\n\n  const innerSchema = parseDef(def.innerType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, 'anyOf', '1'],\n  });\n\n  return innerSchema\n    ? { anyOf: [{ not: parseAnyDef() }, innerSchema] }\n    : parseAnyDef();\n};\n","import { ZodPipelineDef } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { JsonSchema7Type } from '../parse-types';\nimport { Refs } from '../refs';\nimport { JsonSchema7AllOfType } from './intersection';\n\nexport const parsePipelineDef = (\n  def: ZodPipelineDef<any, any>,\n  refs: Refs,\n): JsonSchema7AllOfType | JsonSchema7Type | undefined => {\n  if (refs.pipeStrategy === 'input') {\n    return parseDef(def.in._def, refs);\n  } else if (refs.pipeStrategy === 'output') {\n    return parseDef(def.out._def, refs);\n  }\n\n  const a = parseDef(def.in._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, 'allOf', '0'],\n  });\n  const b = parseDef(def.out._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, 'allOf', a ? '1' : '0'],\n  });\n\n  return {\n    allOf: [a, b].filter((x): x is JsonSchema7Type => x !== undefined),\n  };\n};\n","import { ZodPromiseDef } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { JsonSchema7Type } from '../parse-types';\nimport { Refs } from '../refs';\n\nexport function parsePromiseDef(\n  def: ZodPromiseDef,\n  refs: Refs,\n): JsonSchema7Type | undefined {\n  return parseDef(def.type._def, refs);\n}\n","import { ZodSetDef } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { JsonSchema7Type } from '../parse-types';\nimport { Refs } from '../refs';\n\nexport type JsonSchema7SetType = {\n  type: 'array';\n  uniqueItems: true;\n  items?: JsonSchema7Type;\n  minItems?: number;\n  maxItems?: number;\n};\n\nexport function parseSetDef(def: ZodSetDef, refs: Refs): JsonSchema7SetType {\n  const items = parseDef(def.valueType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, 'items'],\n  });\n\n  const schema: JsonSchema7SetType = {\n    type: 'array',\n    uniqueItems: true,\n    items,\n  };\n\n  if (def.minSize) {\n    schema.minItems = def.minSize.value;\n  }\n\n  if (def.maxSize) {\n    schema.maxItems = def.maxSize.value;\n  }\n\n  return schema;\n}\n","import { ZodTupleDef, ZodTupleItems, ZodTypeAny } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { JsonSchema7Type } from '../parse-types';\nimport { Refs } from '../refs';\n\nexport type JsonSchema7TupleType = {\n  type: 'array';\n  minItems: number;\n  items: JsonSchema7Type[];\n} & (\n  | {\n      maxItems: number;\n    }\n  | {\n      additionalItems?: JsonSchema7Type;\n    }\n);\n\nexport function parseTupleDef(\n  def: ZodTupleDef<ZodTupleItems | [], ZodTypeAny | null>,\n  refs: Refs,\n): JsonSchema7TupleType {\n  if (def.rest) {\n    return {\n      type: 'array',\n      minItems: def.items.length,\n      items: def.items\n        .map((x, i) =>\n          parseDef(x._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, 'items', `${i}`],\n          }),\n        )\n        .reduce(\n          (acc: JsonSchema7Type[], x) => (x === undefined ? acc : [...acc, x]),\n          [],\n        ),\n      additionalItems: parseDef(def.rest._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, 'additionalItems'],\n      }),\n    };\n  } else {\n    return {\n      type: 'array',\n      minItems: def.items.length,\n      maxItems: def.items.length,\n      items: def.items\n        .map((x, i) =>\n          parseDef(x._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, 'items', `${i}`],\n          }),\n        )\n        .reduce(\n          (acc: JsonSchema7Type[], x) => (x === undefined ? acc : [...acc, x]),\n          [],\n        ),\n    };\n  }\n}\n","import { JsonSchema7AnyType, parseAnyDef } from './any';\n\nexport type JsonSchema7UndefinedType = {\n  not: JsonSchema7AnyType;\n};\n\nexport function parseUndefinedDef(): JsonSchema7UndefinedType {\n  return {\n    not: parseAnyDef(),\n  };\n}\n","import { JsonSchema7AnyType, parseAnyDef } from './any';\n\nexport type JsonSchema7UnknownType = JsonSchema7AnyType;\n\nexport function parseUnknownDef(): JsonSchema7UnknownType {\n  return parseAnyDef();\n}\n","import { ZodReadonlyDef } from 'zod/v3';\nimport { parseDef } from '../parse-def';\nimport { Refs } from '../refs';\n\nexport const parseReadonlyDef = (def: ZodReadonlyDef<any>, refs: Refs) => {\n  return parseDef(def.innerType._def, refs);\n};\n","import { ZodTypeDef } from 'zod/v3';\nimport { Refs, Seen } from './refs';\nimport { ignoreOverride } from './options';\nimport { JsonSchema7Type } from './parse-types';\nimport { selectParser } from './select-parser';\nimport { getRelativePath } from './get-relative-path';\nimport { parseAnyDef } from './parsers/any';\n\nexport function parseDef(\n  def: ZodTypeDef,\n  refs: Refs,\n  forceResolution = false, // Forces a new schema to be instantiated even though its def has been seen. Used for improving refs in definitions. See https://github.com/StefanTerdell/zod-to-json-schema/pull/61.\n): JsonSchema7Type | undefined {\n  const seenItem = refs.seen.get(def);\n\n  if (refs.override) {\n    const overrideResult = refs.override?.(\n      def,\n      refs,\n      seenItem,\n      forceResolution,\n    );\n\n    if (overrideResult !== ignoreOverride) {\n      return overrideResult;\n    }\n  }\n\n  if (seenItem && !forceResolution) {\n    const seenSchema = get$ref(seenItem, refs);\n\n    if (seenSchema !== undefined) {\n      return seenSchema;\n    }\n  }\n\n  const newItem: Seen = { def, path: refs.currentPath, jsonSchema: undefined };\n\n  refs.seen.set(def, newItem);\n\n  const jsonSchemaOrGetter = selectParser(def, (def as any).typeName, refs);\n\n  // If the return was a function, then the inner definition needs to be extracted before a call to parseDef (recursive)\n  const jsonSchema =\n    typeof jsonSchemaOrGetter === 'function'\n      ? parseDef(jsonSchemaOrGetter(), refs)\n      : jsonSchemaOrGetter;\n\n  if (jsonSchema) {\n    addMeta(def, refs, jsonSchema);\n  }\n\n  if (refs.postProcess) {\n    const postProcessResult = refs.postProcess(jsonSchema, def, refs);\n\n    newItem.jsonSchema = jsonSchema;\n\n    return postProcessResult;\n  }\n\n  newItem.jsonSchema = jsonSchema;\n\n  return jsonSchema;\n}\n\nconst get$ref = (\n  item: Seen,\n  refs: Refs,\n):\n  | {\n      $ref: string;\n    }\n  | {}\n  | undefined => {\n  switch (refs.$refStrategy) {\n    case 'root':\n      return { $ref: item.path.join('/') };\n    case 'relative':\n      return { $ref: getRelativePath(refs.currentPath, item.path) };\n    case 'none':\n    case 'seen': {\n      if (\n        item.path.length < refs.currentPath.length &&\n        item.path.every((value, index) => refs.currentPath[index] === value)\n      ) {\n        console.warn(\n          `Recursive reference detected at ${refs.currentPath.join(\n            '/',\n          )}! Defaulting to any`,\n        );\n\n        return parseAnyDef();\n      }\n\n      return refs.$refStrategy === 'seen' ? parseAnyDef() : undefined;\n    }\n  }\n};\n\nconst addMeta = (\n  def: ZodTypeDef,\n  refs: Refs,\n  jsonSchema: JsonSchema7Type,\n): JsonSchema7Type => {\n  if (def.description) {\n    jsonSchema.description = def.description;\n  }\n  return jsonSchema;\n};\n","import { ZodTypeDef } from 'zod/v3';\nimport { getDefaultOptions, Options } from './options';\nimport { JsonSchema7Type } from './parse-types';\n\nexport type Refs = {\n  seen: Map<ZodTypeDef, Seen>;\n  currentPath: string[];\n  propertyPath: string[] | undefined;\n} & Options;\n\nexport type Seen = {\n  def: ZodTypeDef;\n  path: string[];\n  jsonSchema: JsonSchema7Type | undefined;\n};\n\nexport const getRefs = (options?: string | Partial<Options>): Refs => {\n  const _options = getDefaultOptions(options);\n  const currentPath =\n    _options.name !== undefined\n      ? [..._options.basePath, _options.definitionPath, _options.name]\n      : _options.basePath;\n  return {\n    ..._options,\n    currentPath: currentPath,\n    propertyPath: undefined,\n    seen: new Map(\n      Object.entries(_options.definitions).map(([name, def]) => [\n        def._def,\n        {\n          def: def._def,\n          path: [..._options.basePath, _options.definitionPath, name],\n          // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.\n          jsonSchema: undefined,\n        },\n      ]),\n    ),\n  };\n};\n","import { ZodSchema } from 'zod/v3';\nimport { Options } from './options';\nimport { parseDef } from './parse-def';\nimport { JsonSchema7Type } from './parse-types';\nimport { getRefs } from './refs';\nimport { parseAnyDef } from './parsers/any';\n\nconst zodToJsonSchema = (\n  schema: ZodSchema<any>,\n  options?: Partial<Options> | string,\n): JsonSchema7Type & {\n  $schema?: string;\n  definitions?: {\n    [key: string]: JsonSchema7Type;\n  };\n} => {\n  const refs = getRefs(options);\n\n  let definitions =\n    typeof options === 'object' && options.definitions\n      ? Object.entries(options.definitions).reduce(\n          (acc: { [key: string]: JsonSchema7Type }, [name, schema]) => ({\n            ...acc,\n            [name]:\n              parseDef(\n                schema._def,\n                {\n                  ...refs,\n                  currentPath: [...refs.basePath, refs.definitionPath, name],\n                },\n                true,\n              ) ?? parseAnyDef(),\n          }),\n          {},\n        )\n      : undefined;\n\n  const name =\n    typeof options === 'string'\n      ? options\n      : options?.nameStrategy === 'title'\n        ? undefined\n        : options?.name;\n\n  const main =\n    parseDef(\n      schema._def,\n      name === undefined\n        ? refs\n        : {\n            ...refs,\n            currentPath: [...refs.basePath, refs.definitionPath, name],\n          },\n      false,\n    ) ?? (parseAnyDef() as JsonSchema7Type);\n\n  const title =\n    typeof options === 'object' &&\n    options.name !== undefined &&\n    options.nameStrategy === 'title'\n      ? options.name\n      : undefined;\n\n  if (title !== undefined) {\n    main.title = title;\n  }\n\n  const combined: ReturnType<typeof zodToJsonSchema> =\n    name === undefined\n      ? definitions\n        ? {\n            ...main,\n            [refs.definitionPath]: definitions,\n          }\n        : main\n      : {\n          $ref: [\n            ...(refs.$refStrategy === 'relative' ? [] : refs.basePath),\n            refs.definitionPath,\n            name,\n          ].join('/'),\n          [refs.definitionPath]: {\n            ...definitions,\n            [name]: main,\n          },\n        };\n\n  combined.$schema = 'http://json-schema.org/draft-07/schema#';\n\n  return combined;\n};\n\nexport { zodToJsonSchema };\n","export * from './get-relative-path';\nexport * from './options';\nexport * from './parse-def';\nexport * from './parse-types';\nexport * from './parsers/any';\nexport * from './parsers/array';\nexport * from './parsers/bigint';\nexport * from './parsers/boolean';\nexport * from './parsers/branded';\nexport * from './parsers/catch';\nexport * from './parsers/date';\nexport * from './parsers/default';\nexport * from './parsers/effects';\nexport * from './parsers/enum';\nexport * from './parsers/intersection';\nexport * from './parsers/literal';\nexport * from './parsers/map';\nexport * from './parsers/native-enum';\nexport * from './parsers/never';\nexport * from './parsers/null';\nexport * from './parsers/nullable';\nexport * from './parsers/number';\nexport * from './parsers/object';\nexport * from './parsers/optional';\nexport * from './parsers/pipeline';\nexport * from './parsers/promise';\nexport * from './parsers/readonly';\nexport * from './parsers/record';\nexport * from './parsers/set';\nexport * from './parsers/string';\nexport * from './parsers/tuple';\nexport * from './parsers/undefined';\nexport * from './parsers/union';\nexport * from './parsers/unknown';\nexport * from './refs';\nexport * from './select-parser';\nexport * from './zod-to-json-schema';\nimport { zodToJsonSchema } from './zod-to-json-schema';\nexport default zodToJsonSchema;\n","import { Validator, validatorSymbol, type ValidationResult } from './validator';\nimport { JSONSchema7 } from '@ai-sdk/provider';\nimport * as z3 from 'zod/v3';\nimport * as z4 from 'zod/v4';\nimport { zodSchema } from './zod-schema';\n\n/**\n * Used to mark schemas so we can support both Zod and custom schemas.\n */\nconst schemaSymbol = Symbol.for('vercel.ai.schema');\n\nexport type Schema<OBJECT = unknown> = Validator<OBJECT> & {\n  /**\n   * Used to mark schemas so we can support both Zod and custom schemas.\n   */\n  [schemaSymbol]: true;\n\n  /**\n   * Schema type for inference.\n   */\n  _type: OBJECT;\n\n  /**\n   * The JSON Schema for the schema. It is passed to the providers.\n   */\n  readonly jsonSchema: JSONSchema7;\n};\n\n// Note: Zod types here exactly match the types in zod-schema.ts\n// to prevent type errors when using zod schemas with flexible schemas.\nexport type FlexibleSchema<T> =\n  | z4.core.$ZodType<T, any>\n  | z3.Schema<T, z3.ZodTypeDef, any>\n  | Schema<T>;\n\nexport type InferSchema<SCHEMA> = SCHEMA extends z3.Schema\n  ? z3.infer<SCHEMA>\n  : SCHEMA extends z4.core.$ZodType\n    ? z4.infer<SCHEMA>\n    : SCHEMA extends Schema<infer T>\n      ? T\n      : never;\n\n/**\n * Create a schema using a JSON Schema.\n *\n * @param jsonSchema The JSON Schema for the schema.\n * @param options.validate Optional. A validation function for the schema.\n */\nexport function jsonSchema<OBJECT = unknown>(\n  jsonSchema: JSONSchema7,\n  {\n    validate,\n  }: {\n    validate?: (\n      value: unknown,\n    ) => ValidationResult<OBJECT> | PromiseLike<ValidationResult<OBJECT>>;\n  } = {},\n): Schema<OBJECT> {\n  return {\n    [schemaSymbol]: true,\n    _type: undefined as OBJECT, // should never be used directly\n    [validatorSymbol]: true,\n    jsonSchema,\n    validate,\n  };\n}\n\nfunction isSchema(value: unknown): value is Schema {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    schemaSymbol in value &&\n    value[schemaSymbol] === true &&\n    'jsonSchema' in value &&\n    'validate' in value\n  );\n}\n\nexport function asSchema<OBJECT>(\n  schema:\n    | z4.core.$ZodType<OBJECT, any>\n    | z3.Schema<OBJECT, z3.ZodTypeDef, any>\n    | Schema<OBJECT>\n    | undefined,\n): Schema<OBJECT> {\n  return schema == null\n    ? jsonSchema({\n        properties: {},\n        additionalProperties: false,\n      })\n    : isSchema(schema)\n      ? schema\n      : zodSchema(schema);\n}\n","// btoa and atob need to be invoked as a function call, not as a method call.\n// Otherwise CloudFlare will throw a\n// \"TypeError: Illegal invocation: function called with incorrect this reference\"\nconst { btoa, atob } = globalThis;\n\nexport function convertBase64ToUint8Array(base64String: string) {\n  const base64Url = base64String.replace(/-/g, '+').replace(/_/g, '/');\n  const latin1string = atob(base64Url);\n  return Uint8Array.from(latin1string, byte => byte.codePointAt(0)!);\n}\n\nexport function convertUint8ArrayToBase64(array: Uint8Array): string {\n  let latin1string = '';\n\n  // Note: regular for loop to support older JavaScript versions that\n  // do not support for..of on Uint8Array\n  for (let i = 0; i < array.length; i++) {\n    latin1string += String.fromCodePoint(array[i]);\n  }\n\n  return btoa(latin1string);\n}\n\nexport function convertToBase64(value: string | Uint8Array): string {\n  return value instanceof Uint8Array ? convertUint8ArrayToBase64(value) : value;\n}\n","export function withoutTrailingSlash(url: string | undefined) {\n  return url?.replace(/\\/$/, '');\n}\n","export function isAsyncIterable<T = any>(obj: any): obj is AsyncIterable<T> {\n  return obj != null && typeof obj[Symbol.asyncIterator] === 'function';\n}\n","import { Tool, ToolCallOptions, ToolExecuteFunction } from './tool';\nimport { isAsyncIterable } from '../is-async-iterable';\n\nexport async function* executeTool<INPUT, OUTPUT>({\n  execute,\n  input,\n  options,\n}: {\n  execute: ToolExecuteFunction<INPUT, OUTPUT>;\n  input: INPUT;\n  options: ToolCallOptions;\n}): AsyncGenerator<\n  { type: 'preliminary'; output: OUTPUT } | { type: 'final'; output: OUTPUT }\n> {\n  const result = execute(input, options);\n\n  if (isAsyncIterable(result)) {\n    let lastOutput: OUTPUT | undefined;\n    for await (const output of result) {\n      lastOutput = output;\n      yield { type: 'preliminary', output };\n    }\n    yield { type: 'final', output: lastOutput! };\n  } else {\n    yield { type: 'final', output: await result };\n  }\n}\n","export * from './combine-headers';\nexport { convertAsyncIteratorToReadableStream } from './convert-async-iterator-to-readable-stream';\nexport * from './delay';\nexport * from './extract-response-headers';\nexport * from './fetch-function';\nexport { createIdGenerator, generateId, type IdGenerator } from './generate-id';\nexport * from './get-error-message';\nexport * from './get-from-api';\nexport { injectJsonInstructionIntoMessages } from './inject-json-instruction';\nexport * from './is-abort-error';\nexport { isUrlSupported } from './is-url-supported';\nexport * from './load-api-key';\nexport { loadOptionalSetting } from './load-optional-setting';\nexport { loadSetting } from './load-setting';\nexport { mediaTypeToExtension } from './media-type-to-extension';\nexport * from './parse-json';\nexport { parseJsonEventStream } from './parse-json-event-stream';\nexport { parseProviderOptions } from './parse-provider-options';\nexport * from './post-to-api';\nexport {\n  createProviderDefinedToolFactory,\n  createProviderDefinedToolFactoryWithOutputSchema,\n  type ProviderDefinedToolFactory,\n  type ProviderDefinedToolFactoryWithOutputSchema,\n} from './provider-defined-tool-factory';\nexport * from './remove-undefined-entries';\nexport * from './resolve';\nexport * from './response-handler';\nexport {\n  asSchema,\n  jsonSchema,\n  type FlexibleSchema,\n  type InferSchema,\n  type Schema,\n} from './schema';\nexport * from './uint8-utils';\nexport * from './validate-types';\nexport * from './validator';\nexport * from './without-trailing-slash';\nexport { zodSchema } from './zod-schema';\n\n// folder re-exports\nexport * from './types';\n\n// external re-exports\nexport * from '@standard-schema/spec';\nexport {\n  EventSourceParserStream,\n  type EventSourceMessage,\n} from 'eventsource-parser/stream';\n"],"names":["resolve","APICallError","APICallError","mediaType","TypeValidationError","TypeValidationError","TypeValidationError","validator","TypeValidationError","InvalidArgumentError","InvalidArgumentError","APICallError","getOriginalFetch","APICallError","tool","APICallError","APICallError","ZodFirstPartyTypeKind","ZodFirstPartyTypeKind","ZodFirstPartyTypeKind","types","x","ZodFirstPartyTypeKind","jsonSchema","name","schema","_a","zodSchema","jsonSchema","EventSourceParserStream"],"mappings":"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","debugId":null}},
    {"offset": {"line": 2842, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/google-provider.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/google-generative-ai-embedding-model.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/google-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/google-generative-ai-embedding-options.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/google-generative-ai-language-model.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/convert-json-schema-to-openapi-schema.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/convert-to-google-generative-ai-messages.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/get-model-path.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/google-generative-ai-options.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/google-prepare-tools.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/map-google-generative-ai-finish-reason.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/tool/google-search.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/tool/url-context.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/tool/code-execution.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/google-tools.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/google/src/google-generative-ai-image-model.ts"],"sourcesContent":["import {\n  EmbeddingModelV2,\n  LanguageModelV2,\n  ProviderV2,\n  ImageModelV2,\n} from '@ai-sdk/provider';\nimport {\n  FetchFunction,\n  generateId,\n  loadApiKey,\n  withoutTrailingSlash,\n} from '@ai-sdk/provider-utils';\nimport { GoogleGenerativeAIEmbeddingModel } from './google-generative-ai-embedding-model';\nimport { GoogleGenerativeAIEmbeddingModelId } from './google-generative-ai-embedding-options';\nimport { GoogleGenerativeAILanguageModel } from './google-generative-ai-language-model';\nimport { GoogleGenerativeAIModelId } from './google-generative-ai-options';\nimport { googleTools } from './google-tools';\n\nimport {\n  GoogleGenerativeAIImageSettings,\n  GoogleGenerativeAIImageModelId,\n} from './google-generative-ai-image-settings';\nimport { GoogleGenerativeAIImageModel } from './google-generative-ai-image-model';\n\nexport interface GoogleGenerativeAIProvider extends ProviderV2 {\n  (modelId: GoogleGenerativeAIModelId): LanguageModelV2;\n\n  languageModel(modelId: GoogleGenerativeAIModelId): LanguageModelV2;\n\n  chat(modelId: GoogleGenerativeAIModelId): LanguageModelV2;\n\n  /**\nCreates a model for image generation.\n */\n  image(\n    modelId: GoogleGenerativeAIImageModelId,\n    settings?: GoogleGenerativeAIImageSettings,\n  ): ImageModelV2;\n\n  /**\n   * @deprecated Use `chat()` instead.\n   */\n  generativeAI(modelId: GoogleGenerativeAIModelId): LanguageModelV2;\n\n  /**\n@deprecated Use `textEmbedding()` instead.\n   */\n  embedding(\n    modelId: GoogleGenerativeAIEmbeddingModelId,\n  ): EmbeddingModelV2<string>;\n\n  textEmbedding(\n    modelId: GoogleGenerativeAIEmbeddingModelId,\n  ): EmbeddingModelV2<string>;\n\n  textEmbeddingModel(\n    modelId: GoogleGenerativeAIEmbeddingModelId,\n  ): EmbeddingModelV2<string>;\n\n  tools: typeof googleTools;\n}\n\nexport interface GoogleGenerativeAIProviderSettings {\n  /**\nUse a different URL prefix for API calls, e.g. to use proxy servers.\nThe default prefix is `https://generativelanguage.googleapis.com/v1beta`.\n   */\n  baseURL?: string;\n\n  /**\nAPI key that is being send using the `x-goog-api-key` header.\nIt defaults to the `GOOGLE_GENERATIVE_AI_API_KEY` environment variable.\n   */\n  apiKey?: string;\n\n  /**\nCustom headers to include in the requests.\n     */\n  headers?: Record<string, string | undefined>;\n\n  /**\nCustom fetch implementation. You can use it as a middleware to intercept requests,\nor to provide a custom fetch implementation for e.g. testing.\n    */\n  fetch?: FetchFunction;\n\n  /**\nOptional function to generate a unique ID for each request.\n     */\n  generateId?: () => string;\n}\n\n/**\nCreate a Google Generative AI provider instance.\n */\nexport function createGoogleGenerativeAI(\n  options: GoogleGenerativeAIProviderSettings = {},\n): GoogleGenerativeAIProvider {\n  const baseURL =\n    withoutTrailingSlash(options.baseURL) ??\n    'https://generativelanguage.googleapis.com/v1beta';\n\n  const getHeaders = () => ({\n    'x-goog-api-key': loadApiKey({\n      apiKey: options.apiKey,\n      environmentVariableName: 'GOOGLE_GENERATIVE_AI_API_KEY',\n      description: 'Google Generative AI',\n    }),\n    ...options.headers,\n  });\n\n  const createChatModel = (modelId: GoogleGenerativeAIModelId) =>\n    new GoogleGenerativeAILanguageModel(modelId, {\n      provider: 'google.generative-ai',\n      baseURL,\n      headers: getHeaders,\n      generateId: options.generateId ?? generateId,\n      supportedUrls: () => ({\n        '*': [\n          // Google Generative Language \"files\" endpoint\n          // e.g. https://generativelanguage.googleapis.com/v1beta/files/...\n          new RegExp(`^${baseURL}/files/.*$`),\n          // YouTube URLs (public or unlisted videos)\n          new RegExp(\n            `^https://(?:www\\\\.)?youtube\\\\.com/watch\\\\?v=[\\\\w-]+(?:&[\\\\w=&.-]*)?$`,\n          ),\n          new RegExp(`^https://youtu\\\\.be/[\\\\w-]+(?:\\\\?[\\\\w=&.-]*)?$`),\n        ],\n      }),\n      fetch: options.fetch,\n    });\n\n  const createEmbeddingModel = (modelId: GoogleGenerativeAIEmbeddingModelId) =>\n    new GoogleGenerativeAIEmbeddingModel(modelId, {\n      provider: 'google.generative-ai',\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n    });\n\n  const createImageModel = (\n    modelId: GoogleGenerativeAIImageModelId,\n    settings: GoogleGenerativeAIImageSettings = {},\n  ) =>\n    new GoogleGenerativeAIImageModel(modelId, settings, {\n      provider: 'google.generative-ai',\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n    });\n\n  const provider = function (modelId: GoogleGenerativeAIModelId) {\n    if (new.target) {\n      throw new Error(\n        'The Google Generative AI model function cannot be called with the new keyword.',\n      );\n    }\n\n    return createChatModel(modelId);\n  };\n\n  provider.languageModel = createChatModel;\n  provider.chat = createChatModel;\n  provider.generativeAI = createChatModel;\n  provider.embedding = createEmbeddingModel;\n  provider.textEmbedding = createEmbeddingModel;\n  provider.textEmbeddingModel = createEmbeddingModel;\n  provider.image = createImageModel;\n  provider.imageModel = createImageModel;\n  provider.tools = googleTools;\n  return provider as GoogleGenerativeAIProvider;\n}\n\n/**\nDefault Google Generative AI provider instance.\n */\nexport const google = createGoogleGenerativeAI();\n","import {\n  EmbeddingModelV2,\n  TooManyEmbeddingValuesForCallError,\n} from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createJsonResponseHandler,\n  FetchFunction,\n  parseProviderOptions,\n  postJsonToApi,\n  resolve,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { googleFailedResponseHandler } from './google-error';\nimport {\n  GoogleGenerativeAIEmbeddingModelId,\n  googleGenerativeAIEmbeddingProviderOptions,\n} from './google-generative-ai-embedding-options';\n\ntype GoogleGenerativeAIEmbeddingConfig = {\n  provider: string;\n  baseURL: string;\n  headers: () => Record<string, string | undefined>;\n  fetch?: FetchFunction;\n};\n\nexport class GoogleGenerativeAIEmbeddingModel\n  implements EmbeddingModelV2<string>\n{\n  readonly specificationVersion = 'v2';\n  readonly modelId: GoogleGenerativeAIEmbeddingModelId;\n  readonly maxEmbeddingsPerCall = 2048;\n  readonly supportsParallelCalls = true;\n\n  private readonly config: GoogleGenerativeAIEmbeddingConfig;\n\n  get provider(): string {\n    return this.config.provider;\n  }\n  constructor(\n    modelId: GoogleGenerativeAIEmbeddingModelId,\n    config: GoogleGenerativeAIEmbeddingConfig,\n  ) {\n    this.modelId = modelId;\n    this.config = config;\n  }\n\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions,\n  }: Parameters<EmbeddingModelV2<string>['doEmbed']>[0]): Promise<\n    Awaited<ReturnType<EmbeddingModelV2<string>['doEmbed']>>\n  > {\n    // Parse provider options\n    const googleOptions = await parseProviderOptions({\n      provider: 'google',\n      providerOptions,\n      schema: googleGenerativeAIEmbeddingProviderOptions,\n    });\n\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new TooManyEmbeddingValuesForCallError({\n        provider: this.provider,\n        modelId: this.modelId,\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        values,\n      });\n    }\n\n    const mergedHeaders = combineHeaders(\n      await resolve(this.config.headers),\n      headers,\n    );\n\n    // For single embeddings, use the single endpoint (ratelimits, etc.)\n    if (values.length === 1) {\n      const {\n        responseHeaders,\n        value: response,\n        rawValue,\n      } = await postJsonToApi({\n        url: `${this.config.baseURL}/models/${this.modelId}:embedContent`,\n        headers: mergedHeaders,\n        body: {\n          model: `models/${this.modelId}`,\n          content: {\n            parts: [{ text: values[0] }],\n          },\n          outputDimensionality: googleOptions?.outputDimensionality,\n          taskType: googleOptions?.taskType,\n        },\n        failedResponseHandler: googleFailedResponseHandler,\n        successfulResponseHandler: createJsonResponseHandler(\n          googleGenerativeAISingleEmbeddingResponseSchema,\n        ),\n        abortSignal,\n        fetch: this.config.fetch,\n      });\n\n      return {\n        embeddings: [response.embedding.values],\n        usage: undefined,\n        response: { headers: responseHeaders, body: rawValue },\n      };\n    }\n\n    const {\n      responseHeaders,\n      value: response,\n      rawValue,\n    } = await postJsonToApi({\n      url: `${this.config.baseURL}/models/${this.modelId}:batchEmbedContents`,\n      headers: mergedHeaders,\n      body: {\n        requests: values.map(value => ({\n          model: `models/${this.modelId}`,\n          content: { role: 'user', parts: [{ text: value }] },\n          outputDimensionality: googleOptions?.outputDimensionality,\n          taskType: googleOptions?.taskType,\n        })),\n      },\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        googleGenerativeAITextEmbeddingResponseSchema,\n      ),\n      abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    return {\n      embeddings: response.embeddings.map(item => item.values),\n      usage: undefined,\n      response: { headers: responseHeaders, body: rawValue },\n    };\n  }\n}\n\n// minimal version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst googleGenerativeAITextEmbeddingResponseSchema = z.object({\n  embeddings: z.array(z.object({ values: z.array(z.number()) })),\n});\n\n// Schema for single embedding response\nconst googleGenerativeAISingleEmbeddingResponseSchema = z.object({\n  embedding: z.object({ values: z.array(z.number()) }),\n});\n","import { createJsonErrorResponseHandler } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst googleErrorDataSchema = z.object({\n  error: z.object({\n    code: z.number().nullable(),\n    message: z.string(),\n    status: z.string(),\n  }),\n});\n\nexport type GoogleErrorData = z.infer<typeof googleErrorDataSchema>;\n\nexport const googleFailedResponseHandler = createJsonErrorResponseHandler({\n  errorSchema: googleErrorDataSchema,\n  errorToMessage: data => data.error.message,\n});\n","import { z } from 'zod/v4';\n\nexport type GoogleGenerativeAIEmbeddingModelId =\n  | 'gemini-embedding-001'\n  | 'text-embedding-004'\n  | (string & {});\n\nexport const googleGenerativeAIEmbeddingProviderOptions = z.object({\n  /**\n   * Optional. Optional reduced dimension for the output embedding.\n   * If set, excessive values in the output embedding are truncated from the end.\n   */\n  outputDimensionality: z.number().optional(),\n\n  /**\n   * Optional. Specifies the task type for generating embeddings.\n   * Supported task types:\n   * - SEMANTIC_SIMILARITY: Optimized for text similarity.\n   * - CLASSIFICATION: Optimized for text classification.\n   * - CLUSTERING: Optimized for clustering texts based on similarity.\n   * - RETRIEVAL_DOCUMENT: Optimized for document retrieval.\n   * - RETRIEVAL_QUERY: Optimized for query-based retrieval.\n   * - QUESTION_ANSWERING: Optimized for answering questions.\n   * - FACT_VERIFICATION: Optimized for verifying factual information.\n   * - CODE_RETRIEVAL_QUERY: Optimized for retrieving code blocks based on natural language queries.\n   */\n  taskType: z\n    .enum([\n      'SEMANTIC_SIMILARITY',\n      'CLASSIFICATION',\n      'CLUSTERING',\n      'RETRIEVAL_DOCUMENT',\n      'RETRIEVAL_QUERY',\n      'QUESTION_ANSWERING',\n      'FACT_VERIFICATION',\n      'CODE_RETRIEVAL_QUERY',\n    ])\n    .optional(),\n});\n\nexport type GoogleGenerativeAIEmbeddingProviderOptions = z.infer<\n  typeof googleGenerativeAIEmbeddingProviderOptions\n>;\n","import {\n  LanguageModelV2,\n  LanguageModelV2CallWarning,\n  LanguageModelV2Content,\n  LanguageModelV2FinishReason,\n  LanguageModelV2Source,\n  LanguageModelV2StreamPart,\n  LanguageModelV2Usage,\n  SharedV2ProviderMetadata,\n} from '@ai-sdk/provider';\nimport {\n  FetchFunction,\n  ParseResult,\n  Resolvable,\n  combineHeaders,\n  createEventSourceResponseHandler,\n  createJsonResponseHandler,\n  generateId,\n  parseProviderOptions,\n  postJsonToApi,\n  resolve,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { convertJSONSchemaToOpenAPISchema } from './convert-json-schema-to-openapi-schema';\nimport { convertToGoogleGenerativeAIMessages } from './convert-to-google-generative-ai-messages';\nimport { getModelPath } from './get-model-path';\nimport { googleFailedResponseHandler } from './google-error';\nimport { GoogleGenerativeAIContentPart } from './google-generative-ai-prompt';\nimport {\n  GoogleGenerativeAIModelId,\n  googleGenerativeAIProviderOptions,\n} from './google-generative-ai-options';\nimport { prepareTools } from './google-prepare-tools';\nimport { mapGoogleGenerativeAIFinishReason } from './map-google-generative-ai-finish-reason';\nimport {\n  groundingChunkSchema,\n  groundingMetadataSchema,\n} from './tool/google-search';\nimport { urlContextMetadataSchema } from './tool/url-context';\n\ntype GoogleGenerativeAIConfig = {\n  provider: string;\n  baseURL: string;\n  headers: Resolvable<Record<string, string | undefined>>;\n  fetch?: FetchFunction;\n  generateId: () => string;\n\n  /**\n   * The supported URLs for the model.\n   */\n  supportedUrls?: () => LanguageModelV2['supportedUrls'];\n};\n\nexport class GoogleGenerativeAILanguageModel implements LanguageModelV2 {\n  readonly specificationVersion = 'v2';\n\n  readonly modelId: GoogleGenerativeAIModelId;\n\n  private readonly config: GoogleGenerativeAIConfig;\n  private readonly generateId: () => string;\n\n  constructor(\n    modelId: GoogleGenerativeAIModelId,\n    config: GoogleGenerativeAIConfig,\n  ) {\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = config.generateId ?? generateId;\n  }\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  get supportedUrls() {\n    return this.config.supportedUrls?.() ?? {};\n  }\n\n  private async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions,\n  }: Parameters<LanguageModelV2['doGenerate']>[0]) {\n    const warnings: LanguageModelV2CallWarning[] = [];\n\n    const googleOptions = await parseProviderOptions({\n      provider: 'google',\n      providerOptions,\n      schema: googleGenerativeAIProviderOptions,\n    });\n\n    // Add warning if includeThoughts is used with a non-Vertex Google provider\n    if (\n      googleOptions?.thinkingConfig?.includeThoughts === true &&\n      !this.config.provider.startsWith('google.vertex.')\n    ) {\n      warnings.push({\n        type: 'other',\n        message:\n          \"The 'includeThoughts' option is only supported with the Google Vertex provider \" +\n          'and might not be supported or could behave unexpectedly with the current Google provider ' +\n          `(${this.config.provider}).`,\n      });\n    }\n\n    const isGemmaModel = this.modelId.toLowerCase().startsWith('gemma-');\n\n    const { contents, systemInstruction } = convertToGoogleGenerativeAIMessages(\n      prompt,\n      { isGemmaModel },\n    );\n\n    const {\n      tools: googleTools,\n      toolConfig: googleToolConfig,\n      toolWarnings,\n    } = prepareTools({\n      tools,\n      toolChoice,\n      modelId: this.modelId,\n    });\n\n    return {\n      args: {\n        generationConfig: {\n          // standardized settings:\n          maxOutputTokens,\n          temperature,\n          topK,\n          topP,\n          frequencyPenalty,\n          presencePenalty,\n          stopSequences,\n          seed,\n\n          // response format:\n          responseMimeType:\n            responseFormat?.type === 'json' ? 'application/json' : undefined,\n          responseSchema:\n            responseFormat?.type === 'json' &&\n            responseFormat.schema != null &&\n            // Google GenAI does not support all OpenAPI Schema features,\n            // so this is needed as an escape hatch:\n            // TODO convert into provider option\n            (googleOptions?.structuredOutputs ?? true)\n              ? convertJSONSchemaToOpenAPISchema(responseFormat.schema)\n              : undefined,\n          ...(googleOptions?.audioTimestamp && {\n            audioTimestamp: googleOptions.audioTimestamp,\n          }),\n\n          // provider options:\n          responseModalities: googleOptions?.responseModalities,\n          thinkingConfig: googleOptions?.thinkingConfig,\n        },\n        contents,\n        systemInstruction: isGemmaModel ? undefined : systemInstruction,\n        safetySettings: googleOptions?.safetySettings,\n        tools: googleTools,\n        toolConfig: googleToolConfig,\n        cachedContent: googleOptions?.cachedContent,\n        labels: googleOptions?.labels,\n      },\n      warnings: [...warnings, ...toolWarnings],\n    };\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doGenerate']>>> {\n    const { args, warnings } = await this.getArgs(options);\n    const body = JSON.stringify(args);\n\n    const mergedHeaders = combineHeaders(\n      await resolve(this.config.headers),\n      options.headers,\n    );\n\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse,\n    } = await postJsonToApi({\n      url: `${this.config.baseURL}/${getModelPath(\n        this.modelId,\n      )}:generateContent`,\n      headers: mergedHeaders,\n      body: args,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(responseSchema),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    const candidate = response.candidates[0];\n    const content: Array<LanguageModelV2Content> = [];\n\n    // map ordered parts to content:\n    const parts = candidate.content?.parts ?? [];\n\n    const usageMetadata = response.usageMetadata;\n\n    // Associates a code execution result with its preceding call.\n    let lastCodeExecutionToolCallId: string | undefined;\n\n    // Build content array from all parts\n    for (const part of parts) {\n      if ('executableCode' in part && part.executableCode?.code) {\n        const toolCallId = this.config.generateId();\n        lastCodeExecutionToolCallId = toolCallId;\n\n        content.push({\n          type: 'tool-call',\n          toolCallId,\n          toolName: 'code_execution',\n          input: JSON.stringify(part.executableCode),\n          providerExecuted: true,\n        });\n      } else if ('codeExecutionResult' in part && part.codeExecutionResult) {\n        content.push({\n          type: 'tool-result',\n          // Assumes a result directly follows its corresponding call part.\n          toolCallId: lastCodeExecutionToolCallId!,\n          toolName: 'code_execution',\n          result: {\n            outcome: part.codeExecutionResult.outcome,\n            output: part.codeExecutionResult.output,\n          },\n          providerExecuted: true,\n        });\n        // Clear the ID after use to avoid accidental reuse.\n        lastCodeExecutionToolCallId = undefined;\n      } else if ('text' in part && part.text != null && part.text.length > 0) {\n        content.push({\n          type: part.thought === true ? 'reasoning' : 'text',\n          text: part.text,\n          providerMetadata: part.thoughtSignature\n            ? { google: { thoughtSignature: part.thoughtSignature } }\n            : undefined,\n        });\n      } else if ('functionCall' in part) {\n        content.push({\n          type: 'tool-call' as const,\n          toolCallId: this.config.generateId(),\n          toolName: part.functionCall.name,\n          input: JSON.stringify(part.functionCall.args),\n          providerMetadata: part.thoughtSignature\n            ? { google: { thoughtSignature: part.thoughtSignature } }\n            : undefined,\n        });\n      } else if ('inlineData' in part) {\n        content.push({\n          type: 'file' as const,\n          data: part.inlineData.data,\n          mediaType: part.inlineData.mimeType,\n        });\n      }\n    }\n\n    const sources =\n      extractSources({\n        groundingMetadata: candidate.groundingMetadata,\n        generateId: this.config.generateId,\n      }) ?? [];\n    for (const source of sources) {\n      content.push(source);\n    }\n\n    return {\n      content,\n      finishReason: mapGoogleGenerativeAIFinishReason({\n        finishReason: candidate.finishReason,\n        hasToolCalls: content.some(part => part.type === 'tool-call'),\n      }),\n      usage: {\n        inputTokens: usageMetadata?.promptTokenCount ?? undefined,\n        outputTokens: usageMetadata?.candidatesTokenCount ?? undefined,\n        totalTokens: usageMetadata?.totalTokenCount ?? undefined,\n        reasoningTokens: usageMetadata?.thoughtsTokenCount ?? undefined,\n        cachedInputTokens: usageMetadata?.cachedContentTokenCount ?? undefined,\n      },\n      warnings,\n      providerMetadata: {\n        google: {\n          groundingMetadata: candidate.groundingMetadata ?? null,\n          urlContextMetadata: candidate.urlContextMetadata ?? null,\n          safetyRatings: candidate.safetyRatings ?? null,\n          usageMetadata: usageMetadata ?? null,\n        },\n      },\n      request: { body },\n      response: {\n        // TODO timestamp, model id, id\n        headers: responseHeaders,\n        body: rawResponse,\n      },\n    };\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV2['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doStream']>>> {\n    const { args, warnings } = await this.getArgs(options);\n\n    const body = JSON.stringify(args);\n    const headers = combineHeaders(\n      await resolve(this.config.headers),\n      options.headers,\n    );\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      url: `${this.config.baseURL}/${getModelPath(\n        this.modelId,\n      )}:streamGenerateContent?alt=sse`,\n      headers,\n      body: args,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: createEventSourceResponseHandler(chunkSchema),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    let finishReason: LanguageModelV2FinishReason = 'unknown';\n    const usage: LanguageModelV2Usage = {\n      inputTokens: undefined,\n      outputTokens: undefined,\n      totalTokens: undefined,\n    };\n    let providerMetadata: SharedV2ProviderMetadata | undefined = undefined;\n\n    const generateId = this.config.generateId;\n    let hasToolCalls = false;\n\n    // Track active blocks to group consecutive parts of same type\n    let currentTextBlockId: string | null = null;\n    let currentReasoningBlockId: string | null = null;\n    let blockCounter = 0;\n\n    // Track emitted sources to prevent duplicates\n    const emittedSourceUrls = new Set<string>();\n    // Associates a code execution result with its preceding call.\n    let lastCodeExecutionToolCallId: string | undefined;\n\n    return {\n      stream: response.pipeThrough(\n        new TransformStream<\n          ParseResult<z.infer<typeof chunkSchema>>,\n          LanguageModelV2StreamPart\n        >({\n          start(controller) {\n            controller.enqueue({ type: 'stream-start', warnings });\n          },\n\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: 'raw', rawValue: chunk.rawValue });\n            }\n\n            if (!chunk.success) {\n              controller.enqueue({ type: 'error', error: chunk.error });\n              return;\n            }\n\n            const value = chunk.value;\n\n            const usageMetadata = value.usageMetadata;\n\n            if (usageMetadata != null) {\n              usage.inputTokens = usageMetadata.promptTokenCount ?? undefined;\n              usage.outputTokens =\n                usageMetadata.candidatesTokenCount ?? undefined;\n              usage.totalTokens = usageMetadata.totalTokenCount ?? undefined;\n              usage.reasoningTokens =\n                usageMetadata.thoughtsTokenCount ?? undefined;\n              usage.cachedInputTokens =\n                usageMetadata.cachedContentTokenCount ?? undefined;\n            }\n\n            const candidate = value.candidates?.[0];\n\n            // sometimes the API returns an empty candidates array\n            if (candidate == null) {\n              return;\n            }\n\n            const content = candidate.content;\n\n            const sources = extractSources({\n              groundingMetadata: candidate.groundingMetadata,\n              generateId,\n            });\n            if (sources != null) {\n              for (const source of sources) {\n                if (\n                  source.sourceType === 'url' &&\n                  !emittedSourceUrls.has(source.url)\n                ) {\n                  emittedSourceUrls.add(source.url);\n                  controller.enqueue(source);\n                }\n              }\n            }\n\n            // Process tool call's parts before determining finishReason to ensure hasToolCalls is properly set\n            if (content != null) {\n              // Process text parts individually to handle reasoning parts\n              const parts = content.parts ?? [];\n              for (const part of parts) {\n                if ('executableCode' in part && part.executableCode?.code) {\n                  const toolCallId = generateId();\n                  lastCodeExecutionToolCallId = toolCallId;\n\n                  controller.enqueue({\n                    type: 'tool-call',\n                    toolCallId,\n                    toolName: 'code_execution',\n                    input: JSON.stringify(part.executableCode),\n                    providerExecuted: true,\n                  });\n\n                  hasToolCalls = true;\n                } else if (\n                  'codeExecutionResult' in part &&\n                  part.codeExecutionResult\n                ) {\n                  // Assumes a result directly follows its corresponding call part.\n                  const toolCallId = lastCodeExecutionToolCallId;\n\n                  if (toolCallId) {\n                    controller.enqueue({\n                      type: 'tool-result',\n                      toolCallId,\n                      toolName: 'code_execution',\n                      result: {\n                        outcome: part.codeExecutionResult.outcome,\n                        output: part.codeExecutionResult.output,\n                      },\n                      providerExecuted: true,\n                    });\n                    // Clear the ID after use.\n                    lastCodeExecutionToolCallId = undefined;\n                  }\n                } else if (\n                  'text' in part &&\n                  part.text != null &&\n                  part.text.length > 0\n                ) {\n                  if (part.thought === true) {\n                    // End any active text block before starting reasoning\n                    if (currentTextBlockId !== null) {\n                      controller.enqueue({\n                        type: 'text-end',\n                        id: currentTextBlockId,\n                      });\n                      currentTextBlockId = null;\n                    }\n\n                    // Start new reasoning block if not already active\n                    if (currentReasoningBlockId === null) {\n                      currentReasoningBlockId = String(blockCounter++);\n                      controller.enqueue({\n                        type: 'reasoning-start',\n                        id: currentReasoningBlockId,\n                        providerMetadata: part.thoughtSignature\n                          ? {\n                              google: {\n                                thoughtSignature: part.thoughtSignature,\n                              },\n                            }\n                          : undefined,\n                      });\n                    }\n\n                    controller.enqueue({\n                      type: 'reasoning-delta',\n                      id: currentReasoningBlockId,\n                      delta: part.text,\n                      providerMetadata: part.thoughtSignature\n                        ? {\n                            google: { thoughtSignature: part.thoughtSignature },\n                          }\n                        : undefined,\n                    });\n                  } else {\n                    // End any active reasoning block before starting text\n                    if (currentReasoningBlockId !== null) {\n                      controller.enqueue({\n                        type: 'reasoning-end',\n                        id: currentReasoningBlockId,\n                      });\n                      currentReasoningBlockId = null;\n                    }\n\n                    // Start new text block if not already active\n                    if (currentTextBlockId === null) {\n                      currentTextBlockId = String(blockCounter++);\n                      controller.enqueue({\n                        type: 'text-start',\n                        id: currentTextBlockId,\n                        providerMetadata: part.thoughtSignature\n                          ? {\n                              google: {\n                                thoughtSignature: part.thoughtSignature,\n                              },\n                            }\n                          : undefined,\n                      });\n                    }\n\n                    controller.enqueue({\n                      type: 'text-delta',\n                      id: currentTextBlockId,\n                      delta: part.text,\n                      providerMetadata: part.thoughtSignature\n                        ? {\n                            google: { thoughtSignature: part.thoughtSignature },\n                          }\n                        : undefined,\n                    });\n                  }\n                }\n              }\n\n              const inlineDataParts = getInlineDataParts(content.parts);\n              if (inlineDataParts != null) {\n                for (const part of inlineDataParts) {\n                  controller.enqueue({\n                    type: 'file',\n                    mediaType: part.inlineData.mimeType,\n                    data: part.inlineData.data,\n                  });\n                }\n              }\n\n              const toolCallDeltas = getToolCallsFromParts({\n                parts: content.parts,\n                generateId,\n              });\n\n              if (toolCallDeltas != null) {\n                for (const toolCall of toolCallDeltas) {\n                  controller.enqueue({\n                    type: 'tool-input-start',\n                    id: toolCall.toolCallId,\n                    toolName: toolCall.toolName,\n                    providerMetadata: toolCall.providerMetadata,\n                  });\n\n                  controller.enqueue({\n                    type: 'tool-input-delta',\n                    id: toolCall.toolCallId,\n                    delta: toolCall.args,\n                    providerMetadata: toolCall.providerMetadata,\n                  });\n\n                  controller.enqueue({\n                    type: 'tool-input-end',\n                    id: toolCall.toolCallId,\n                    providerMetadata: toolCall.providerMetadata,\n                  });\n\n                  controller.enqueue({\n                    type: 'tool-call',\n                    toolCallId: toolCall.toolCallId,\n                    toolName: toolCall.toolName,\n                    input: toolCall.args,\n                    providerMetadata: toolCall.providerMetadata,\n                  });\n\n                  hasToolCalls = true;\n                }\n              }\n            }\n\n            if (candidate.finishReason != null) {\n              finishReason = mapGoogleGenerativeAIFinishReason({\n                finishReason: candidate.finishReason,\n                hasToolCalls,\n              });\n\n              providerMetadata = {\n                google: {\n                  groundingMetadata: candidate.groundingMetadata ?? null,\n                  urlContextMetadata: candidate.urlContextMetadata ?? null,\n                  safetyRatings: candidate.safetyRatings ?? null,\n                },\n              };\n              if (usageMetadata != null) {\n                providerMetadata.google.usageMetadata = usageMetadata;\n              }\n            }\n          },\n\n          flush(controller) {\n            // Close any open blocks before finishing\n            if (currentTextBlockId !== null) {\n              controller.enqueue({\n                type: 'text-end',\n                id: currentTextBlockId,\n              });\n            }\n            if (currentReasoningBlockId !== null) {\n              controller.enqueue({\n                type: 'reasoning-end',\n                id: currentReasoningBlockId,\n              });\n            }\n\n            controller.enqueue({\n              type: 'finish',\n              finishReason,\n              usage,\n              providerMetadata,\n            });\n          },\n        }),\n      ),\n      response: { headers: responseHeaders },\n      request: { body },\n    };\n  }\n}\n\nfunction getToolCallsFromParts({\n  parts,\n  generateId,\n}: {\n  parts: z.infer<typeof contentSchema>['parts'];\n  generateId: () => string;\n}) {\n  const functionCallParts = parts?.filter(\n    part => 'functionCall' in part,\n  ) as Array<\n    GoogleGenerativeAIContentPart & {\n      functionCall: { name: string; args: unknown };\n      thoughtSignature?: string | null;\n    }\n  >;\n\n  return functionCallParts == null || functionCallParts.length === 0\n    ? undefined\n    : functionCallParts.map(part => ({\n        type: 'tool-call' as const,\n        toolCallId: generateId(),\n        toolName: part.functionCall.name,\n        args: JSON.stringify(part.functionCall.args),\n        providerMetadata: part.thoughtSignature\n          ? { google: { thoughtSignature: part.thoughtSignature } }\n          : undefined,\n      }));\n}\n\nfunction getInlineDataParts(parts: z.infer<typeof contentSchema>['parts']) {\n  return parts?.filter(\n    (\n      part,\n    ): part is {\n      inlineData: { mimeType: string; data: string };\n    } => 'inlineData' in part,\n  );\n}\n\nfunction extractSources({\n  groundingMetadata,\n  generateId,\n}: {\n  groundingMetadata: z.infer<typeof groundingMetadataSchema> | undefined | null;\n  generateId: () => string;\n}): undefined | LanguageModelV2Source[] {\n  return groundingMetadata?.groundingChunks\n    ?.filter(\n      (\n        chunk,\n      ): chunk is z.infer<typeof groundingChunkSchema> & {\n        web: { uri: string; title?: string };\n      } => chunk.web != null,\n    )\n    .map(chunk => ({\n      type: 'source',\n      sourceType: 'url',\n      id: generateId(),\n      url: chunk.web.uri,\n      title: chunk.web.title,\n    }));\n}\n\nconst contentSchema = z.object({\n  parts: z\n    .array(\n      z.union([\n        // note: order matters since text can be fully empty\n        z.object({\n          functionCall: z.object({\n            name: z.string(),\n            args: z.unknown(),\n          }),\n          thoughtSignature: z.string().nullish(),\n        }),\n        z.object({\n          inlineData: z.object({\n            mimeType: z.string(),\n            data: z.string(),\n          }),\n        }),\n        z.object({\n          executableCode: z\n            .object({\n              language: z.string(),\n              code: z.string(),\n            })\n            .nullish(),\n          codeExecutionResult: z\n            .object({\n              outcome: z.string(),\n              output: z.string(),\n            })\n            .nullish(),\n          text: z.string().nullish(),\n          thought: z.boolean().nullish(),\n          thoughtSignature: z.string().nullish(),\n        }),\n      ]),\n    )\n    .nullish(),\n});\n\n// https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/configure-safety-filters\nexport const safetyRatingSchema = z.object({\n  category: z.string().nullish(),\n  probability: z.string().nullish(),\n  probabilityScore: z.number().nullish(),\n  severity: z.string().nullish(),\n  severityScore: z.number().nullish(),\n  blocked: z.boolean().nullish(),\n});\n\nconst usageSchema = z.object({\n  cachedContentTokenCount: z.number().nullish(),\n  thoughtsTokenCount: z.number().nullish(),\n  promptTokenCount: z.number().nullish(),\n  candidatesTokenCount: z.number().nullish(),\n  totalTokenCount: z.number().nullish(),\n});\n\nconst responseSchema = z.object({\n  candidates: z.array(\n    z.object({\n      content: contentSchema.nullish().or(z.object({}).strict()),\n      finishReason: z.string().nullish(),\n      safetyRatings: z.array(safetyRatingSchema).nullish(),\n      groundingMetadata: groundingMetadataSchema.nullish(),\n      urlContextMetadata: urlContextMetadataSchema.nullish(),\n    }),\n  ),\n  usageMetadata: usageSchema.nullish(),\n});\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst chunkSchema = z.object({\n  candidates: z\n    .array(\n      z.object({\n        content: contentSchema.nullish(),\n        finishReason: z.string().nullish(),\n        safetyRatings: z.array(safetyRatingSchema).nullish(),\n        groundingMetadata: groundingMetadataSchema.nullish(),\n        urlContextMetadata: urlContextMetadataSchema.nullish(),\n      }),\n    )\n    .nullish(),\n  usageMetadata: usageSchema.nullish(),\n});\n","import { JSONSchema7Definition } from '@ai-sdk/provider';\n\n/**\n * Converts JSON Schema 7 to OpenAPI Schema 3.0\n */\nexport function convertJSONSchemaToOpenAPISchema(\n  jsonSchema: JSONSchema7Definition | undefined,\n): unknown {\n  // parameters need to be undefined if they are empty objects:\n  if (jsonSchema == null || isEmptyObjectSchema(jsonSchema)) {\n    return undefined;\n  }\n\n  if (typeof jsonSchema === 'boolean') {\n    return { type: 'boolean', properties: {} };\n  }\n\n  const {\n    type,\n    description,\n    required,\n    properties,\n    items,\n    allOf,\n    anyOf,\n    oneOf,\n    format,\n    const: constValue,\n    minLength,\n    enum: enumValues,\n  } = jsonSchema;\n\n  const result: Record<string, unknown> = {};\n\n  if (description) result.description = description;\n  if (required) result.required = required;\n  if (format) result.format = format;\n\n  if (constValue !== undefined) {\n    result.enum = [constValue];\n  }\n\n  // Handle type\n  if (type) {\n    if (Array.isArray(type)) {\n      if (type.includes('null')) {\n        result.type = type.filter(t => t !== 'null')[0];\n        result.nullable = true;\n      } else {\n        result.type = type;\n      }\n    } else if (type === 'null') {\n      result.type = 'null';\n    } else {\n      result.type = type;\n    }\n  }\n\n  // Handle enum\n  if (enumValues !== undefined) {\n    result.enum = enumValues;\n  }\n\n  if (properties != null) {\n    result.properties = Object.entries(properties).reduce(\n      (acc, [key, value]) => {\n        acc[key] = convertJSONSchemaToOpenAPISchema(value);\n        return acc;\n      },\n      {} as Record<string, unknown>,\n    );\n  }\n\n  if (items) {\n    result.items = Array.isArray(items)\n      ? items.map(convertJSONSchemaToOpenAPISchema)\n      : convertJSONSchemaToOpenAPISchema(items);\n  }\n\n  if (allOf) {\n    result.allOf = allOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n  if (anyOf) {\n    // Handle cases where anyOf includes a null type\n    if (\n      anyOf.some(\n        schema => typeof schema === 'object' && schema?.type === 'null',\n      )\n    ) {\n      const nonNullSchemas = anyOf.filter(\n        schema => !(typeof schema === 'object' && schema?.type === 'null'),\n      );\n\n      if (nonNullSchemas.length === 1) {\n        // If there's only one non-null schema, convert it and make it nullable\n        const converted = convertJSONSchemaToOpenAPISchema(nonNullSchemas[0]);\n        if (typeof converted === 'object') {\n          result.nullable = true;\n          Object.assign(result, converted);\n        }\n      } else {\n        // If there are multiple non-null schemas, keep them in anyOf\n        result.anyOf = nonNullSchemas.map(convertJSONSchemaToOpenAPISchema);\n        result.nullable = true;\n      }\n    } else {\n      result.anyOf = anyOf.map(convertJSONSchemaToOpenAPISchema);\n    }\n  }\n  if (oneOf) {\n    result.oneOf = oneOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n\n  if (minLength !== undefined) {\n    result.minLength = minLength;\n  }\n\n  return result;\n}\n\nfunction isEmptyObjectSchema(jsonSchema: JSONSchema7Definition): boolean {\n  return (\n    jsonSchema != null &&\n    typeof jsonSchema === 'object' &&\n    jsonSchema.type === 'object' &&\n    (jsonSchema.properties == null ||\n      Object.keys(jsonSchema.properties).length === 0) &&\n    !jsonSchema.additionalProperties\n  );\n}\n","import {\n  LanguageModelV2Prompt,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport {\n  GoogleGenerativeAIContent,\n  GoogleGenerativeAIContentPart,\n  GoogleGenerativeAIPrompt,\n} from './google-generative-ai-prompt';\nimport { convertToBase64 } from '@ai-sdk/provider-utils';\n\nexport function convertToGoogleGenerativeAIMessages(\n  prompt: LanguageModelV2Prompt,\n  options?: { isGemmaModel?: boolean },\n): GoogleGenerativeAIPrompt {\n  const systemInstructionParts: Array<{ text: string }> = [];\n  const contents: Array<GoogleGenerativeAIContent> = [];\n  let systemMessagesAllowed = true;\n  const isGemmaModel = options?.isGemmaModel ?? false;\n\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case 'system': {\n        if (!systemMessagesAllowed) {\n          throw new UnsupportedFunctionalityError({\n            functionality:\n              'system messages are only supported at the beginning of the conversation',\n          });\n        }\n\n        systemInstructionParts.push({ text: content });\n        break;\n      }\n\n      case 'user': {\n        systemMessagesAllowed = false;\n\n        const parts: GoogleGenerativeAIContentPart[] = [];\n\n        for (const part of content) {\n          switch (part.type) {\n            case 'text': {\n              parts.push({ text: part.text });\n              break;\n            }\n\n            case 'file': {\n              // default to image/jpeg for unknown image/* types\n              const mediaType =\n                part.mediaType === 'image/*' ? 'image/jpeg' : part.mediaType;\n\n              parts.push(\n                part.data instanceof URL\n                  ? {\n                      fileData: {\n                        mimeType: mediaType,\n                        fileUri: part.data.toString(),\n                      },\n                    }\n                  : {\n                      inlineData: {\n                        mimeType: mediaType,\n                        data: convertToBase64(part.data),\n                      },\n                    },\n              );\n\n              break;\n            }\n          }\n        }\n\n        contents.push({ role: 'user', parts });\n        break;\n      }\n\n      case 'assistant': {\n        systemMessagesAllowed = false;\n\n        contents.push({\n          role: 'model',\n          parts: content\n            .map(part => {\n              switch (part.type) {\n                case 'text': {\n                  return part.text.length === 0\n                    ? undefined\n                    : {\n                        text: part.text,\n                        thoughtSignature:\n                          part.providerOptions?.google?.thoughtSignature,\n                      };\n                }\n\n                case 'reasoning': {\n                  return part.text.length === 0\n                    ? undefined\n                    : {\n                        text: part.text,\n                        thought: true,\n                        thoughtSignature:\n                          part.providerOptions?.google?.thoughtSignature,\n                      };\n                }\n\n                case 'file': {\n                  if (part.mediaType !== 'image/png') {\n                    throw new UnsupportedFunctionalityError({\n                      functionality:\n                        'Only PNG images are supported in assistant messages',\n                    });\n                  }\n\n                  if (part.data instanceof URL) {\n                    throw new UnsupportedFunctionalityError({\n                      functionality:\n                        'File data URLs in assistant messages are not supported',\n                    });\n                  }\n\n                  return {\n                    inlineData: {\n                      mimeType: part.mediaType,\n                      data: convertToBase64(part.data),\n                    },\n                  };\n                }\n\n                case 'tool-call': {\n                  return {\n                    functionCall: {\n                      name: part.toolName,\n                      args: part.input,\n                    },\n                    thoughtSignature:\n                      part.providerOptions?.google?.thoughtSignature,\n                  };\n                }\n              }\n            })\n            .filter(part => part !== undefined),\n        });\n        break;\n      }\n\n      case 'tool': {\n        systemMessagesAllowed = false;\n\n        contents.push({\n          role: 'user',\n          parts: content.map(part => ({\n            functionResponse: {\n              name: part.toolName,\n              response: {\n                name: part.toolName,\n                content: part.output.value,\n              },\n            },\n          })),\n        });\n        break;\n      }\n    }\n  }\n\n  if (\n    isGemmaModel &&\n    systemInstructionParts.length > 0 &&\n    contents.length > 0 &&\n    contents[0].role === 'user'\n  ) {\n    const systemText = systemInstructionParts\n      .map(part => part.text)\n      .join('\\n\\n');\n\n    contents[0].parts.unshift({ text: systemText + '\\n\\n' });\n  }\n\n  return {\n    systemInstruction:\n      systemInstructionParts.length > 0 && !isGemmaModel\n        ? { parts: systemInstructionParts }\n        : undefined,\n    contents,\n  };\n}\n","export function getModelPath(modelId: string): string {\n  return modelId.includes('/') ? modelId : `models/${modelId}`;\n}\n","import { z } from 'zod/v4';\n\nexport type GoogleGenerativeAIModelId =\n  // Stable models\n  // https://ai.google.dev/gemini-api/docs/models/gemini\n  | 'gemini-1.5-flash'\n  | 'gemini-1.5-flash-latest'\n  | 'gemini-1.5-flash-001'\n  | 'gemini-1.5-flash-002'\n  | 'gemini-1.5-flash-8b'\n  | 'gemini-1.5-flash-8b-latest'\n  | 'gemini-1.5-flash-8b-001'\n  | 'gemini-1.5-pro'\n  | 'gemini-1.5-pro-latest'\n  | 'gemini-1.5-pro-001'\n  | 'gemini-1.5-pro-002'\n  | 'gemini-2.0-flash'\n  | 'gemini-2.0-flash-001'\n  | 'gemini-2.0-flash-live-001'\n  | 'gemini-2.0-flash-lite'\n  | 'gemini-2.0-pro-exp-02-05'\n  | 'gemini-2.0-flash-thinking-exp-01-21'\n  | 'gemini-2.0-flash-exp'\n  | 'gemini-2.5-pro'\n  | 'gemini-2.5-flash'\n  | 'gemini-2.5-flash-lite'\n  | 'gemini-2.5-flash-image-preview'\n  // Experimental models\n  // https://ai.google.dev/gemini-api/docs/models/experimental-models\n  | 'gemini-2.5-pro-exp-03-25'\n  | 'gemini-2.5-flash-preview-04-17'\n  | 'gemini-exp-1206'\n  | 'gemma-3-12b-it'\n  | 'gemma-3-27b-it'\n  | (string & {});\n\nexport const googleGenerativeAIProviderOptions = z.object({\n  responseModalities: z.array(z.enum(['TEXT', 'IMAGE'])).optional(),\n\n  thinkingConfig: z\n    .object({\n      thinkingBudget: z.number().optional(),\n      includeThoughts: z.boolean().optional(),\n    })\n    .optional(),\n\n  /**\nOptional.\nThe name of the cached content used as context to serve the prediction.\nFormat: cachedContents/{cachedContent}\n   */\n  cachedContent: z.string().optional(),\n\n  /**\n   * Optional. Enable structured output. Default is true.\n   *\n   * This is useful when the JSON Schema contains elements that are\n   * not supported by the OpenAPI schema version that\n   * Google Generative AI uses. You can use this to disable\n   * structured outputs if you need to.\n   */\n  structuredOutputs: z.boolean().optional(),\n\n  /**\nOptional. A list of unique safety settings for blocking unsafe content.\n */\n  safetySettings: z\n    .array(\n      z.object({\n        category: z.enum([\n          'HARM_CATEGORY_UNSPECIFIED',\n          'HARM_CATEGORY_HATE_SPEECH',\n          'HARM_CATEGORY_DANGEROUS_CONTENT',\n          'HARM_CATEGORY_HARASSMENT',\n          'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n          'HARM_CATEGORY_CIVIC_INTEGRITY',\n        ]),\n        threshold: z.enum([\n          'HARM_BLOCK_THRESHOLD_UNSPECIFIED',\n          'BLOCK_LOW_AND_ABOVE',\n          'BLOCK_MEDIUM_AND_ABOVE',\n          'BLOCK_ONLY_HIGH',\n          'BLOCK_NONE',\n          'OFF',\n        ]),\n      }),\n    )\n    .optional(),\n\n  threshold: z\n    .enum([\n      'HARM_BLOCK_THRESHOLD_UNSPECIFIED',\n      'BLOCK_LOW_AND_ABOVE',\n      'BLOCK_MEDIUM_AND_ABOVE',\n      'BLOCK_ONLY_HIGH',\n      'BLOCK_NONE',\n      'OFF',\n    ])\n    .optional(),\n\n  /**\n   * Optional. Enables timestamp understanding for audio-only files.\n   *\n   * https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/audio-understanding\n   */\n  audioTimestamp: z.boolean().optional(),\n\n  /**\n   * Optional. Defines labels used in billing reports. Available on Vertex AI only.\n   *\n   * https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/add-labels-to-api-calls\n   */\n  labels: z.record(z.string(), z.string()).optional(),\n});\n\nexport type GoogleGenerativeAIProviderOptions = z.infer<\n  typeof googleGenerativeAIProviderOptions\n>;\n","import {\n  LanguageModelV2CallOptions,\n  LanguageModelV2CallWarning,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { convertJSONSchemaToOpenAPISchema } from './convert-json-schema-to-openapi-schema';\nimport { GoogleGenerativeAIModelId } from './google-generative-ai-options';\n\nexport function prepareTools({\n  tools,\n  toolChoice,\n  modelId,\n}: {\n  tools: LanguageModelV2CallOptions['tools'];\n  toolChoice?: LanguageModelV2CallOptions['toolChoice'];\n  modelId: GoogleGenerativeAIModelId;\n}): {\n  tools:\n    | {\n        functionDeclarations: Array<{\n          name: string;\n          description: string;\n          parameters: unknown;\n        }>;\n      }\n    | Record<string, any>\n    | undefined;\n  toolConfig:\n    | undefined\n    | {\n        functionCallingConfig: {\n          mode: 'AUTO' | 'NONE' | 'ANY';\n          allowedFunctionNames?: string[];\n        };\n      };\n  toolWarnings: LanguageModelV2CallWarning[];\n} {\n  // when the tools array is empty, change it to undefined to prevent errors:\n  tools = tools?.length ? tools : undefined;\n\n  const toolWarnings: LanguageModelV2CallWarning[] = [];\n\n  const isGemini2 = modelId.includes('gemini-2');\n  const supportsDynamicRetrieval =\n    modelId.includes('gemini-1.5-flash') && !modelId.includes('-8b');\n\n  if (tools == null) {\n    return { tools: undefined, toolConfig: undefined, toolWarnings };\n  }\n\n  // Check for mixed tool types and add warnings\n  const hasFunctionTools = tools.some(tool => tool.type === 'function');\n  const hasProviderDefinedTools = tools.some(\n    tool => tool.type === 'provider-defined',\n  );\n\n  if (hasFunctionTools && hasProviderDefinedTools) {\n    toolWarnings.push({\n      type: 'unsupported-tool',\n      tool: tools.find(tool => tool.type === 'function')!,\n      details:\n        'Cannot mix function tools with provider-defined tools in the same request. Please use either function tools or provider-defined tools, but not both.',\n    });\n  }\n\n  if (hasProviderDefinedTools) {\n    const googleTools: Record<string, any> = {};\n\n    const providerDefinedTools = tools.filter(\n      tool => tool.type === 'provider-defined',\n    );\n    providerDefinedTools.forEach(tool => {\n      switch (tool.id) {\n        case 'google.google_search':\n          if (isGemini2) {\n            googleTools.googleSearch = {};\n          } else if (supportsDynamicRetrieval) {\n            // For non-Gemini-2 models that don't support dynamic retrieval, use basic googleSearchRetrieval\n            googleTools.googleSearchRetrieval = {\n              dynamicRetrievalConfig: {\n                mode: tool.args.mode as\n                  | 'MODE_DYNAMIC'\n                  | 'MODE_UNSPECIFIED'\n                  | undefined,\n                dynamicThreshold: tool.args.dynamicThreshold as\n                  | number\n                  | undefined,\n              },\n            };\n          } else {\n            googleTools.googleSearchRetrieval = {};\n          }\n          break;\n        case 'google.url_context':\n          if (isGemini2) {\n            googleTools.urlContext = {};\n          } else {\n            toolWarnings.push({\n              type: 'unsupported-tool',\n              tool,\n              details:\n                'The URL context tool is not supported with other Gemini models than Gemini 2.',\n            });\n          }\n          break;\n        case 'google.code_execution':\n          if (isGemini2) {\n            googleTools.codeExecution = {};\n          } else {\n            toolWarnings.push({\n              type: 'unsupported-tool',\n              tool,\n              details:\n                'The code execution tools is not supported with other Gemini models than Gemini 2.',\n            });\n          }\n          break;\n        default:\n          toolWarnings.push({ type: 'unsupported-tool', tool });\n          break;\n      }\n    });\n\n    return {\n      tools: Object.keys(googleTools).length > 0 ? googleTools : undefined,\n      toolConfig: undefined,\n      toolWarnings,\n    };\n  }\n\n  const functionDeclarations = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case 'function':\n        functionDeclarations.push({\n          name: tool.name,\n          description: tool.description ?? '',\n          parameters: convertJSONSchemaToOpenAPISchema(tool.inputSchema),\n        });\n        break;\n      default:\n        toolWarnings.push({ type: 'unsupported-tool', tool });\n        break;\n    }\n  }\n\n  if (toolChoice == null) {\n    return {\n      tools: { functionDeclarations },\n      toolConfig: undefined,\n      toolWarnings,\n    };\n  }\n\n  const type = toolChoice.type;\n\n  switch (type) {\n    case 'auto':\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: 'AUTO' } },\n        toolWarnings,\n      };\n    case 'none':\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: 'NONE' } },\n        toolWarnings,\n      };\n    case 'required':\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: 'ANY' } },\n        toolWarnings,\n      };\n    case 'tool':\n      return {\n        tools: { functionDeclarations },\n        toolConfig: {\n          functionCallingConfig: {\n            mode: 'ANY',\n            allowedFunctionNames: [toolChoice.toolName],\n          },\n        },\n        toolWarnings,\n      };\n    default: {\n      const _exhaustiveCheck: never = type;\n      throw new UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`,\n      });\n    }\n  }\n}\n","import { LanguageModelV2FinishReason } from '@ai-sdk/provider';\n\nexport function mapGoogleGenerativeAIFinishReason({\n  finishReason,\n  hasToolCalls,\n}: {\n  finishReason: string | null | undefined;\n  hasToolCalls: boolean;\n}): LanguageModelV2FinishReason {\n  switch (finishReason) {\n    case 'STOP':\n      return hasToolCalls ? 'tool-calls' : 'stop';\n    case 'MAX_TOKENS':\n      return 'length';\n    case 'IMAGE_SAFETY':\n    case 'RECITATION':\n    case 'SAFETY':\n    case 'BLOCKLIST':\n    case 'PROHIBITED_CONTENT':\n    case 'SPII':\n      return 'content-filter';\n    case 'FINISH_REASON_UNSPECIFIED':\n    case 'OTHER':\n      return 'other';\n    case 'MALFORMED_FUNCTION_CALL':\n      return 'error';\n    default:\n      return 'unknown';\n  }\n}\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n// https://ai.google.dev/gemini-api/docs/google-search\n// https://ai.google.dev/api/generate-content#GroundingSupport\n// https://cloud.google.com/vertex-ai/generative-ai/docs/grounding/grounding-with-google-search\n\nexport const groundingChunkSchema = z.object({\n  web: z.object({ uri: z.string(), title: z.string() }).nullish(),\n  retrievedContext: z.object({ uri: z.string(), title: z.string() }).nullish(),\n});\n\nexport const groundingMetadataSchema = z.object({\n  webSearchQueries: z.array(z.string()).nullish(),\n  retrievalQueries: z.array(z.string()).nullish(),\n  searchEntryPoint: z.object({ renderedContent: z.string() }).nullish(),\n  groundingChunks: z.array(groundingChunkSchema).nullish(),\n  groundingSupports: z\n    .array(\n      z.object({\n        segment: z.object({\n          startIndex: z.number().nullish(),\n          endIndex: z.number().nullish(),\n          text: z.string().nullish(),\n        }),\n        segment_text: z.string().nullish(),\n        groundingChunkIndices: z.array(z.number()).nullish(),\n        supportChunkIndices: z.array(z.number()).nullish(),\n        confidenceScores: z.array(z.number()).nullish(),\n        confidenceScore: z.array(z.number()).nullish(),\n      }),\n    )\n    .nullish(),\n  retrievalMetadata: z\n    .union([\n      z.object({\n        webDynamicRetrievalScore: z.number(),\n      }),\n      z.object({}),\n    ])\n    .nullish(),\n});\n\nexport const googleSearch = createProviderDefinedToolFactory<\n  {},\n  {\n    /**\n     * The mode of the predictor to be used in dynamic retrieval. The following modes are supported:\n     *  - MODE_DYNAMIC: Run retrieval only when system decides it is necessary\n     *  - MODE_UNSPECIFIED: Always trigger retrieval\n     * @default MODE_UNSPECIFIED\n     */\n    mode?: 'MODE_DYNAMIC' | 'MODE_UNSPECIFIED';\n\n    /**\n     * The threshold to be used in dynamic retrieval (if not set, a system default value is used).\n     */\n    dynamicThreshold?: number;\n  }\n>({\n  id: 'google.google_search',\n  name: 'google_search',\n  inputSchema: z.object({\n    mode: z\n      .enum(['MODE_DYNAMIC', 'MODE_UNSPECIFIED'])\n      .default('MODE_UNSPECIFIED'),\n    dynamicThreshold: z.number().default(1),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n// https://ai.google.dev/api/generate-content#UrlRetrievalMetadata\nconst urlMetadataSchema = z.object({\n  retrievedUrl: z.string(),\n  urlRetrievalStatus: z.string(),\n});\n\nexport const urlContextMetadataSchema = z.object({\n  urlMetadata: z.array(urlMetadataSchema),\n});\n\nexport const urlContext = createProviderDefinedToolFactory<\n  {\n    // Url context does not have any input schema, it will directly use the url from the prompt\n  },\n  {}\n>({\n  id: 'google.url_context',\n  name: 'url_context',\n  inputSchema: z.object({}),\n});\n","import { createProviderDefinedToolFactoryWithOutputSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n/**\n * A tool that enables the model to generate and run Python code.\n *\n * @note Ensure the selected model supports Code Execution.\n * Multi-tool usage with the code execution tool is typically compatible with Gemini >=2 models.\n *\n * @see https://ai.google.dev/gemini-api/docs/code-execution (Google AI)\n * @see https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/code-execution-api (Vertex AI)\n */\nexport const codeExecution = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    language: string;\n    code: string;\n  },\n  {\n    outcome: string;\n    output: string;\n  },\n  {}\n>({\n  id: 'google.code_execution',\n  name: 'code_execution',\n  inputSchema: z.object({\n    language: z.string().describe('The programming language of the code.'),\n    code: z.string().describe('The code to be executed.'),\n  }),\n  outputSchema: z.object({\n    outcome: z\n      .string()\n      .describe('The outcome of the execution (e.g., \"OUTCOME_OK\").'),\n    output: z.string().describe('The output from the code execution.'),\n  }),\n});\n","import { codeExecution } from './tool/code-execution';\nimport { googleSearch } from './tool/google-search';\nimport { urlContext } from './tool/url-context';\n\nexport const googleTools = {\n  /**\n   * Creates a Google search tool that gives Google direct access to real-time web content.\n   * Must have name \"google_search\".\n   */\n  googleSearch,\n\n  /**\n   * Creates a URL context tool that gives Google direct access to real-time web content.\n   * Must have name \"url_context\".\n   */\n  urlContext,\n  /**\n   * A tool that enables the model to generate and run Python code.\n   * Must have name \"code_execution\".\n   *\n   * @note Ensure the selected model supports Code Execution.\n   * Multi-tool usage with the code execution tool is typically compatible with Gemini >=2 models.\n   *\n   * @see https://ai.google.dev/gemini-api/docs/code-execution (Google AI)\n   * @see https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/code-execution-api (Vertex AI)\n   */\n  codeExecution,\n};\n","import { ImageModelV2, ImageModelV2CallWarning } from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createJsonResponseHandler,\n  parseProviderOptions,\n  postJsonToApi,\n  resolve,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { googleFailedResponseHandler } from './google-error';\nimport {\n  GoogleGenerativeAIImageModelId,\n  GoogleGenerativeAIImageSettings,\n} from './google-generative-ai-image-settings';\nimport { FetchFunction, Resolvable } from '@ai-sdk/provider-utils';\n\ninterface GoogleGenerativeAIImageModelConfig {\n  provider: string;\n  baseURL: string;\n  headers?: Resolvable<Record<string, string | undefined>>;\n  fetch?: FetchFunction;\n  generateId?: () => string;\n  _internal?: {\n    currentDate?: () => Date;\n  };\n}\n\nexport class GoogleGenerativeAIImageModel implements ImageModelV2 {\n  readonly specificationVersion = 'v2';\n\n  get maxImagesPerCall(): number {\n    // https://ai.google.dev/gemini-api/docs/imagen#imagen-model\n    return this.settings.maxImagesPerCall ?? 4;\n  }\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  constructor(\n    readonly modelId: GoogleGenerativeAIImageModelId,\n    private readonly settings: GoogleGenerativeAIImageSettings,\n    private readonly config: GoogleGenerativeAIImageModelConfig,\n  ) {}\n\n  async doGenerate(\n    options: Parameters<ImageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<ImageModelV2['doGenerate']>>> {\n    const {\n      prompt,\n      n = 1,\n      size = '1024x1024',\n      aspectRatio = '1:1',\n      seed,\n      providerOptions,\n      headers,\n      abortSignal,\n    } = options;\n    const warnings: Array<ImageModelV2CallWarning> = [];\n\n    if (size != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'size',\n        details:\n          'This model does not support the `size` option. Use `aspectRatio` instead.',\n      });\n    }\n\n    if (seed != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'seed',\n        details:\n          'This model does not support the `seed` option through this provider.',\n      });\n    }\n\n    const googleOptions = await parseProviderOptions({\n      provider: 'google',\n      providerOptions,\n      schema: googleImageProviderOptionsSchema,\n    });\n\n    const currentDate = this.config._internal?.currentDate?.() ?? new Date();\n\n    const parameters: Record<string, unknown> = {\n      sampleCount: n,\n    };\n\n    if (aspectRatio != null) {\n      parameters.aspectRatio = aspectRatio;\n    }\n\n    if (googleOptions) {\n      Object.assign(parameters, googleOptions);\n    }\n\n    const body = {\n      instances: [{ prompt }],\n      parameters,\n    };\n\n    const { responseHeaders, value: response } = await postJsonToApi<{\n      predictions: Array<{ bytesBase64Encoded: string }>;\n    }>({\n      url: `${this.config.baseURL}/models/${this.modelId}:predict`,\n      headers: combineHeaders(await resolve(this.config.headers), headers),\n      body,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        googleImageResponseSchema,\n      ),\n      abortSignal,\n      fetch: this.config.fetch,\n    });\n    return {\n      images: response.predictions.map(\n        (p: { bytesBase64Encoded: string }) => p.bytesBase64Encoded,\n      ),\n      warnings: warnings ?? [],\n      providerMetadata: {\n        google: {\n          images: response.predictions.map(prediction => ({\n            // Add any prediction-specific metadata here\n          })),\n        },\n      },\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n      },\n    };\n  }\n}\n\n// minimal version of the schema\nconst googleImageResponseSchema = z.object({\n  predictions: z\n    .array(z.object({ bytesBase64Encoded: z.string() }))\n    .default([]),\n});\n\n// Note: For the initial GA launch of Imagen 3, safety filters are not configurable.\n// https://ai.google.dev/gemini-api/docs/imagen#imagen-model\nconst googleImageProviderOptionsSchema = z.object({\n  personGeneration: z\n    .enum(['dont_allow', 'allow_adult', 'allow_all'])\n    .nullish(),\n  aspectRatio: z.enum(['1:1', '3:4', '4:3', '9:16', '16:9']).nullish(),\n});\n\nexport type GoogleGenerativeAIImageProviderOptions = z.infer<\n  typeof googleImageProviderOptionsSchema\n>;\n"],"names":["generateId","z","z","responseHeaders","response","rawValue","z","combineHeaders","createJsonResponseHandler","parseProviderOptions","postJsonToApi","resolve","z","_a","z","UnsupportedFunctionalityError","googleTools","UnsupportedFunctionalityError","z","createProviderDefinedToolFactory","z","parseProviderOptions","googleTools","combineHeaders","resolve","postJsonToApi","createJsonResponseHandler","generateId","z","z","combineHeaders","createJsonResponseHandler","parseProviderOptions","postJsonToApi","resolve","z","parseProviderOptions","postJsonToApi","combineHeaders","resolve","createJsonResponseHandler","z","_a","generateId"],"mappings":"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","debugId":null}},
    {"offset": {"line": 4295, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/gateway-provider.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/errors/as-gateway-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/errors/create-gateway-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/errors/gateway-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/errors/gateway-authentication-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/errors/gateway-invalid-request-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/errors/gateway-rate-limit-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/errors/gateway-model-not-found-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/errors/gateway-internal-server-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/errors/gateway-response-error.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/errors/extract-api-call-response.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/errors/parse-auth-method.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/gateway-fetch-metadata.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/gateway-language-model.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/gateway-embedding-model.ts","file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/%40ai-sdk/gateway/src/vercel-environment.ts"],"sourcesContent":["import { NoSuchModelError } from '@ai-sdk/provider';\nimport {\n  loadOptionalSetting,\n  withoutTrailingSlash,\n  type FetchFunction,\n} from '@ai-sdk/provider-utils';\nimport { asGatewayError, GatewayAuthenticationError } from './errors';\nimport {\n  GATEWAY_AUTH_METHOD_HEADER,\n  parseAuthMethod,\n} from './errors/parse-auth-method';\nimport {\n  GatewayFetchMetadata,\n  type GatewayFetchMetadataResponse,\n} from './gateway-fetch-metadata';\nimport { GatewayLanguageModel } from './gateway-language-model';\nimport { GatewayEmbeddingModel } from './gateway-embedding-model';\nimport type { GatewayEmbeddingModelId } from './gateway-embedding-model-settings';\nimport { getVercelOidcToken, getVercelRequestId } from './vercel-environment';\nimport type { GatewayModelId } from './gateway-language-model-settings';\nimport type {\n  LanguageModelV2,\n  EmbeddingModelV2,\n  ProviderV2,\n} from '@ai-sdk/provider';\n\nexport interface GatewayProvider extends ProviderV2 {\n  (modelId: GatewayModelId): LanguageModelV2;\n\n  /**\nCreates a model for text generation.\n*/\n  languageModel(modelId: GatewayModelId): LanguageModelV2;\n\n  /**\nReturns available providers and models for use with the remote provider.\n */\n  getAvailableModels(): Promise<GatewayFetchMetadataResponse>;\n\n  /**\nCreates a model for generating text embeddings.\n*/\n  textEmbeddingModel(\n    modelId: GatewayEmbeddingModelId,\n  ): EmbeddingModelV2<string>;\n}\n\nexport interface GatewayProviderSettings {\n  /**\nThe base URL prefix for API calls. Defaults to `https://ai-gateway.vercel.sh/v1/ai`.\n   */\n  baseURL?: string;\n\n  /**\nAPI key that is being sent using the `Authorization` header.\n   */\n  apiKey?: string;\n\n  /**\nCustom headers to include in the requests.\n     */\n  headers?: Record<string, string>;\n\n  /**\nCustom fetch implementation. You can use it as a middleware to intercept requests,\nor to provide a custom fetch implementation for e.g. testing.\n    */\n  fetch?: FetchFunction;\n\n  /**\nHow frequently to refresh the metadata cache in milliseconds.\n   */\n  metadataCacheRefreshMillis?: number;\n\n  /**\n   * @internal For testing purposes only\n   */\n  _internal?: {\n    currentDate?: () => Date;\n  };\n}\n\nconst AI_GATEWAY_PROTOCOL_VERSION = '0.0.1';\n\n/**\nCreate a remote provider instance.\n */\nexport function createGatewayProvider(\n  options: GatewayProviderSettings = {},\n): GatewayProvider {\n  let pendingMetadata: Promise<GatewayFetchMetadataResponse> | null = null;\n  let metadataCache: GatewayFetchMetadataResponse | null = null;\n  const cacheRefreshMillis =\n    options.metadataCacheRefreshMillis ?? 1000 * 60 * 5;\n  let lastFetchTime = 0;\n\n  const baseURL =\n    withoutTrailingSlash(options.baseURL) ??\n    'https://ai-gateway.vercel.sh/v1/ai';\n\n  const getHeaders = async () => {\n    const auth = await getGatewayAuthToken(options);\n    if (auth) {\n      return {\n        Authorization: `Bearer ${auth.token}`,\n        'ai-gateway-protocol-version': AI_GATEWAY_PROTOCOL_VERSION,\n        [GATEWAY_AUTH_METHOD_HEADER]: auth.authMethod,\n        ...options.headers,\n      };\n    }\n\n    throw GatewayAuthenticationError.createContextualError({\n      apiKeyProvided: false,\n      oidcTokenProvided: false,\n      statusCode: 401,\n    });\n  };\n\n  const createO11yHeaders = () => {\n    const deploymentId = loadOptionalSetting({\n      settingValue: undefined,\n      environmentVariableName: 'VERCEL_DEPLOYMENT_ID',\n    });\n    const environment = loadOptionalSetting({\n      settingValue: undefined,\n      environmentVariableName: 'VERCEL_ENV',\n    });\n    const region = loadOptionalSetting({\n      settingValue: undefined,\n      environmentVariableName: 'VERCEL_REGION',\n    });\n\n    return async () => {\n      const requestId = await getVercelRequestId();\n      return {\n        ...(deploymentId && { 'ai-o11y-deployment-id': deploymentId }),\n        ...(environment && { 'ai-o11y-environment': environment }),\n        ...(region && { 'ai-o11y-region': region }),\n        ...(requestId && { 'ai-o11y-request-id': requestId }),\n      };\n    };\n  };\n\n  const createLanguageModel = (modelId: GatewayModelId) => {\n    return new GatewayLanguageModel(modelId, {\n      provider: 'gateway',\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      o11yHeaders: createO11yHeaders(),\n    });\n  };\n\n  const getAvailableModels = async () => {\n    const now = options._internal?.currentDate?.().getTime() ?? Date.now();\n    if (!pendingMetadata || now - lastFetchTime > cacheRefreshMillis) {\n      lastFetchTime = now;\n\n      pendingMetadata = new GatewayFetchMetadata({\n        baseURL,\n        headers: getHeaders,\n        fetch: options.fetch,\n      })\n        .getAvailableModels()\n        .then(metadata => {\n          metadataCache = metadata;\n          return metadata;\n        })\n        .catch(async (error: unknown) => {\n          throw asGatewayError(error, parseAuthMethod(await getHeaders()));\n        });\n    }\n\n    return metadataCache ? Promise.resolve(metadataCache) : pendingMetadata;\n  };\n\n  const provider = function (modelId: GatewayModelId) {\n    if (new.target) {\n      throw new Error(\n        'The Gateway Provider model function cannot be called with the new keyword.',\n      );\n    }\n\n    return createLanguageModel(modelId);\n  };\n\n  provider.getAvailableModels = getAvailableModels;\n  provider.imageModel = (modelId: string) => {\n    throw new NoSuchModelError({ modelId, modelType: 'imageModel' });\n  };\n  provider.languageModel = createLanguageModel;\n  provider.textEmbeddingModel = (modelId: GatewayEmbeddingModelId) => {\n    return new GatewayEmbeddingModel(modelId, {\n      provider: 'gateway',\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      o11yHeaders: createO11yHeaders(),\n    });\n  };\n\n  return provider;\n}\n\nexport const gateway = createGatewayProvider();\n\nexport async function getGatewayAuthToken(\n  options: GatewayProviderSettings,\n): Promise<{\n  token: string;\n  authMethod: 'api-key' | 'oidc';\n} | null> {\n  const apiKey = loadOptionalSetting({\n    settingValue: options.apiKey,\n    environmentVariableName: 'AI_GATEWAY_API_KEY',\n  });\n\n  if (apiKey) {\n    return {\n      token: apiKey,\n      authMethod: 'api-key',\n    };\n  }\n\n  try {\n    const oidcToken = await getVercelOidcToken();\n    return {\n      token: oidcToken,\n      authMethod: 'oidc',\n    };\n  } catch {\n    return null;\n  }\n}\n","import { APICallError } from '@ai-sdk/provider';\nimport { extractApiCallResponse, GatewayError } from '.';\nimport { createGatewayErrorFromResponse } from './create-gateway-error';\n\nexport function asGatewayError(\n  error: unknown,\n  authMethod?: 'api-key' | 'oidc',\n) {\n  if (GatewayError.isInstance(error)) {\n    return error;\n  }\n\n  if (APICallError.isInstance(error)) {\n    return createGatewayErrorFromResponse({\n      response: extractApiCallResponse(error),\n      statusCode: error.statusCode ?? 500,\n      defaultMessage: 'Gateway request failed',\n      cause: error,\n      authMethod,\n    });\n  }\n\n  return createGatewayErrorFromResponse({\n    response: {},\n    statusCode: 500,\n    defaultMessage:\n      error instanceof Error\n        ? `Gateway request failed: ${error.message}`\n        : 'Unknown Gateway error',\n    cause: error,\n    authMethod,\n  });\n}\n","import { z } from 'zod/v4';\nimport type { GatewayError } from './gateway-error';\nimport { GatewayAuthenticationError } from './gateway-authentication-error';\nimport { GatewayInvalidRequestError } from './gateway-invalid-request-error';\nimport { GatewayRateLimitError } from './gateway-rate-limit-error';\nimport {\n  GatewayModelNotFoundError,\n  modelNotFoundParamSchema,\n} from './gateway-model-not-found-error';\nimport { GatewayInternalServerError } from './gateway-internal-server-error';\nimport { GatewayResponseError } from './gateway-response-error';\n\nexport function createGatewayErrorFromResponse({\n  response,\n  statusCode,\n  defaultMessage = 'Gateway request failed',\n  cause,\n  authMethod,\n}: {\n  response: unknown;\n  statusCode: number;\n  defaultMessage?: string;\n  cause?: unknown;\n  authMethod?: 'api-key' | 'oidc';\n}): GatewayError {\n  const parseResult = gatewayErrorResponseSchema.safeParse(response);\n  if (!parseResult.success) {\n    return new GatewayResponseError({\n      message: `Invalid error response format: ${defaultMessage}`,\n      statusCode,\n      response,\n      validationError: parseResult.error,\n      cause,\n    });\n  }\n\n  const validatedResponse: GatewayErrorResponse = parseResult.data;\n  const errorType = validatedResponse.error.type;\n  const message = validatedResponse.error.message;\n\n  switch (errorType) {\n    case 'authentication_error':\n      return GatewayAuthenticationError.createContextualError({\n        apiKeyProvided: authMethod === 'api-key',\n        oidcTokenProvided: authMethod === 'oidc',\n        statusCode,\n        cause,\n      });\n    case 'invalid_request_error':\n      return new GatewayInvalidRequestError({ message, statusCode, cause });\n    case 'rate_limit_exceeded':\n      return new GatewayRateLimitError({ message, statusCode, cause });\n    case 'model_not_found': {\n      const modelResult = modelNotFoundParamSchema.safeParse(\n        validatedResponse.error.param,\n      );\n      return new GatewayModelNotFoundError({\n        message,\n        statusCode,\n        modelId: modelResult.success ? modelResult.data.modelId : undefined,\n        cause,\n      });\n    }\n    case 'internal_server_error':\n      return new GatewayInternalServerError({ message, statusCode, cause });\n    default:\n      return new GatewayInternalServerError({ message, statusCode, cause });\n  }\n}\n\nconst gatewayErrorResponseSchema = z.object({\n  error: z.object({\n    message: z.string(),\n    type: z.string().nullish(),\n    param: z.unknown().nullish(),\n    code: z.union([z.string(), z.number()]).nullish(),\n  }),\n});\n\nexport type GatewayErrorResponse = z.infer<typeof gatewayErrorResponseSchema>;\n","const marker = 'vercel.ai.gateway.error';\nconst symbol = Symbol.for(marker);\n\nexport abstract class GatewayError extends Error {\n  private readonly [symbol] = true; // used in isInstance\n\n  abstract readonly name: string;\n  abstract readonly type: string;\n  readonly statusCode: number;\n  readonly cause?: unknown;\n\n  constructor({\n    message,\n    statusCode = 500,\n    cause,\n  }: {\n    message: string;\n    statusCode?: number;\n    cause?: unknown;\n  }) {\n    super(message);\n    this.statusCode = statusCode;\n    this.cause = cause;\n  }\n\n  /**\n   * Checks if the given error is a Gateway Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is a Gateway Error, false otherwise.\n   */\n  static isInstance(error: unknown): error is GatewayError {\n    return GatewayError.hasMarker(error);\n  }\n\n  static hasMarker(error: unknown): error is GatewayError {\n    return (\n      typeof error === 'object' &&\n      error !== null &&\n      symbol in error &&\n      (error as any)[symbol] === true\n    );\n  }\n}\n","import { GatewayError } from './gateway-error';\n\nconst name = 'GatewayAuthenticationError';\nconst marker = `vercel.ai.gateway.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * Authentication failed - invalid API key or OIDC token\n */\nexport class GatewayAuthenticationError extends GatewayError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly name = name;\n  readonly type = 'authentication_error';\n\n  constructor({\n    message = 'Authentication failed',\n    statusCode = 401,\n    cause,\n  }: {\n    message?: string;\n    statusCode?: number;\n    cause?: unknown;\n  } = {}) {\n    super({ message, statusCode, cause });\n  }\n\n  static isInstance(error: unknown): error is GatewayAuthenticationError {\n    return GatewayError.hasMarker(error) && symbol in error;\n  }\n\n  /**\n   * Creates a contextual error message when authentication fails\n   */\n  static createContextualError({\n    apiKeyProvided,\n    oidcTokenProvided,\n    message = 'Authentication failed',\n    statusCode = 401,\n    cause,\n  }: {\n    apiKeyProvided: boolean;\n    oidcTokenProvided: boolean;\n    message?: string;\n    statusCode?: number;\n    cause?: unknown;\n  }): GatewayAuthenticationError {\n    let contextualMessage: string;\n\n    if (apiKeyProvided) {\n      contextualMessage = `AI Gateway authentication failed: Invalid API key provided.\n\nThe token is expected to be provided via the 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.`;\n    } else if (oidcTokenProvided) {\n      contextualMessage = `AI Gateway authentication failed: Invalid OIDC token provided.\n\nThe token is expected to be provided via the 'VERCEL_OIDC_TOKEN' environment variable. It expires every 12 hours.\n- make sure your Vercel project settings have OIDC enabled\n- if running locally with 'vercel dev', the token is automatically obtained and refreshed\n- if running locally with your own dev server, run 'vercel env pull' to fetch the token\n- in production/preview, the token is automatically obtained and refreshed\n\nAlternative: Provide an API key via 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.`;\n    } else {\n      contextualMessage = `AI Gateway authentication failed: No authentication provided.\n\nProvide either an API key or OIDC token.\n\nAPI key instructions:\n\nThe token is expected to be provided via the 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.\n\nOIDC token instructions:\n\nThe token is expected to be provided via the 'VERCEL_OIDC_TOKEN' environment variable. It expires every 12 hours.\n- make sure your Vercel project settings have OIDC enabled\n- if running locally with 'vercel dev', the token is automatically obtained and refreshed\n- if running locally with your own dev server, run 'vercel env pull' to fetch the token\n- in production/preview, the token is automatically obtained and refreshed`;\n    }\n\n    return new GatewayAuthenticationError({\n      message: contextualMessage,\n      statusCode,\n      cause,\n    });\n  }\n}\n","import { GatewayError } from './gateway-error';\n\nconst name = 'GatewayInvalidRequestError';\nconst marker = `vercel.ai.gateway.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * Invalid request - missing headers, malformed data, etc.\n */\nexport class GatewayInvalidRequestError extends GatewayError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly name = name;\n  readonly type = 'invalid_request_error';\n\n  constructor({\n    message = 'Invalid request',\n    statusCode = 400,\n    cause,\n  }: {\n    message?: string;\n    statusCode?: number;\n    cause?: unknown;\n  } = {}) {\n    super({ message, statusCode, cause });\n  }\n\n  static isInstance(error: unknown): error is GatewayInvalidRequestError {\n    return GatewayError.hasMarker(error) && symbol in error;\n  }\n}\n","import { GatewayError } from './gateway-error';\n\nconst name = 'GatewayRateLimitError';\nconst marker = `vercel.ai.gateway.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * Rate limit exceeded.\n */\nexport class GatewayRateLimitError extends GatewayError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly name = name;\n  readonly type = 'rate_limit_exceeded';\n\n  constructor({\n    message = 'Rate limit exceeded',\n    statusCode = 429,\n    cause,\n  }: {\n    message?: string;\n    statusCode?: number;\n    cause?: unknown;\n  } = {}) {\n    super({ message, statusCode, cause });\n  }\n\n  static isInstance(error: unknown): error is GatewayRateLimitError {\n    return GatewayError.hasMarker(error) && symbol in error;\n  }\n}\n","import { z } from 'zod/v4';\nimport { GatewayError } from './gateway-error';\n\nconst name = 'GatewayModelNotFoundError';\nconst marker = `vercel.ai.gateway.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport const modelNotFoundParamSchema = z.object({\n  modelId: z.string(),\n});\n\n/**\n * Model not found or not available\n */\nexport class GatewayModelNotFoundError extends GatewayError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly name = name;\n  readonly type = 'model_not_found';\n  readonly modelId?: string;\n\n  constructor({\n    message = 'Model not found',\n    statusCode = 404,\n    modelId,\n    cause,\n  }: {\n    message?: string;\n    statusCode?: number;\n    modelId?: string;\n    cause?: unknown;\n  } = {}) {\n    super({ message, statusCode, cause });\n    this.modelId = modelId;\n  }\n\n  static isInstance(error: unknown): error is GatewayModelNotFoundError {\n    return GatewayError.hasMarker(error) && symbol in error;\n  }\n}\n","import { GatewayError } from './gateway-error';\n\nconst name = 'GatewayInternalServerError';\nconst marker = `vercel.ai.gateway.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * Internal server error from the Gateway\n */\nexport class GatewayInternalServerError extends GatewayError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly name = name;\n  readonly type = 'internal_server_error';\n\n  constructor({\n    message = 'Internal server error',\n    statusCode = 500,\n    cause,\n  }: {\n    message?: string;\n    statusCode?: number;\n    cause?: unknown;\n  } = {}) {\n    super({ message, statusCode, cause });\n  }\n\n  static isInstance(error: unknown): error is GatewayInternalServerError {\n    return GatewayError.hasMarker(error) && symbol in error;\n  }\n}\n","import { GatewayError } from './gateway-error';\nimport type { ZodError } from 'zod/v4';\n\nconst name = 'GatewayResponseError';\nconst marker = `vercel.ai.gateway.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * Gateway response parsing error\n */\nexport class GatewayResponseError extends GatewayError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly name = name;\n  readonly type = 'response_error';\n  readonly response?: unknown;\n  readonly validationError?: ZodError;\n\n  constructor({\n    message = 'Invalid response from Gateway',\n    statusCode = 502,\n    response,\n    validationError,\n    cause,\n  }: {\n    message?: string;\n    statusCode?: number;\n    response?: unknown;\n    validationError?: ZodError;\n    cause?: unknown;\n  } = {}) {\n    super({ message, statusCode, cause });\n    this.response = response;\n    this.validationError = validationError;\n  }\n\n  static isInstance(error: unknown): error is GatewayResponseError {\n    return GatewayError.hasMarker(error) && symbol in error;\n  }\n}\n","import type { APICallError } from '@ai-sdk/provider';\n\nexport function extractApiCallResponse(error: APICallError): unknown {\n  if (error.data !== undefined) {\n    return error.data;\n  }\n  if (error.responseBody != null) {\n    try {\n      return JSON.parse(error.responseBody);\n    } catch {\n      return error.responseBody;\n    }\n  }\n  return {};\n}\n","import { z } from 'zod/v4';\n\nexport const GATEWAY_AUTH_METHOD_HEADER = 'ai-gateway-auth-method' as const;\n\nexport function parseAuthMethod(headers: Record<string, string | undefined>) {\n  const result = gatewayAuthMethodSchema.safeParse(\n    headers[GATEWAY_AUTH_METHOD_HEADER],\n  );\n  return result.success ? result.data : undefined;\n}\n\nconst gatewayAuthMethodSchema = z.union([\n  z.literal('api-key'),\n  z.literal('oidc'),\n]);\n","import {\n  createJsonErrorResponseHandler,\n  createJsonResponseHandler,\n  getFromApi,\n  resolve,\n} from '@ai-sdk/provider-utils';\nimport { asGatewayError } from './errors';\nimport type { GatewayConfig } from './gateway-config';\nimport type { GatewayLanguageModelEntry } from './gateway-model-entry';\nimport { z } from 'zod/v4';\n\ntype GatewayFetchMetadataConfig = GatewayConfig;\n\nexport interface GatewayFetchMetadataResponse {\n  models: GatewayLanguageModelEntry[];\n}\n\nexport class GatewayFetchMetadata {\n  constructor(private readonly config: GatewayFetchMetadataConfig) {}\n\n  async getAvailableModels(): Promise<GatewayFetchMetadataResponse> {\n    try {\n      const { value } = await getFromApi({\n        url: `${this.config.baseURL}/config`,\n        headers: await resolve(this.config.headers()),\n        successfulResponseHandler: createJsonResponseHandler(\n          gatewayFetchMetadataSchema,\n        ),\n        failedResponseHandler: createJsonErrorResponseHandler({\n          errorSchema: z.any(),\n          errorToMessage: data => data,\n        }),\n        fetch: this.config.fetch,\n      });\n\n      return value;\n    } catch (error) {\n      throw asGatewayError(error);\n    }\n  }\n}\n\nconst gatewayLanguageModelSpecificationSchema = z.object({\n  specificationVersion: z.literal('v2'),\n  provider: z.string(),\n  modelId: z.string(),\n});\n\nconst gatewayLanguageModelPricingSchema = z\n  .object({\n    input: z.string(),\n    output: z.string(),\n    input_cache_read: z.string().nullish(),\n    input_cache_write: z.string().nullish(),\n  })\n  .transform(({ input, output, input_cache_read, input_cache_write }) => ({\n    input,\n    output,\n    ...(input_cache_read ? { cachedInputTokens: input_cache_read } : {}),\n    ...(input_cache_write\n      ? { cacheCreationInputTokens: input_cache_write }\n      : {}),\n  }));\n\nconst gatewayLanguageModelEntrySchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string().nullish(),\n  pricing: gatewayLanguageModelPricingSchema.nullish(),\n  specification: gatewayLanguageModelSpecificationSchema,\n  modelType: z.enum(['language', 'embedding', 'image']).nullish(),\n});\n\nconst gatewayFetchMetadataSchema = z.object({\n  models: z.array(gatewayLanguageModelEntrySchema),\n});\n","import type {\n  LanguageModelV2,\n  LanguageModelV2CallOptions,\n  LanguageModelV2CallWarning,\n  LanguageModelV2FilePart,\n  LanguageModelV2StreamPart,\n} from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createEventSourceResponseHandler,\n  createJsonErrorResponseHandler,\n  createJsonResponseHandler,\n  postJsonToApi,\n  resolve,\n  type ParseResult,\n  type Resolvable,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport type { GatewayConfig } from './gateway-config';\nimport type { GatewayModelId } from './gateway-language-model-settings';\nimport { asGatewayError } from './errors';\nimport { parseAuthMethod } from './errors/parse-auth-method';\n\ntype GatewayChatConfig = GatewayConfig & {\n  provider: string;\n  o11yHeaders: Resolvable<Record<string, string>>;\n};\n\nexport class GatewayLanguageModel implements LanguageModelV2 {\n  readonly specificationVersion = 'v2';\n  readonly supportedUrls = { '*/*': [/.*/] };\n\n  constructor(\n    readonly modelId: GatewayModelId,\n    private readonly config: GatewayChatConfig,\n  ) {}\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  private async getArgs(options: Parameters<LanguageModelV2['doGenerate']>[0]) {\n    const { abortSignal: _abortSignal, ...optionsWithoutSignal } = options;\n\n    return {\n      args: this.maybeEncodeFileParts(optionsWithoutSignal),\n      warnings: [],\n    };\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doGenerate']>>> {\n    const { args, warnings } = await this.getArgs(options);\n    const { abortSignal } = options;\n\n    const resolvedHeaders = await resolve(this.config.headers());\n\n    try {\n      const {\n        responseHeaders,\n        value: responseBody,\n        rawValue: rawResponse,\n      } = await postJsonToApi({\n        url: this.getUrl(),\n        headers: combineHeaders(\n          resolvedHeaders,\n          options.headers,\n          this.getModelConfigHeaders(this.modelId, false),\n          await resolve(this.config.o11yHeaders),\n        ),\n        body: args,\n        successfulResponseHandler: createJsonResponseHandler(z.any()),\n        failedResponseHandler: createJsonErrorResponseHandler({\n          errorSchema: z.any(),\n          errorToMessage: data => data,\n        }),\n        ...(abortSignal && { abortSignal }),\n        fetch: this.config.fetch,\n      });\n\n      return {\n        ...responseBody,\n        request: { body: args },\n        response: { headers: responseHeaders, body: rawResponse },\n        warnings,\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV2['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doStream']>>> {\n    const { args, warnings } = await this.getArgs(options);\n    const { abortSignal } = options;\n\n    const resolvedHeaders = await resolve(this.config.headers());\n\n    try {\n      const { value: response, responseHeaders } = await postJsonToApi({\n        url: this.getUrl(),\n        headers: combineHeaders(\n          resolvedHeaders,\n          options.headers,\n          this.getModelConfigHeaders(this.modelId, true),\n          await resolve(this.config.o11yHeaders),\n        ),\n        body: args,\n        successfulResponseHandler: createEventSourceResponseHandler(z.any()),\n        failedResponseHandler: createJsonErrorResponseHandler({\n          errorSchema: z.any(),\n          errorToMessage: data => data,\n        }),\n        ...(abortSignal && { abortSignal }),\n        fetch: this.config.fetch,\n      });\n\n      return {\n        stream: response.pipeThrough(\n          new TransformStream<\n            ParseResult<LanguageModelV2StreamPart>,\n            LanguageModelV2StreamPart\n          >({\n            start(controller) {\n              if (warnings.length > 0) {\n                controller.enqueue({ type: 'stream-start', warnings });\n              }\n            },\n            transform(chunk, controller) {\n              if (chunk.success) {\n                const streamPart = chunk.value;\n\n                // Handle raw chunks: if this is a raw chunk from the gateway API,\n                // only emit it if includeRawChunks is true\n                if (streamPart.type === 'raw' && !options.includeRawChunks) {\n                  return; // Skip raw chunks if not requested\n                }\n\n                if (\n                  streamPart.type === 'response-metadata' &&\n                  streamPart.timestamp &&\n                  typeof streamPart.timestamp === 'string'\n                ) {\n                  streamPart.timestamp = new Date(streamPart.timestamp);\n                }\n\n                controller.enqueue(streamPart);\n              } else {\n                controller.error(\n                  (chunk as { success: false; error: unknown }).error,\n                );\n              }\n            },\n          }),\n        ),\n        request: { body: args },\n        response: { headers: responseHeaders },\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n\n  private isFilePart(part: unknown) {\n    return (\n      part && typeof part === 'object' && 'type' in part && part.type === 'file'\n    );\n  }\n\n  /**\n   * Encodes file parts in the prompt to base64. Mutates the passed options\n   * instance directly to avoid copying the file data.\n   * @param options - The options to encode.\n   * @returns The options with the file parts encoded.\n   */\n  private maybeEncodeFileParts(options: LanguageModelV2CallOptions) {\n    for (const message of options.prompt) {\n      for (const part of message.content) {\n        if (this.isFilePart(part)) {\n          const filePart = part as LanguageModelV2FilePart;\n          // If the file part is a URL it will get cleanly converted to a string.\n          // If it's a binary file attachment we convert it to a data url.\n          // In either case, server-side we should only ever see URLs as strings.\n          if (filePart.data instanceof Uint8Array) {\n            const buffer = Uint8Array.from(filePart.data);\n            const base64Data = Buffer.from(buffer).toString('base64');\n            filePart.data = new URL(\n              `data:${filePart.mediaType || 'application/octet-stream'};base64,${base64Data}`,\n            );\n          }\n        }\n      }\n    }\n    return options;\n  }\n\n  private getUrl() {\n    return `${this.config.baseURL}/language-model`;\n  }\n\n  private getModelConfigHeaders(modelId: string, streaming: boolean) {\n    return {\n      'ai-language-model-specification-version': '2',\n      'ai-language-model-id': modelId,\n      'ai-language-model-streaming': String(streaming),\n    };\n  }\n}\n","import type { EmbeddingModelV2 } from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createJsonResponseHandler,\n  createJsonErrorResponseHandler,\n  postJsonToApi,\n  resolve,\n  type Resolvable,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport type { GatewayConfig } from './gateway-config';\nimport { asGatewayError } from './errors';\nimport { parseAuthMethod } from './errors/parse-auth-method';\nimport type { SharedV2ProviderMetadata } from '@ai-sdk/provider';\n\nexport class GatewayEmbeddingModel implements EmbeddingModelV2<string> {\n  readonly specificationVersion = 'v2';\n  readonly maxEmbeddingsPerCall = 2048;\n  readonly supportsParallelCalls = true;\n\n  constructor(\n    readonly modelId: string,\n    private readonly config: GatewayConfig & {\n      provider: string;\n      o11yHeaders: Resolvable<Record<string, string>>;\n    },\n  ) {}\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions,\n  }: Parameters<EmbeddingModelV2<string>['doEmbed']>[0]): Promise<\n    Awaited<ReturnType<EmbeddingModelV2<string>['doEmbed']>>\n  > {\n    const resolvedHeaders = await resolve(this.config.headers());\n    try {\n      const {\n        responseHeaders,\n        value: responseBody,\n        rawValue,\n      } = await postJsonToApi({\n        url: this.getUrl(),\n        headers: combineHeaders(\n          resolvedHeaders,\n          headers ?? {},\n          this.getModelConfigHeaders(),\n          await resolve(this.config.o11yHeaders),\n        ),\n        body: {\n          input: values.length === 1 ? values[0] : values,\n          ...(providerOptions ?? {}),\n        },\n        successfulResponseHandler: createJsonResponseHandler(\n          gatewayEmbeddingResponseSchema,\n        ),\n        failedResponseHandler: createJsonErrorResponseHandler({\n          errorSchema: z.any(),\n          errorToMessage: data => data,\n        }),\n        ...(abortSignal && { abortSignal }),\n        fetch: this.config.fetch,\n      });\n\n      return {\n        embeddings: responseBody.embeddings,\n        usage: responseBody.usage ?? undefined,\n        providerMetadata:\n          responseBody.providerMetadata as unknown as SharedV2ProviderMetadata,\n        response: { headers: responseHeaders, body: rawValue },\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n\n  private getUrl() {\n    return `${this.config.baseURL}/embedding-model`;\n  }\n\n  private getModelConfigHeaders() {\n    return {\n      'ai-embedding-model-specification-version': '2',\n      'ai-model-id': this.modelId,\n    };\n  }\n}\n\nconst gatewayEmbeddingResponseSchema = z.object({\n  embeddings: z.array(z.array(z.number())),\n  usage: z.object({ tokens: z.number() }).nullish(),\n  providerMetadata: z\n    .record(z.string(), z.record(z.string(), z.unknown()))\n    .optional(),\n});\n","import { GatewayAuthenticationError } from './errors';\n\nexport async function getVercelOidcToken(): Promise<string> {\n  const token =\n    getContext().headers?.['x-vercel-oidc-token'] ??\n    process.env.VERCEL_OIDC_TOKEN;\n\n  if (!token) {\n    throw new GatewayAuthenticationError({\n      message: 'OIDC token not available',\n      statusCode: 401,\n    });\n  }\n\n  return token;\n}\n\nexport async function getVercelRequestId(): Promise<string | undefined> {\n  return getContext().headers?.['x-vercel-id'];\n}\n\ntype Context = {\n  headers?: Record<string, string>;\n};\n\nconst SYMBOL_FOR_REQ_CONTEXT = Symbol.for('@vercel/request-context');\n\nfunction getContext(): Context {\n  const fromSymbol: typeof globalThis & {\n    [SYMBOL_FOR_REQ_CONTEXT]?: { get?: () => Context };\n  } = globalThis;\n  return fromSymbol[SYMBOL_FOR_REQ_CONTEXT]?.get?.() ?? {};\n}\n"],"names":["z","marker","symbol","_a","_b","name","marker","symbol","_a","_b","name","marker","symbol","_a","_b","name","marker","symbol","_a","_b","name","marker","symbol","_a","_b","name","marker","symbol","_a","_b","z","_a","z","z","createJsonErrorResponseHandler","createJsonResponseHandler","resolve","z","resolve","createJsonResponseHandler","z","createJsonErrorResponseHandler","combineHeaders","createJsonResponseHandler","createJsonErrorResponseHandler","postJsonToApi","resolve","z","_a","resolve","postJsonToApi","combineHeaders","createJsonResponseHandler","createJsonErrorResponseHandler","z","_a","_b","_a","_b"],"mappings":"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","debugId":null}},
    {"offset": {"line": 5067, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/node_modules/dotenv/lib/main.js"],"sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\n// Array of tips to display randomly\nconst TIPS = [\n  '🔐 encrypt with Dotenvx: https://dotenvx.com',\n  '🔐 prevent committing .env to code: https://dotenvx.com/precommit',\n  '🔐 prevent building .env in docker: https://dotenvx.com/prebuild',\n  '📡 observe env with Radar: https://dotenvx.com/radar',\n  '📡 auto-backup env with Radar: https://dotenvx.com/radar',\n  '📡 version env with Radar: https://dotenvx.com/radar',\n  '🛠️  run anywhere with `dotenvx run -- yourcommand`',\n  '⚙️  specify custom .env file path with { path: \\'/custom/path/.env\\' }',\n  '⚙️  enable debug logging with { debug: true }',\n  '⚙️  override existing env vars with { override: true }',\n  '⚙️  suppress all logs with { quiet: true }',\n  '⚙️  write to custom object with { processEnv: myObject }',\n  '⚙️  load multiple .env files with { path: [\\'.env.local\\', \\'.env\\'] }'\n]\n\n// Get a random tip from the tips array\nfunction _getRandomTip () {\n  return TIPS[Math.floor(Math.random() * TIPS.length)]\n}\n\nfunction parseBoolean (value) {\n  if (typeof value === 'string') {\n    return !['false', '0', 'no', 'off', ''].includes(value.toLowerCase())\n  }\n  return Boolean(value)\n}\n\nfunction supportsAnsi () {\n  return process.stdout.isTTY // && process.env.TERM !== 'dumb'\n}\n\nfunction dim (text) {\n  return supportsAnsi() ? `\\x1b[2m${text}\\x1b[0m` : text\n}\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  options = options || {}\n\n  const vaultPath = _vaultPath(options)\n  options.path = vaultPath // parse .env.vault\n  const result = DotenvModule.configDotenv(options)\n  if (!result.parsed) {\n    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n    err.code = 'MISSING_DATA'\n    throw err\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _warn (message) {\n  console.error(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'\n    throw err\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let possibleVaultPath = null\n\n  if (options && options.path && options.path.length > 0) {\n    if (Array.isArray(options.path)) {\n      for (const filepath of options.path) {\n        if (fs.existsSync(filepath)) {\n          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`\n        }\n      }\n    } else {\n      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`\n    }\n  } else {\n    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')\n  }\n\n  if (fs.existsSync(possibleVaultPath)) {\n    return possibleVaultPath\n  }\n\n  return null\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  const debug = parseBoolean(process.env.DOTENV_CONFIG_DEBUG || (options && options.debug))\n  const quiet = parseBoolean(process.env.DOTENV_CONFIG_QUIET || (options && options.quiet))\n\n  if (debug || !quiet) {\n    _log('Loading env from encrypted .env.vault')\n  }\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  const dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n  let debug = parseBoolean(processEnv.DOTENV_CONFIG_DEBUG || (options && options.debug))\n  let quiet = parseBoolean(processEnv.DOTENV_CONFIG_QUIET || (options && options.quiet))\n\n  if (options && options.encoding) {\n    encoding = options.encoding\n  } else {\n    if (debug) {\n      _debug('No encoding is specified. UTF-8 is used by default')\n    }\n  }\n\n  let optionPaths = [dotenvPath] // default, look for .env\n  if (options && options.path) {\n    if (!Array.isArray(options.path)) {\n      optionPaths = [_resolveHome(options.path)]\n    } else {\n      optionPaths = [] // reset default\n      for (const filepath of options.path) {\n        optionPaths.push(_resolveHome(filepath))\n      }\n    }\n  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError\n  const parsedAll = {}\n  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))\n\n      DotenvModule.populate(parsedAll, parsed, options)\n    } catch (e) {\n      if (debug) {\n        _debug(`Failed to load ${path} ${e.message}`)\n      }\n      lastError = e\n    }\n  }\n\n  const populated = DotenvModule.populate(processEnv, parsedAll, options)\n\n  // handle user settings DOTENV_CONFIG_ options inside .env file(s)\n  debug = parseBoolean(processEnv.DOTENV_CONFIG_DEBUG || debug)\n  quiet = parseBoolean(processEnv.DOTENV_CONFIG_QUIET || quiet)\n\n  if (debug || !quiet) {\n    const keysCount = Object.keys(populated).length\n    const shortPaths = []\n    for (const filePath of optionPaths) {\n      try {\n        const relative = path.relative(process.cwd(), filePath)\n        shortPaths.push(relative)\n      } catch (e) {\n        if (debug) {\n          _debug(`Failed to load ${filePath} ${e.message}`)\n        }\n        lastError = e\n      }\n    }\n\n    _log(`injecting env (${keysCount}) from ${shortPaths.join(',')} ${dim(`-- tip: ${_getRandomTip()}`)}`)\n  }\n\n  if (lastError) {\n    return { parsed: parsedAll, error: lastError }\n  } else {\n    return { parsed: parsedAll }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  const vaultPath = _vaultPath(options)\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.subarray(0, 12)\n  const authTag = ciphertext.subarray(-16)\n  ciphertext = ciphertext.subarray(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    } else if (decryptionFailed) {\n      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')\n      err.code = 'DECRYPTION_FAILED'\n      throw err\n    } else {\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n  const populated = {}\n\n  if (typeof parsed !== 'object') {\n    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n    err.code = 'OBJECT_REQUIRED'\n    throw err\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n        populated[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n      populated[key] = parsed[key]\n    }\n  }\n\n  return populated\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}