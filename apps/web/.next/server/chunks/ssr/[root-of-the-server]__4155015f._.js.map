{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/ai.ts"],"sourcesContent":["import { google } from '@ai-sdk/google';\nimport { generateText, generateObject } from 'ai';\nimport { z } from 'zod';\n\n// Initialize Gemini Flash model with explicit API key\nexport const geminiFlash = google('models/gemini-1.5-flash-latest', {\n  apiKey: process.env.GOOGLE_GENERATIVE_AI_API_KEY,\n});\n\n// Schema for note analysis\nconst NoteAnalysisSchema = z.object({\n  title: z.string(),\n  summary: z.string(),\n  tags: z.array(z.string()),\n  categories: z.array(z.string()),\n  sentiment: z.string(),\n  keyPoints: z.array(z.string()),\n});\n\n// Schema for search queries\nconst SearchQuerySchema = z.object({\n  intent: z.string(),\n  keywords: z.array(z.string()),\n  filters: z.object({\n    categories: z.array(z.string()).optional(),\n    tags: z.array(z.string()).optional(),\n    dateRange: z.string().optional(),\n  }),\n});\n\n/**\n * Analyze a note transcript and extract metadata\n */\nexport async function analyzeNote(transcript: string) {\n  const prompt = `You are an AI assistant that analyzes notes and extracts structured information.\n\nNote content: \"${transcript}\"\n\nPlease analyze this content and provide:\n1. A concise, descriptive title (not just the first few words)\n2. A brief summary that captures the main ideas\n3. 3-5 relevant tags/keywords\n4. Appropriate categories\n5. The overall sentiment\n6. Key points mentioned\n\nMake sure to actually analyze and summarize the content, not just repeat it.`;\n\n  try {\n    console.log('Calling AI analysis with prompt:', prompt.substring(0, 200) + '...');\n    const result = await generateObject({\n      model: geminiFlash,\n      schema: NoteAnalysisSchema,\n      prompt,\n    });\n\n    console.log('AI analysis successful:', result.object);\n    return result.object;\n  } catch (error) {\n    console.error('AI analysis failed, using fallback:', error);\n    \n    // Check if it's a quota exceeded error\n    const isQuotaExceeded = error instanceof Error && \n      (error.message.includes('quota') || \n       error.message.includes('RESOURCE_EXHAUSTED') ||\n       error.message.includes('429'));\n    \n    if (isQuotaExceeded) {\n      console.warn('AI API quota exceeded, using enhanced fallback analysis');\n    }\n    \n    // Enhanced fallback analysis\n    const words = transcript.split(' ').filter(word => word.length > 0);\n    const firstSentence = transcript.split(/[.!?]/)[0] || transcript;\n    \n    return {\n      title: words.slice(0, 6).join(' ') + (words.length > 6 ? '...' : ''),\n      summary: firstSentence.length > 150 ? firstSentence.substring(0, 150) + '...' : firstSentence,\n      tags: ['note', 'analysis'],\n      categories: ['general'],\n      sentiment: 'neutral',\n      keyPoints: words.length > 10 ? [words.slice(0, 10).join(' '), words.slice(10, 20).join(' ')].filter(Boolean) : [transcript],\n    };\n  }\n}\n\n/**\n * Generate search suggestions based on user query\n */\nexport async function generateSearchQuery(query: string) {\n  const prompt = `\nAnalyze this search query and provide structured search parameters:\n\nQuery: \"${query}\"\n\nPlease identify:\n- The user's intent\n- Key search keywords\n- Any category or tag filters mentioned\n- Date range preferences if any\n\nMake the search parameters specific and helpful.\n`;\n\n  try {\n    const result = await generateObject({\n      model: geminiFlash,\n      schema: SearchQuerySchema,\n      prompt,\n    });\n\n    return result.object;\n  } catch (error) {\n    console.error('Error generating search query:', error);\n    return {\n      intent: 'general_search',\n      keywords: query.split(' '),\n      filters: {},\n    };\n  }\n}\n\n/**\n * Generate a response to user questions about their notes\n */\nexport async function generateNoteResponse(question: string, context: string) {\n  const prompt = `\nBased on the following note content, answer the user's question:\n\nNote Content: \"${context}\"\n\nUser Question: \"${question}\"\n\nProvide a helpful, concise answer based on the note content.\n`;\n\n  try {\n    const result = await generateText({\n      model: geminiFlash,\n      prompt,\n    });\n\n    return result.text;\n  } catch (error) {\n    console.error('Error generating response:', error);\n    return 'I apologize, but I encountered an error processing your question.';\n  }\n}\n\n/**\n * Test AI connection and API key\n */\nexport async function testAIConnection(): Promise<boolean> {\n  try {\n    console.log('Testing AI connection with model:', geminiFlash);\n    console.log('API Key present:', !!process.env.GOOGLE_GENERATIVE_AI_API_KEY);\n    console.log('API Key length:', process.env.GOOGLE_GENERATIVE_AI_API_KEY?.length);\n    \n    const result = await generateText({\n      model: geminiFlash,\n      prompt: 'Say \"Hello\" if you can read this message.',\n    });\n\n    console.log('AI test result:', result.text);\n    return result.text.includes('Hello') || result.text.length > 0;\n  } catch (error) {\n    console.error('AI connection test failed:', error);\n    console.error('Error details:', {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined,\n    });\n    return false;\n  }\n}\n\n/**\n * Transcribe audio to text (placeholder for voice transcription)\n */\nexport async function transcribeAudio(): Promise<string> {\n  // This is a placeholder - in a real implementation, you'd use:\n  // - Web Speech API for browser-based transcription\n  // - Google Speech-to-Text API\n  // - OpenAI Whisper API\n  // For now, return a mock transcript\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"This is a mock transcript from the audio. In a real implementation, this would be the actual transcribed text from the user's voice recording.\");\n    }, 1000);\n  });\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;;;;;;;;;AAGO,MAAM,cAAc,IAAA,oJAAM,EAAC,kCAAkC;IAClE,QAAQ,QAAQ,GAAG,CAAC,4BAA4B;AAClD;AAEA,2BAA2B;AAC3B,MAAM,qBAAqB,kLAAC,CAAC,MAAM,CAAC;IAClC,OAAO,kLAAC,CAAC,MAAM;IACf,SAAS,kLAAC,CAAC,MAAM;IACjB,MAAM,kLAAC,CAAC,KAAK,CAAC,kLAAC,CAAC,MAAM;IACtB,YAAY,kLAAC,CAAC,KAAK,CAAC,kLAAC,CAAC,MAAM;IAC5B,WAAW,kLAAC,CAAC,MAAM;IACnB,WAAW,kLAAC,CAAC,KAAK,CAAC,kLAAC,CAAC,MAAM;AAC7B;AAEA,4BAA4B;AAC5B,MAAM,oBAAoB,kLAAC,CAAC,MAAM,CAAC;IACjC,QAAQ,kLAAC,CAAC,MAAM;IAChB,UAAU,kLAAC,CAAC,KAAK,CAAC,kLAAC,CAAC,MAAM;IAC1B,SAAS,kLAAC,CAAC,MAAM,CAAC;QAChB,YAAY,kLAAC,CAAC,KAAK,CAAC,kLAAC,CAAC,MAAM,IAAI,QAAQ;QACxC,MAAM,kLAAC,CAAC,KAAK,CAAC,kLAAC,CAAC,MAAM,IAAI,QAAQ;QAClC,WAAW,kLAAC,CAAC,MAAM,GAAG,QAAQ;IAChC;AACF;AAKO,eAAe,YAAY,UAAkB;IAClD,MAAM,SAAS,CAAC;;eAEH,EAAE,WAAW;;;;;;;;;;4EAUgD,CAAC;IAE3E,IAAI;QACF,QAAQ,GAAG,CAAC,oCAAoC,OAAO,SAAS,CAAC,GAAG,OAAO;QAC3E,MAAM,SAAS,MAAM,IAAA,sHAAc,EAAC;YAClC,OAAO;YACP,QAAQ;YACR;QACF;QAEA,QAAQ,GAAG,CAAC,2BAA2B,OAAO,MAAM;QACpD,OAAO,OAAO,MAAM;IACtB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uCAAuC;QAErD,uCAAuC;QACvC,MAAM,kBAAkB,iBAAiB,SACvC,CAAC,MAAM,OAAO,CAAC,QAAQ,CAAC,YACvB,MAAM,OAAO,CAAC,QAAQ,CAAC,yBACvB,MAAM,OAAO,CAAC,QAAQ,CAAC,MAAM;QAEhC,IAAI,iBAAiB;YACnB,QAAQ,IAAI,CAAC;QACf;QAEA,6BAA6B;QAC7B,MAAM,QAAQ,WAAW,KAAK,CAAC,KAAK,MAAM,CAAC,CAAA,OAAQ,KAAK,MAAM,GAAG;QACjE,MAAM,gBAAgB,WAAW,KAAK,CAAC,QAAQ,CAAC,EAAE,IAAI;QAEtD,OAAO;YACL,OAAO,MAAM,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,MAAM,GAAG,IAAI,QAAQ,EAAE;YACnE,SAAS,cAAc,MAAM,GAAG,MAAM,cAAc,SAAS,CAAC,GAAG,OAAO,QAAQ;YAChF,MAAM;gBAAC;gBAAQ;aAAW;YAC1B,YAAY;gBAAC;aAAU;YACvB,WAAW;YACX,WAAW,MAAM,MAAM,GAAG,KAAK;gBAAC,MAAM,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC;gBAAM,MAAM,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC;aAAK,CAAC,MAAM,CAAC,WAAW;gBAAC;aAAW;QAC7H;IACF;AACF;AAKO,eAAe,oBAAoB,KAAa;IACrD,MAAM,SAAS,CAAC;;;QAGV,EAAE,MAAM;;;;;;;;;AAShB,CAAC;IAEC,IAAI;QACF,MAAM,SAAS,MAAM,IAAA,sHAAc,EAAC;YAClC,OAAO;YACP,QAAQ;YACR;QACF;QAEA,OAAO,OAAO,MAAM;IACtB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO;YACL,QAAQ;YACR,UAAU,MAAM,KAAK,CAAC;YACtB,SAAS,CAAC;QACZ;IACF;AACF;AAKO,eAAe,qBAAqB,QAAgB,EAAE,OAAe;IAC1E,MAAM,SAAS,CAAC;;;eAGH,EAAE,QAAQ;;gBAET,EAAE,SAAS;;;AAG3B,CAAC;IAEC,IAAI;QACF,MAAM,SAAS,MAAM,IAAA,oHAAY,EAAC;YAChC,OAAO;YACP;QACF;QAEA,OAAO,OAAO,IAAI;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;IACT;AACF;AAKO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC,qCAAqC;QACjD,QAAQ,GAAG,CAAC,oBAAoB,CAAC,CAAC,QAAQ,GAAG,CAAC,4BAA4B;QAC1E,QAAQ,GAAG,CAAC,mBAAmB,QAAQ,GAAG,CAAC,4BAA4B,EAAE;QAEzE,MAAM,SAAS,MAAM,IAAA,oHAAY,EAAC;YAChC,OAAO;YACP,QAAQ;QACV;QAEA,QAAQ,GAAG,CAAC,mBAAmB,OAAO,IAAI;QAC1C,OAAO,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,OAAO,IAAI,CAAC,MAAM,GAAG;IAC/D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,QAAQ,KAAK,CAAC,kBAAkB;YAC9B,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAClD,OAAO,iBAAiB,QAAQ,MAAM,KAAK,GAAG;QAChD;QACA,OAAO;IACT;AACF;AAKO,eAAe;IACpB,+DAA+D;IAC/D,mDAAmD;IACnD,8BAA8B;IAC9B,uBAAuB;IACvB,oCAAoC;IACpC,OAAO,IAAI,QAAQ,CAAC;QAClB,WAAW;YACT,QAAQ;QACV,GAAG;IACL;AACF","debugId":null}}]
}