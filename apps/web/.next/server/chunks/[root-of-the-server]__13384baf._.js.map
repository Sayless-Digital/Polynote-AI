{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/packages/db/src/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, uuid, jsonb, index, boolean, varchar, integer } from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\n\n// Users table for authentication\nexport const users = pgTable('users', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  email: varchar('email', { length: 255 }).notNull().unique(),\n  name: text('name').notNull(),\n  passwordHash: text('password_hash').notNull(),\n  emailVerified: boolean('email_verified').default(false).notNull(),\n  avatar: text('avatar'), // URL to user avatar\n  preferences: jsonb('preferences').$type<Record<string, unknown>>(), // User preferences\n  resetToken: text('reset_token'), // Password reset token\n  resetTokenExpiry: timestamp('reset_token_expiry'), // Password reset token expiry\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  emailIdx: index('users_email_idx').on(table.email),\n  createdAtIdx: index('users_created_at_idx').on(table.createdAt),\n  resetTokenIdx: index('users_reset_token_idx').on(table.resetToken),\n}));\n\n// User sessions table for authentication\nexport const sessions = pgTable('sessions', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  token: text('token').notNull().unique(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('sessions_user_id_idx').on(table.userId),\n  tokenIdx: index('sessions_token_idx').on(table.token),\n  expiresAtIdx: index('sessions_expires_at_idx').on(table.expiresAt),\n}));\n\n// Email verification tokens table\nexport const emailVerificationTokens = pgTable('email_verification_tokens', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  token: text('token').notNull().unique(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('email_verification_tokens_user_id_idx').on(table.userId),\n  tokenIdx: index('email_verification_tokens_token_idx').on(table.token),\n  expiresAtIdx: index('email_verification_tokens_expires_at_idx').on(table.expiresAt),\n}));\n\n// Notes table - updated with user ownership\nexport const notes = pgTable('notes', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  title: text('title').notNull(),\n  content: text('content').notNull(),\n  transcript: text('transcript'), // Original voice transcript\n  summary: text('summary'), // AI-generated summary\n  tags: jsonb('tags').$type<string[]>(), // AI-generated tags\n  categories: jsonb('categories').$type<string[]>(), // AI-generated categories\n  metadata: jsonb('metadata').$type<Record<string, unknown>>(), // Additional AI metadata\n  isPublic: boolean('is_public').default(false).notNull(), // Allow sharing notes\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('notes_user_id_idx').on(table.userId),\n  titleIdx: index('notes_title_idx').on(table.title),\n  createdAtIdx: index('notes_created_at_idx').on(table.createdAt),\n  tagsIdx: index('notes_tags_idx').on(table.tags),\n  categoriesIdx: index('notes_categories_idx').on(table.categories),\n  isPublicIdx: index('notes_is_public_idx').on(table.isPublic),\n}));\n\n// Note searches table for full-text search\nexport const noteSearches = pgTable('note_searches', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  noteId: uuid('note_id').references(() => notes.id, { onDelete: 'cascade' }),\n  searchVector: text('search_vector'), // For full-text search\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// File attachments table\nexport const attachments = pgTable('attachments', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  noteId: uuid('note_id').references(() => notes.id, { onDelete: 'cascade' }).notNull(),\n  filename: text('filename').notNull(),\n  originalName: text('original_name').notNull(),\n  size: text('size').notNull(), // File size in bytes\n  type: text('type').notNull(), // MIME type\n  url: text('url').notNull(), // Vercel Blob URL\n  content: text('content'), // Extracted text content for search\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  noteIdIdx: index('attachments_note_id_idx').on(table.noteId),\n  createdAtIdx: index('attachments_created_at_idx').on(table.createdAt),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  notes: many(notes),\n  sessions: many(sessions),\n  emailVerificationTokens: many(emailVerificationTokens),\n}));\n\nexport const sessionsRelations = relations(sessions, ({ one }) => ({\n  user: one(users, {\n    fields: [sessions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const emailVerificationTokensRelations = relations(emailVerificationTokens, ({ one }) => ({\n  user: one(users, {\n    fields: [emailVerificationTokens.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const notesRelations = relations(notes, ({ one, many }) => ({\n  user: one(users, {\n    fields: [notes.userId],\n    references: [users.id],\n  }),\n  searches: many(noteSearches),\n  attachments: many(attachments),\n}));\n\nexport const noteSearchesRelations = relations(noteSearches, ({ one }) => ({\n  note: one(notes, {\n    fields: [noteSearches.noteId],\n    references: [notes.id],\n  }),\n}));\n\nexport const attachmentsRelations = relations(attachments, ({ one }) => ({\n  note: one(notes, {\n    fields: [attachments.noteId],\n    references: [notes.id],\n  }),\n}));\n\n// User AI Settings table\nexport const userAISettings = pgTable('user_ai_settings', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  \n  // API Configuration\n  provider: varchar('provider', { length: 50 }).notNull().default('google'), // 'google', 'openai', 'anthropic'\n  apiKey: text('api_key'), // Encrypted API key\n  model: varchar('model', { length: 100 }).notNull().default('gemini-1.5-flash-latest'),\n  \n  // Usage Tracking\n  totalTokensUsed: integer('total_tokens_used').default(0).notNull(),\n  totalRequests: integer('total_requests').default(0).notNull(),\n  lastUsedAt: timestamp('last_used_at'),\n  \n  // Settings\n  enabledAnalyses: jsonb('enabled_analyses').$type<string[]>().default(['title', 'summary', 'key_points', 'categories', 'tags']),\n  analysisTimeout: integer('analysis_timeout').default(30000), // 30 seconds\n  cacheEnabled: boolean('cache_enabled').default(true),\n  cacheTTL: integer('cache_ttl').default(86400), // 24 hours in seconds\n  \n  // Metadata\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('user_ai_settings_user_id_idx').on(table.userId),\n  providerIdx: index('user_ai_settings_provider_idx').on(table.provider),\n  lastUsedIdx: index('user_ai_settings_last_used_idx').on(table.lastUsedAt),\n}));\n\n// Token Usage Log table for detailed tracking\nexport const tokenUsageLogs = pgTable('token_usage_logs', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  noteId: uuid('note_id'), // Optional reference to note\n  \n  // Request details\n  provider: varchar('provider', { length: 50 }).notNull(),\n  model: varchar('model', { length: 100 }).notNull(),\n  analysisType: varchar('analysis_type', { length: 50 }).notNull(),\n  \n  // Token usage\n  inputTokens: integer('input_tokens').default(0).notNull(),\n  outputTokens: integer('output_tokens').default(0).notNull(),\n  totalTokens: integer('total_tokens').default(0).notNull(),\n  \n  // Request metadata\n  requestDuration: integer('request_duration'), // milliseconds\n  success: boolean('success').default(true).notNull(),\n  errorMessage: text('error_message'),\n  \n  // Cost tracking (for future billing)\n  estimatedCost: integer('estimated_cost'), // in cents\n  \n  createdAt: timestamp('created_at').defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('token_usage_logs_user_id_idx').on(table.userId),\n  noteIdIdx: index('token_usage_logs_note_id_idx').on(table.noteId),\n  createdAtIdx: index('token_usage_logs_created_at_idx').on(table.createdAt),\n  providerIdx: index('token_usage_logs_provider_idx').on(table.provider),\n}));\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type Session = typeof sessions.$inferSelect;\nexport type NewSession = typeof sessions.$inferInsert;\nexport type EmailVerificationToken = typeof emailVerificationTokens.$inferSelect;\nexport type NewEmailVerificationToken = typeof emailVerificationTokens.$inferInsert;\nexport type Note = typeof notes.$inferSelect;\nexport type NewNote = typeof notes.$inferInsert;\nexport type NoteSearch = typeof noteSearches.$inferSelect;\nexport type NewNoteSearch = typeof noteSearches.$inferInsert;\nexport type Attachment = typeof attachments.$inferSelect;\nexport type NewAttachment = typeof attachments.$inferInsert;\nexport type UserAISettings = typeof userAISettings.$inferSelect;\nexport type NewUserAISettings = typeof userAISettings.$inferInsert;\nexport type TokenUsageLog = typeof tokenUsageLogs.$inferSelect;\nexport type NewTokenUsageLog = typeof tokenUsageLogs.$inferInsert;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 337, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/packages/db/src/index.ts"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { config } from 'dotenv';\nimport { resolve } from 'path';\nimport * as schema from './schema';\n\n// Load environment variables from the root .env.local file\nconfig({ path: resolve(__dirname, '../../../.env.local') });\n\nconst sql = neon(process.env.DATABASE_URL!);\nexport const db = drizzle(sql, { schema });\n\nexport * from './schema';\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,2DAA2D;AAC3D,IAAA,+GAAM,EAAC;IAAE,MAAM,IAAA,4GAAO,6DAAY;AAAuB;AAEzD,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;AAClC,MAAM,KAAK,IAAA,qKAAO,EAAC,KAAK;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/auth.ts"],"sourcesContent":["import { cookies } from 'next/headers';\nimport { db, users, sessions, emailVerificationTokens } from '@polynote/db';\nimport { eq, and, gt } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\nimport { randomBytes } from 'crypto';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  emailVerified: boolean;\n  avatar?: string;\n  preferences?: Record<string, unknown>;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Session {\n  id: string;\n  userId: string;\n  token: string;\n  expiresAt: Date;\n  createdAt: Date;\n}\n\n// Password hashing\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\n// Session management\nexport async function createSession(userId: string): Promise<Session> {\n  const token = randomBytes(32).toString('hex');\n  const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days\n\n  const [session] = await db.insert(sessions).values({\n    userId,\n    token,\n    expiresAt,\n  }).returning();\n\n  return session;\n}\n\nexport async function getSession(token: string): Promise<Session | null> {\n  const [session] = await db\n    .select()\n    .from(sessions)\n    .where(and(\n      eq(sessions.token, token),\n      gt(sessions.expiresAt, new Date())\n    ))\n    .limit(1);\n\n  return session || null;\n}\n\nexport async function deleteSession(token: string): Promise<void> {\n  await db.delete(sessions).where(eq(sessions.token, token));\n}\n\n// Email verification\nexport async function createEmailVerificationToken(userId: string): Promise<string> {\n  const token = randomBytes(32).toString('hex');\n  const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n\n  await db.insert(emailVerificationTokens).values({\n    userId,\n    token,\n    expiresAt,\n  });\n\n  return token;\n}\n\nexport async function verifyEmailToken(token: string): Promise<string | null> {\n  const [verificationToken] = await db\n    .select()\n    .from(emailVerificationTokens)\n    .where(and(\n      eq(emailVerificationTokens.token, token),\n      gt(emailVerificationTokens.expiresAt, new Date())\n    ))\n    .limit(1);\n\n  if (!verificationToken) {\n    return null;\n  }\n\n  // Mark user as verified\n  await db.update(users)\n    .set({ emailVerified: true })\n    .where(eq(users.id, verificationToken.userId));\n\n  // Delete the verification token\n  await db.delete(emailVerificationTokens)\n    .where(eq(emailVerificationTokens.token, token));\n\n  return verificationToken.userId;\n}\n\n// User management\nexport async function getUserByEmail(email: string): Promise<User | null> {\n  const [user] = await db\n    .select()\n    .from(users)\n    .where(eq(users.email, email))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function getUserByEmailWithPassword(email: string): Promise<(User & { passwordHash: string }) | null> {\n  const [user] = await db\n    .select({\n      id: users.id,\n      email: users.email,\n      name: users.name,\n      emailVerified: users.emailVerified,\n      avatar: users.avatar,\n      preferences: users.preferences,\n      createdAt: users.createdAt,\n      updatedAt: users.updatedAt,\n      passwordHash: users.passwordHash,\n    })\n    .from(users)\n    .where(eq(users.email, email))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function getUserById(id: string): Promise<User | null> {\n  const [user] = await db\n    .select()\n    .from(users)\n    .where(eq(users.id, id))\n    .limit(1);\n\n  return user || null;\n}\n\nexport async function createUser(email: string, name: string, password: string): Promise<User> {\n  const passwordHash = await hashPassword(password);\n  \n  const [user] = await db.insert(users).values({\n    email,\n    name,\n    passwordHash,\n  }).returning();\n\n  return user;\n}\n\n// Authentication helpers\nexport async function getCurrentUser(): Promise<User | null> {\n  const cookieStore = await cookies();\n  const sessionToken = cookieStore.get('session')?.value;\n  \n  if (!sessionToken) {\n    return null;\n  }\n\n  const session = await getSession(sessionToken);\n  if (!session) {\n    return null;\n  }\n\n  return getUserById(session.userId);\n}\n\nexport async function requireAuth(): Promise<User> {\n  const user = await getCurrentUser();\n  if (!user) {\n    throw new Error('Authentication required');\n  }\n  return user;\n}\n\n// Cookie helpers\nexport async function setSessionCookie(token: string) {\n  const cookieStore = await cookies();\n  cookieStore.set('session', token, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'lax',\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n    path: '/',\n  });\n}\n\nexport async function clearSessionCookie() {\n  const cookieStore = await cookies();\n  cookieStore.delete('session');\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 551, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/ai-providers.ts"],"sourcesContent":["// Client-safe AI providers configuration\n// This file contains no server-side dependencies and can be safely imported in client components\n\nexport const AI_PROVIDERS = {\n  google: {\n    name: 'Google Gemini',\n    models: [\n      { id: 'gemini-2.0-flash-lite', name: 'Gemini 2.0 Flash Lite', costPer1kTokens: 0.0375 },\n      { id: 'gemini-1.5-flash-latest', name: 'Gemini 1.5 Flash (Latest)', costPer1kTokens: 0.075 },\n      { id: 'gemini-1.5-pro-latest', name: 'Gemini 1.5 Pro (Latest)', costPer1kTokens: 1.25 },\n      { id: 'gemini-1.0-pro', name: 'Gemini 1.0 Pro', costPer1kTokens: 0.5 },\n    ],\n    apiKeyUrl: 'https://makersuite.google.com/app/apikey',\n    documentation: 'https://ai.google.dev/gemini-api/docs',\n  },\n  openai: {\n    name: 'OpenAI',\n    models: [\n      { id: 'gpt-4o', name: 'GPT-4o', costPer1kTokens: 5.0 },\n      { id: 'gpt-4o-mini', name: 'GPT-4o Mini', costPer1kTokens: 0.15 },\n      { id: 'gpt-4-turbo', name: 'GPT-4 Turbo', costPer1kTokens: 10.0 },\n      { id: 'gpt-3.5-turbo', name: 'GPT-3.5 Turbo', costPer1kTokens: 0.5 },\n    ],\n    apiKeyUrl: 'https://platform.openai.com/api-keys',\n    documentation: 'https://platform.openai.com/docs',\n  },\n  anthropic: {\n    name: 'Anthropic Claude',\n    models: [\n      { id: 'claude-3-5-sonnet-20241022', name: 'Claude 3.5 Sonnet', costPer1kTokens: 3.0 },\n      { id: 'claude-3-5-haiku-20241022', name: 'Claude 3.5 Haiku', costPer1kTokens: 0.8 },\n      { id: 'claude-3-opus-20240229', name: 'Claude 3 Opus', costPer1kTokens: 15.0 },\n    ],\n    apiKeyUrl: 'https://console.anthropic.com/',\n    documentation: 'https://docs.anthropic.com/',\n  },\n  'ai-gateway': {\n    name: 'Vercel AI Gateway',\n    models: [\n      // Google models\n      { id: 'google/gemini-2.0-flash-lite', name: 'Google Gemini 2.0 Flash Lite', costPer1kTokens: 0.0375 },\n      { id: 'google/gemini-1.5-flash-latest', name: 'Google Gemini 1.5 Flash', costPer1kTokens: 0.075 },\n      { id: 'google/gemini-1.5-pro-latest', name: 'Google Gemini 1.5 Pro', costPer1kTokens: 1.25 },\n      { id: 'google/gemini-1.0-pro', name: 'Google Gemini 1.0 Pro', costPer1kTokens: 0.5 },\n      \n      // OpenAI models\n      { id: 'openai/gpt-4o', name: 'OpenAI GPT-4o', costPer1kTokens: 5.0 },\n      { id: 'openai/gpt-4o-mini', name: 'OpenAI GPT-4o Mini', costPer1kTokens: 0.15 },\n      { id: 'openai/gpt-4-turbo', name: 'OpenAI GPT-4 Turbo', costPer1kTokens: 10.0 },\n      { id: 'openai/gpt-4', name: 'OpenAI GPT-4', costPer1kTokens: 30.0 },\n      { id: 'openai/gpt-3.5-turbo', name: 'OpenAI GPT-3.5 Turbo', costPer1kTokens: 0.5 },\n      { id: 'openai/o1-preview', name: 'OpenAI o1 Preview', costPer1kTokens: 15.0 },\n      { id: 'openai/o1-mini', name: 'OpenAI o1 Mini', costPer1kTokens: 3.0 },\n      \n      // Anthropic models\n      { id: 'anthropic/claude-3-5-sonnet-20241022', name: 'Anthropic Claude 3.5 Sonnet', costPer1kTokens: 3.0 },\n      { id: 'anthropic/claude-sonnet-4', name: 'Anthropic Claude Sonnet 4', costPer1kTokens: 3.0 },\n      { id: 'anthropic/claude-3-5-haiku-20241022', name: 'Anthropic Claude 3.5 Haiku', costPer1kTokens: 0.8 },\n      { id: 'anthropic/claude-3-opus-20240229', name: 'Anthropic Claude 3 Opus', costPer1kTokens: 15.0 },\n      \n      // xAI models\n      { id: 'xai/grok-beta', name: 'xAI Grok Beta', costPer1kTokens: 0.5 },\n      { id: 'xai/grok-4', name: 'xAI Grok 4', costPer1kTokens: 0.5 },\n      \n      // Cohere models\n      { id: 'cohere/command', name: 'Cohere Command', costPer1kTokens: 1.0 },\n      { id: 'cohere/command-light', name: 'Cohere Command Light', costPer1kTokens: 0.5 },\n      \n      // Mistral models\n      { id: 'mistral/mistral-large', name: 'Mistral Large', costPer1kTokens: 2.0 },\n      { id: 'mistral/mistral-medium', name: 'Mistral Medium', costPer1kTokens: 1.0 },\n      { id: 'mistral/mistral-small', name: 'Mistral Small', costPer1kTokens: 0.5 },\n      \n      // Perplexity models\n      { id: 'perplexity/llama-3.1-sonar-large-128k-online', name: 'Perplexity Llama 3.1 Sonar Large', costPer1kTokens: 1.0 },\n      { id: 'perplexity/llama-3.1-sonar-small-128k-online', name: 'Perplexity Llama 3.1 Sonar Small', costPer1kTokens: 0.5 },\n      \n      // DeepSeek models\n      { id: 'deepseek/deepseek-chat', name: 'DeepSeek Chat', costPer1kTokens: 0.14 },\n      { id: 'deepseek/deepseek-coder', name: 'DeepSeek Coder', costPer1kTokens: 0.14 },\n    ],\n    apiKeyUrl: 'https://vercel.com/ai-gateway',\n    documentation: 'https://vercel.com/docs/ai-gateway',\n    isGateway: true,\n  },\n} as const;\n\nexport type AIProvider = keyof typeof AI_PROVIDERS;\nexport type AIModel = typeof AI_PROVIDERS[AIProvider]['models'][number];\n"],"names":[],"mappings":"AAAA,yCAAyC;AACzC,iGAAiG;;;;;AAE1F,MAAM,eAAe;IAC1B,QAAQ;QACN,MAAM;QACN,QAAQ;YACN;gBAAE,IAAI;gBAAyB,MAAM;gBAAyB,iBAAiB;YAAO;YACtF;gBAAE,IAAI;gBAA2B,MAAM;gBAA6B,iBAAiB;YAAM;YAC3F;gBAAE,IAAI;gBAAyB,MAAM;gBAA2B,iBAAiB;YAAK;YACtF;gBAAE,IAAI;gBAAkB,MAAM;gBAAkB,iBAAiB;YAAI;SACtE;QACD,WAAW;QACX,eAAe;IACjB;IACA,QAAQ;QACN,MAAM;QACN,QAAQ;YACN;gBAAE,IAAI;gBAAU,MAAM;gBAAU,iBAAiB;YAAI;YACrD;gBAAE,IAAI;gBAAe,MAAM;gBAAe,iBAAiB;YAAK;YAChE;gBAAE,IAAI;gBAAe,MAAM;gBAAe,iBAAiB;YAAK;YAChE;gBAAE,IAAI;gBAAiB,MAAM;gBAAiB,iBAAiB;YAAI;SACpE;QACD,WAAW;QACX,eAAe;IACjB;IACA,WAAW;QACT,MAAM;QACN,QAAQ;YACN;gBAAE,IAAI;gBAA8B,MAAM;gBAAqB,iBAAiB;YAAI;YACpF;gBAAE,IAAI;gBAA6B,MAAM;gBAAoB,iBAAiB;YAAI;YAClF;gBAAE,IAAI;gBAA0B,MAAM;gBAAiB,iBAAiB;YAAK;SAC9E;QACD,WAAW;QACX,eAAe;IACjB;IACA,cAAc;QACZ,MAAM;QACN,QAAQ;YACN,gBAAgB;YAChB;gBAAE,IAAI;gBAAgC,MAAM;gBAAgC,iBAAiB;YAAO;YACpG;gBAAE,IAAI;gBAAkC,MAAM;gBAA2B,iBAAiB;YAAM;YAChG;gBAAE,IAAI;gBAAgC,MAAM;gBAAyB,iBAAiB;YAAK;YAC3F;gBAAE,IAAI;gBAAyB,MAAM;gBAAyB,iBAAiB;YAAI;YAEnF,gBAAgB;YAChB;gBAAE,IAAI;gBAAiB,MAAM;gBAAiB,iBAAiB;YAAI;YACnE;gBAAE,IAAI;gBAAsB,MAAM;gBAAsB,iBAAiB;YAAK;YAC9E;gBAAE,IAAI;gBAAsB,MAAM;gBAAsB,iBAAiB;YAAK;YAC9E;gBAAE,IAAI;gBAAgB,MAAM;gBAAgB,iBAAiB;YAAK;YAClE;gBAAE,IAAI;gBAAwB,MAAM;gBAAwB,iBAAiB;YAAI;YACjF;gBAAE,IAAI;gBAAqB,MAAM;gBAAqB,iBAAiB;YAAK;YAC5E;gBAAE,IAAI;gBAAkB,MAAM;gBAAkB,iBAAiB;YAAI;YAErE,mBAAmB;YACnB;gBAAE,IAAI;gBAAwC,MAAM;gBAA+B,iBAAiB;YAAI;YACxG;gBAAE,IAAI;gBAA6B,MAAM;gBAA6B,iBAAiB;YAAI;YAC3F;gBAAE,IAAI;gBAAuC,MAAM;gBAA8B,iBAAiB;YAAI;YACtG;gBAAE,IAAI;gBAAoC,MAAM;gBAA2B,iBAAiB;YAAK;YAEjG,aAAa;YACb;gBAAE,IAAI;gBAAiB,MAAM;gBAAiB,iBAAiB;YAAI;YACnE;gBAAE,IAAI;gBAAc,MAAM;gBAAc,iBAAiB;YAAI;YAE7D,gBAAgB;YAChB;gBAAE,IAAI;gBAAkB,MAAM;gBAAkB,iBAAiB;YAAI;YACrE;gBAAE,IAAI;gBAAwB,MAAM;gBAAwB,iBAAiB;YAAI;YAEjF,iBAAiB;YACjB;gBAAE,IAAI;gBAAyB,MAAM;gBAAiB,iBAAiB;YAAI;YAC3E;gBAAE,IAAI;gBAA0B,MAAM;gBAAkB,iBAAiB;YAAI;YAC7E;gBAAE,IAAI;gBAAyB,MAAM;gBAAiB,iBAAiB;YAAI;YAE3E,oBAAoB;YACpB;gBAAE,IAAI;gBAAgD,MAAM;gBAAoC,iBAAiB;YAAI;YACrH;gBAAE,IAAI;gBAAgD,MAAM;gBAAoC,iBAAiB;YAAI;YAErH,kBAAkB;YAClB;gBAAE,IAAI;gBAA0B,MAAM;gBAAiB,iBAAiB;YAAK;YAC7E;gBAAE,IAAI;gBAA2B,MAAM;gBAAkB,iBAAiB;YAAK;SAChF;QACD,WAAW;QACX,eAAe;QACf,WAAW;IACb;AACF","debugId":null}},
    {"offset": {"line": 787, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/lib/ai-config.ts"],"sourcesContent":["import { db } from '@polynote/db';\nimport { userAISettings, tokenUsageLogs, UserAISettings, NewTokenUsageLog } from '@polynote/db';\nimport { eq, and, gte } from 'drizzle-orm';\nimport crypto from 'crypto';\nimport { AI_PROVIDERS } from './ai-providers';\n\n// Type for decrypted user settings\nexport interface DecryptedUserAISettings extends Omit<UserAISettings, 'apiKey'> {\n  apiKey: string;\n}\n\n// Encryption key for API keys (in production, use a proper key management system)\nconst ENCRYPTION_KEY = process.env.API_KEY_ENCRYPTION_KEY || 'default-encryption-key-change-in-production';\nconst ALGORITHM = 'aes-256-gcm';\n\n// Derive key from password for AES-256-GCM\nfunction getKey(): Buffer {\n  return crypto.scryptSync(ENCRYPTION_KEY, 'salt', 32);\n}\n\n/**\n * Encrypt API key for storage\n */\nfunction encryptApiKey(apiKey: string): string {\n  const iv = crypto.randomBytes(16);\n  const key = getKey();\n  const cipher = crypto.createCipheriv(ALGORITHM, key, iv);\n\n  let encrypted = cipher.update(apiKey, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n\n  const authTag = cipher.getAuthTag();\n  return iv.toString('hex') + ':' + encrypted + ':' + authTag.toString('hex');\n}\n\n/**\n * Decrypt API key for use (supports both old and new formats)\n */\nfunction decryptApiKey(encryptedApiKey: string): string {\n  const parts = encryptedApiKey.split(':');\n\n  // Handle new format (3 parts: iv:encrypted:authTag)\n  if (parts.length === 3) {\n    const iv = Buffer.from(parts[0], 'hex');\n    const encrypted = parts[1];\n    const authTag = Buffer.from(parts[2], 'hex');\n    const key = getKey();\n\n    const decipher = crypto.createDecipheriv(ALGORITHM, key, iv);\n    decipher.setAuthTag(authTag);\n\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    return decrypted;\n  }\n\n  // Handle old format (2 parts: iv:encrypted) for backward compatibility\n  if (parts.length === 2) {\n    const iv = Buffer.from(parts[0], 'hex');\n    const encrypted = parts[1];\n    const decipher = crypto.createDecipher(ALGORITHM, Buffer.from(ENCRYPTION_KEY));\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    return decrypted;\n  }\n\n  throw new Error('Invalid encrypted API key format');\n}\n\n/**\n * Get user's AI settings\n */\nexport async function getUserAISettings(userId: string): Promise<DecryptedUserAISettings | null> {\n  try {\n    const [settings] = await db\n      .select()\n      .from(userAISettings)\n      .where(eq(userAISettings.userId, userId))\n      .limit(1);\n\n    if (settings && settings.apiKey) {\n      // Decrypt the API key\n      settings.apiKey = decryptApiKey(settings.apiKey);\n    }\n\n    return settings || null;\n  } catch (error) {\n    console.error('Error getting user AI settings:', error);\n    return null;\n  }\n}\n\n/**\n * Create or update user's AI settings\n */\nexport async function upsertUserAISettings(\n  userId: string,\n  settings: {\n    provider?: string;\n    apiKey?: string;\n    model?: string;\n    enabledAnalyses?: string[];\n    analysisTimeout?: number;\n    cacheEnabled?: boolean;\n    cacheTTL?: number;\n  }\n): Promise<DecryptedUserAISettings | null> {\n  try {\n    const existingSettings = await getUserAISettings(userId);\n    \n    const settingsData = {\n      userId,\n      provider: settings.provider || 'google',\n      apiKey: settings.apiKey ? encryptApiKey(settings.apiKey) : existingSettings?.apiKey,\n      model: settings.model || 'gemini-1.5-flash-latest',\n      enabledAnalyses: settings.enabledAnalyses || ['title', 'summary', 'key_points', 'categories', 'tags'],\n      analysisTimeout: settings.analysisTimeout || 30000,\n      cacheEnabled: settings.cacheEnabled !== undefined ? settings.cacheEnabled : true,\n      cacheTTL: settings.cacheTTL || 86400,\n      updatedAt: new Date(),\n    };\n\n    if (existingSettings) {\n      const [updated] = await db\n        .update(userAISettings)\n        .set(settingsData)\n        .where(eq(userAISettings.userId, userId))\n        .returning();\n      \n      if (updated && updated.apiKey) {\n        updated.apiKey = decryptApiKey(updated.apiKey);\n      }\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(userAISettings)\n        .values(settingsData)\n        .returning();\n      \n      if (created && created.apiKey) {\n        created.apiKey = decryptApiKey(created.apiKey);\n      }\n      return created;\n    }\n  } catch (error) {\n    console.error('Error upserting user AI settings:', error);\n    return null;\n  }\n}\n\n/**\n * Log token usage\n */\nexport async function logTokenUsage(\n  userId: string,\n  usage: {\n    noteId?: string;\n    provider: string;\n    model: string;\n    analysisType: string;\n    inputTokens: number;\n    outputTokens: number;\n    totalTokens: number;\n    requestDuration?: number;\n    success: boolean;\n    errorMessage?: string;\n    estimatedCost?: number;\n  }\n): Promise<void> {\n  try {\n    const logData: NewTokenUsageLog = {\n      userId,\n      noteId: usage.noteId,\n      provider: usage.provider,\n      model: usage.model,\n      analysisType: usage.analysisType,\n      inputTokens: usage.inputTokens,\n      outputTokens: usage.outputTokens,\n      totalTokens: usage.totalTokens,\n      requestDuration: usage.requestDuration,\n      success: usage.success,\n      errorMessage: usage.errorMessage,\n      estimatedCost: usage.estimatedCost,\n    };\n\n    await db.insert(tokenUsageLogs).values(logData);\n\n    // Update user's total usage\n    if (usage.success) {\n      await db\n        .update(userAISettings)\n        .set({\n          totalTokensUsed: db.sql`${userAISettings.totalTokensUsed} + ${usage.totalTokens}`,\n          totalRequests: db.sql`${userAISettings.totalRequests} + 1`,\n          lastUsedAt: new Date(),\n        })\n        .where(eq(userAISettings.userId, userId));\n    }\n  } catch (error) {\n    console.error('Error logging token usage:', error);\n  }\n}\n\n/**\n * Get user's token usage statistics\n */\nexport async function getUserTokenUsage(userId: string, days: number = 30) {\n  try {\n    const since = new Date();\n    since.setDate(since.getDate() - days);\n\n    const usage = await db\n      .select()\n      .from(tokenUsageLogs)\n      .where(\n        and(\n          eq(tokenUsageLogs.userId, userId),\n          gte(tokenUsageLogs.createdAt, since)\n        )\n      );\n\n    const stats = {\n      totalRequests: usage.length,\n      totalTokens: usage.reduce((sum, log) => sum + log.totalTokens, 0),\n      totalInputTokens: usage.reduce((sum, log) => sum + log.inputTokens, 0),\n      totalOutputTokens: usage.reduce((sum, log) => sum + log.outputTokens, 0),\n      successfulRequests: usage.filter(log => log.success).length,\n      failedRequests: usage.filter(log => !log.success).length,\n      averageRequestDuration: usage.length > 0 ? usage.reduce((sum, log) => sum + (log.requestDuration || 0), 0) / usage.length : 0,\n      estimatedTotalCost: usage.reduce((sum, log) => sum + (log.estimatedCost || 0), 0) / 100, // Convert from cents to dollars\n      byProvider: {} as Record<string, any>,\n      byModel: {} as Record<string, any>,\n      byAnalysisType: {} as Record<string, any>,\n    };\n\n    // Group by provider\n    usage.forEach(log => {\n      if (!stats.byProvider[log.provider]) {\n        stats.byProvider[log.provider] = { requests: 0, tokens: 0, cost: 0 };\n      }\n      stats.byProvider[log.provider].requests++;\n      stats.byProvider[log.provider].tokens += log.totalTokens;\n      stats.byProvider[log.provider].cost += (log.estimatedCost || 0) / 100; // Convert from cents to dollars\n    });\n\n    // Group by model\n    usage.forEach(log => {\n      if (!stats.byModel[log.model]) {\n        stats.byModel[log.model] = { requests: 0, tokens: 0, cost: 0 };\n      }\n      stats.byModel[log.model].requests++;\n      stats.byModel[log.model].tokens += log.totalTokens;\n      stats.byModel[log.model].cost += (log.estimatedCost || 0) / 100; // Convert from cents to dollars\n    });\n\n    // Group by analysis type\n    usage.forEach(log => {\n      if (!stats.byAnalysisType[log.analysisType]) {\n        stats.byAnalysisType[log.analysisType] = { requests: 0, tokens: 0, cost: 0 };\n      }\n      stats.byAnalysisType[log.analysisType].requests++;\n      stats.byAnalysisType[log.analysisType].tokens += log.totalTokens;\n      stats.byAnalysisType[log.analysisType].cost += (log.estimatedCost || 0) / 100; // Convert from cents to dollars\n    });\n\n    return stats;\n  } catch (error) {\n    console.error('Error getting user token usage:', error);\n    return null;\n  }\n}\n\n\n/**\n * Estimate cost for token usage\n */\nexport function estimateCost(provider: string, model: string, tokens: number): number {\n  const providerInfo = AI_PROVIDERS[provider as keyof typeof AI_PROVIDERS];\n  if (!providerInfo) return 0;\n\n  const modelInfo = providerInfo.models.find(m => m.id === model);\n  if (!modelInfo) return 0;\n\n  // Return cost in cents for storage\n  return Math.round((tokens / 1000) * modelInfo.costPer1kTokens * 100);\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1016, "column": 0}, "map": {"version":3,"sources":["file:///home/mercury/Documents/Git%20Projects/Polynote-AI/apps/web/src/app/api/ai-settings/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/auth';\nimport { getUserAISettings, upsertUserAISettings, getUserTokenUsage } from '@/lib/ai-config';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const includeUsage = searchParams.get('includeUsage') === 'true';\n    const days = parseInt(searchParams.get('days') || '30');\n\n    const settings = await getUserAISettings(user.id);\n    let usage = null;\n\n    if (includeUsage && settings) {\n      usage = await getUserTokenUsage(user.id, days);\n    }\n\n    return NextResponse.json({\n      success: true,\n      settings,\n      usage,\n    });\n  } catch (error) {\n    console.error('Error getting AI settings:', error);\n    return NextResponse.json(\n      { error: 'Failed to get AI settings' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { provider, apiKey, model, enabledAnalyses, analysisTimeout, cacheEnabled, cacheTTL } = body;\n\n    // Validate required fields\n    if (!provider || !apiKey || !model) {\n      return NextResponse.json(\n        { error: 'Provider, API key, and model are required' },\n        { status: 400 }\n      );\n    }\n\n    const settings = await upsertUserAISettings(user.id, {\n      provider,\n      apiKey,\n      model,\n      enabledAnalyses,\n      analysisTimeout,\n      cacheEnabled,\n      cacheTTL,\n    });\n\n    if (!settings) {\n      return NextResponse.json(\n        { error: 'Failed to save AI settings' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      settings: {\n        ...settings,\n        apiKey: settings.apiKey ? '***' + settings.apiKey.slice(-4) : null, // Mask API key in response\n      },\n    });\n  } catch (error) {\n    console.error('Error saving AI settings:', error);\n    return NextResponse.json(\n      { error: 'Failed to save AI settings' },\n      { status: 500 }\n    );\n  }\n}\n\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;;;;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,OAAO,MAAM,IAAA,qJAAc;QACjC,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,eAAe,aAAa,GAAG,CAAC,oBAAoB;QAC1D,MAAM,OAAO,SAAS,aAAa,GAAG,CAAC,WAAW;QAElD,MAAM,WAAW,MAAM,IAAA,gKAAiB,EAAC,KAAK,EAAE;QAChD,IAAI,QAAQ;QAEZ,IAAI,gBAAgB,UAAU;YAC5B,QAAQ,MAAM,IAAA,gKAAiB,EAAC,KAAK,EAAE,EAAE;QAC3C;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,IAAA,qJAAc;QACjC,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,eAAe,EAAE,eAAe,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG;QAE9F,2BAA2B;QAC3B,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO;YAClC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4C,GACrD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW,MAAM,IAAA,mKAAoB,EAAC,KAAK,EAAE,EAAE;YACnD;YACA;YACA;YACA;YACA;YACA;YACA;QACF;QAEA,IAAI,CAAC,UAAU;YACb,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6B,GACtC;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,UAAU;gBACR,GAAG,QAAQ;gBACX,QAAQ,SAAS,MAAM,GAAG,QAAQ,SAAS,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK;YAChE;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}