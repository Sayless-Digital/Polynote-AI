"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/harden-react-markdown";
exports.ids = ["vendor-chunks/harden-react-markdown"];
exports.modules = {

/***/ "(ssr)/../../node_modules/harden-react-markdown/dist/index.js":
/*!**************************************************************!*\
  !*** ../../node_modules/harden-react-markdown/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* __next_internal_client_entry_do_not_use__  cjs */ \nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (void 0) && (void 0).__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = hardenReactMarkdown;\nvar jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar react_1 = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\nfunction hardenReactMarkdown(MarkdownComponent) {\n    return function HardenedReactMarkdown(props) {\n        var _a = props.defaultOrigin, defaultOrigin = _a === void 0 ? \"\" : _a, _b = props.allowedLinkPrefixes, allowedLinkPrefixes = _b === void 0 ? [] : _b, _c = props.allowedImagePrefixes, allowedImagePrefixes = _c === void 0 ? [] : _c, userComponents = props.components, reactMarkdownProps = __rest(props, [\n            \"defaultOrigin\",\n            \"allowedLinkPrefixes\",\n            \"allowedImagePrefixes\",\n            \"components\"\n        ]);\n        // Only require defaultOrigin if we have specific prefixes (not wildcard only)\n        var hasSpecificLinkPrefixes = allowedLinkPrefixes.length && !allowedLinkPrefixes.every(function(p) {\n            return p === \"*\";\n        });\n        var hasSpecificImagePrefixes = allowedImagePrefixes.length && !allowedImagePrefixes.every(function(p) {\n            return p === \"*\";\n        });\n        if (!defaultOrigin && (hasSpecificLinkPrefixes || hasSpecificImagePrefixes)) {\n            throw new Error(\"defaultOrigin is required when allowedLinkPrefixes or allowedImagePrefixes are provided\");\n        }\n        var parseUrl = function(url) {\n            if (typeof url !== \"string\") return null;\n            try {\n                // Try to parse as absolute URL first\n                var urlObject = new URL(url);\n                return urlObject;\n            } catch (error) {\n                // If that fails and we have a defaultOrigin, try with it\n                if (defaultOrigin) {\n                    try {\n                        var urlObject = new URL(url, defaultOrigin);\n                        return urlObject;\n                    } catch (error) {\n                        return null;\n                    }\n                }\n                return null;\n            }\n        };\n        var isPathRelativeUrl = function(url) {\n            if (typeof url !== \"string\") return false;\n            return url.startsWith(\"/\");\n        };\n        var transformUrl = function(url, allowedPrefixes) {\n            if (!url) return null;\n            var parsedUrl = parseUrl(url);\n            if (!parsedUrl) return null;\n            // Check for wildcard - allow all URLs\n            if (allowedPrefixes.includes(\"*\")) {\n                var inputWasRelative_1 = isPathRelativeUrl(url);\n                var urlString_1 = parseUrl(url);\n                if (urlString_1) {\n                    if (inputWasRelative_1) {\n                        return urlString_1.pathname + urlString_1.search + urlString_1.hash;\n                    }\n                    return urlString_1.href;\n                }\n                return null;\n            }\n            // If the input is path relative, we output a path relative URL as well,\n            // however, we always run the same checks on an absolute URL and we\n            // always rescronstruct the output from the parsed URL to ensure that\n            // the output is always a valid URL.\n            var inputWasRelative = isPathRelativeUrl(url);\n            var urlString = parseUrl(url);\n            if (urlString && allowedPrefixes.some(function(prefix) {\n                var parsedPrefix = parseUrl(prefix);\n                if (!parsedPrefix) {\n                    return false;\n                }\n                if (parsedPrefix.origin !== urlString.origin) {\n                    return false;\n                }\n                return urlString.href.startsWith(parsedPrefix.href);\n            })) {\n                if (inputWasRelative) {\n                    return urlString.pathname + urlString.search + urlString.hash;\n                }\n                return urlString.href;\n            }\n            return null;\n        };\n        var hardenedComponents = {\n            a: function(_a) {\n                var href = _a.href, children = _a.children, node = _a.node, props = __rest(_a, [\n                    \"href\",\n                    \"children\",\n                    \"node\"\n                ]);\n                var transformedUrl = transformUrl(href, allowedLinkPrefixes);\n                if (transformedUrl !== null) {\n                    // If user provided a custom 'a' component, use it with the transformed URL\n                    if (userComponents === null || userComponents === void 0 ? void 0 : userComponents.a) {\n                        return (0, react_1.createElement)(userComponents.a, __assign({\n                            href: transformedUrl,\n                            children: children,\n                            node: node,\n                            target: \"_blank\",\n                            rel: \"noopener noreferrer\"\n                        }, props));\n                    }\n                    // Otherwise use default anchor with security attributes\n                    return (0, jsx_runtime_1.jsx)(\"a\", __assign({\n                        href: transformedUrl\n                    }, props, {\n                        target: \"_blank\",\n                        rel: \"noopener noreferrer\",\n                        children: children\n                    }));\n                }\n                return (0, jsx_runtime_1.jsxs)(\"span\", {\n                    className: \"text-gray-500\",\n                    title: \"Blocked URL: \".concat(href),\n                    children: [\n                        children,\n                        \" [blocked]\"\n                    ]\n                });\n            },\n            img: function(_a) {\n                var src = _a.src, alt = _a.alt, node = _a.node, props = __rest(_a, [\n                    \"src\",\n                    \"alt\",\n                    \"node\"\n                ]);\n                var transformedUrl = transformUrl(src, allowedImagePrefixes);\n                if (transformedUrl !== null) {\n                    // If user provided a custom 'img' component, use it with the transformed URL\n                    if (userComponents === null || userComponents === void 0 ? void 0 : userComponents.img) {\n                        return (0, react_1.createElement)(userComponents.img, __assign({\n                            src: transformedUrl,\n                            alt: alt,\n                            node: node\n                        }, props));\n                    }\n                    // Otherwise use default img\n                    return (0, jsx_runtime_1.jsx)(\"img\", __assign({\n                        src: transformedUrl,\n                        alt: alt\n                    }, props));\n                }\n                return (0, jsx_runtime_1.jsxs)(\"span\", {\n                    className: \"inline-block bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-400 px-3 py-1 rounded text-sm\",\n                    children: [\n                        \"[Image blocked: \",\n                        alt || \"No description\",\n                        \"]\"\n                    ]\n                });\n            }\n        };\n        var mergedComponents = __assign(__assign({}, userComponents), hardenedComponents);\n        var componentProps = __assign(__assign({}, reactMarkdownProps), {\n            components: mergedComponents\n        });\n        return (0, react_1.createElement)(MarkdownComponent, componentProps);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/harden-react-markdown/dist/index.js\n");

/***/ })

};
;